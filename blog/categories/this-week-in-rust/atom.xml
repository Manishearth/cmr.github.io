<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: this-week-in-rust | Rust 'n Stuffs]]></title>
  <link href="http://cmr.github.io/blog/categories/this-week-in-rust/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2014-03-24T18:32:24-04:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/24/this-week-in-rust/"/>
    <updated>2014-03-24T23:33:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/24/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This weeks flips the switch from libgreen-by-default to libnative-by-default.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>91 pull requests were merged this week, topping the <a href="http://cmr.github.io/blog/2014/02/23/this-week-in-rust/">previous
record</a> of 89.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Logging <a href="https://github.com/mozilla/rust/pull/12791">has been extracted to its own
crate</a>. Using the logging macros
(<code>debug!</code> etc) now requires a <code>#[phase(syntax, link)] extern crate log;</code>.</li>
<li>The <code>AtomicFlag</code> type <a href="https://github.com/mozilla/rust/pull/12951">has been
removed</a>.</li>
<li><code>std::vec</code> <a href="https://github.com/mozilla/rust/pull/12772">has been renamed</a> to
<code>std::slice</code>, and the old <code>std::vec_ng</code> <a href="https://github.com/mozilla/rust/pull/13028">moved into its
place</a>.</li>
<li>A <code>Share</code> built-in trait <a href="https://github.com/mozilla/rust/pull/12686">has been
added</a>. It also adds an
<code>Unsafe&lt;T&gt;</code> type, which is now the <em>only</em> &ldquo;safe&rdquo; way of achieving internal
mutability (what the <code>Cell</code> types etc do). This <code>Share</code> trait means that the
type is thread-safe. See the pull request for more details. In particular,
taking the address of a static who contains an <code>Unsafe</code> member is not
allowed.</li>
<li><code>std::cast::transmute_immut_unsafe</code> <a href="https://github.com/mozilla/rust/pull/13015">has been
removed</a> because it is
expressible by safe code.</li>
<li><code>libnative</code> <a href="https://github.com/mozilla/rust/pull/12833">is now the default
runtime</a>. In the process, the
<code>#[no_uv]</code> attribute was renamed to <code>#[no_start]</code>.</li>
<li>Atomics <a href="https://github.com/mozilla/rust/pull/13036">no longer require mutable references to
change</a>, due to the work on
<code>Share</code>, they can safely use interior mutability. Additionally, the generic
atomics have been hidden and <code>AtomicU64</code> has been removed, because not all
targets support it.</li>
<li>The <code>push_bytes</code> and <code>read_bytes</code> methods on <code>Reader</code> and <code>Writer</code> <a href="https://github.com/mozilla/rust/pull/12907">have
been renamed</a> for clarity.</li>
<li><code>RefCell::with</code> and <code>RefCell::with_mut</code> <a href="https://github.com/mozilla/rust/pull/13052">have been
removed</a>, because the Deref
changes make them unnecessary.</li>
<li>The <code>get</code> methods on <code>Ref</code> and <code>RefMut</code> (helpers returned by <code>RefCell</code>)
<a href="https://github.com/mozilla/rust/pull/13053">have been removed</a>, because
the Deref changes make them unnecessary.</li>
<li>The <code>Freeze</code> trait <a href="https://github.com/mozilla/rust/pull/13076">has been
removed</a></li>
<li><code>std::managed</code> <a href="https://github.com/mozilla/rust/pull/13089">has been
removed</a> from the public API.</li>
<li><code>HashMap</code> <a href="https://github.com/mozilla/rust/pull/13088">now correctly uses
<code>TotalEq</code></a>.</li>
<li>The <code>to_owned_vec</code> method on <code>Iterator</code> <a href="https://github.com/mozilla/rust/pull/13090">has been
removed</a>.</li>
<li>The <code>equals</code> method <a href="https://github.com/mozilla/rust/pull/13102">has been
removed</a> from <code>TotalEq</code>, due to
the recent changes in <code>TotalEq</code>&rsquo;s semantics.</li>
<li>Trait implementations may <a href="https://github.com/mozilla/rust/pull/13006">no
longer</a> implement a method
twice.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Some bugs with cross-crate autoderef <a href="https://github.com/mozilla/rust/pull/13087">have been
fixed</a>.</li>
<li>Some Windows issues with non-English locales <a href="https://github.com/mozilla/rust/pull/13078">have been
fixed</a>.</li>
<li>Removing two words from a structure in libsyntax <a href="https://github.com/mozilla/rust/pull/13016">shaved 100MB off the
librustc compile</a>.</li>
<li>Some well-placed indirection in librustc <a href="https://github.com/mozilla/rust/pull/13013">shaved 200MB off the librustc
compile</a>.</li>
<li>Discarding some data after it&rsquo;s no longer useful <a href="https://github.com/mozilla/rust/pull/12770">shaved another 100MB off
the librustc compile</a>.</li>
<li>The new attribute syntax <a href="https://github.com/mozilla/rust/pull/13037">has been
implemented</a>, though the old has
not yet been replaced.</li>
<li><code>Vec</code> is <a href="https://github.com/mozilla/rust/pull/13020">now in the prelude</a>,
as well as the lint for uses of <code>~[T]</code> being made allow by default.</li>
<li>Some false positives for crate searching <a href="https://github.com/mozilla/rust/pull/13017">have been
fixed</a>.</li>
<li>A few bugs with struct ABI on x86 <a href="https://github.com/mozilla/rust/pull/12762">have been
fixed</a>.</li>
<li>Mutable slices in <code>static mut</code> <a href="https://github.com/mozilla/rust/pull/12742">are now
allowed</a>.</li>
<li>Some <code>@</code> has been removed from rustc, <a href="https://github.com/mozilla/rust/pull/12735">yielding an 11k line
patch</a>.</li>
<li><code>bigint</code> <a href="https://github.com/mozilla/rust/pull/12924">has seen some
optimization</a>, though not major.</li>
</ul>


<p>The <a href="http://www.meetup.com/Rust-Bay-Area/events/168366122/">doc sprint</a>
happened last week. A bunch of pull requests for docs for this landed:</p>

<ul>
<li><code>std::ops</code> (from the rollup)</li>
<li><a href="https://github.com/mozilla/rust/pull/12940"><code>time::Tm</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12942"><code>getopts</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12944">Endian conversion in
<code>std::mem</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12954"><code>std::sync::atomics</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12955"><code>std::vec_ng</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12982"><code>std::option</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12948"><code>term</code></a></li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Eunchong Yu</li>
<li>Jonathan S</li>
<li>Jorge Aparicio</li>
<li>Ms2ger</li>
<li>Olle Jonsson</li>
<li>Ryan Scheel (Havvy)</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-18">weekly
meeting</a>
discussed using GitHub for RFCs, the docsprint, and one of the RFCs.</p>

<h1>RFCs</h1>

<p>Some new RFCs:</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/12">Tweaked Variance Inference</a></li>
<li>Another struct inheritance RFC, <a href="https://github.com/rust-lang/rfcs/pull/11">extending
enums</a></li>
<li>Another one, <a href="https://github.com/rust-lang/rfcs/pull/10"><code>abstract struct</code> and <code>abstract
enum</code></a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/18">Unsurprising module imports</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/17"><code>Iterable</code> trait family</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/16">Attributes on match arms and
statements</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/15">SIMD Support</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/19">Opt-in builtin traits</a></li>
</ul>


<h1>Project Updates</h1>

<p><a href="https://github.com/dobkeratops/rustfind">rustfind</a>, doomlord&rsquo;s code browser
for Rust, <a href="http://www.reddit.com/r/rust/comments/20q3uz/rustfind_code_browser/">has been updated</a>.
This is a very nice librustc-integrated tool that supports jump-to-definition.</p>

<p>Relatedly, I&rsquo;m reminded of <a href="https://github.com/dobkeratops/unfold">unfold</a>,
doomlord&rsquo;s tool for displaying &ldquo;brace context&rdquo; of code. It includes an &ldquo;rg&rdquo;
script, which is a simple grep for item definitions.</p>

<p>In leiu of a &ldquo;This Week in Servo&rdquo;, Servo <a href="http://imgur.com/a/O667X">has been making
progress</a> on <a href="http://acid2.acidtests.org/">Acid2</a>.</p>

<h1>Other Announcements</h1>

<ul>
<li><a href="http://nethack4.org/blog/memory.html">Memory Management in C Programs</a> &mdash;
this is a very well written article from the nethack team. All the concepts
discussed within apply to Rust.</li>
<li><a href="http://blog.babelmonkeys.de/2014/03/18/dst.html">Dynamically Sized Types in
Rust</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009087.html">Announcing the new Rust package manager,
Cargo</a>.
It&rsquo;s on <a href="https://github.com/carlhuda/cargo">github</a>.</li>
<li><a href="http://dwarfstd.org/ShowIssue.php?issue=140129.1">Rust is in the next DWARF
standard!</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20nnkk/rust_and_emscripten_a_small_success/">A success story of Rust and
emscripten</a></li>
<li><a href="http://www.meetup.com/Rust-London-User-Group/">A Rust meetup group in
London</a></li>
<li><a href="http://featherweightmusings.blogspot.com.br/2014/03/subtyping-and-coercion-in-rust.html">Subtyping and coercion in
Rust</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/15/this-week-in-rust/"/>
    <updated>2014-03-15T23:33:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>66 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Some more string methods <a href="https://github.com/mozilla/rust/pull/12797">now return
Option</a>.</li>
<li>Matching on <code>~str</code> <a href="https://github.com/mozilla/rust/pull/12756">has been
removed</a>.</li>
<li>IO iterators <a href="https://github.com/mozilla/rust/pull/12414">now yield
IoResult</a>.</li>
<li>The channel types and constructor <a href="https://github.com/mozilla/rust/pull/12815">have been
renamed</a>. <code>Chan</code> is now <code>Sender</code>,
<code>Port</code> is now <code>Receiver</code>, and <code>Chan::new</code> is now <code>std::comm::channel</code>.</li>
<li><code>std::cmp::{min, max}</code> <a href="https://github.com/mozilla/rust/pull/12869">now require
TotalOrd</a>. For floats, use
<code>a.min(b)</code>.</li>
<li>The handling of <code>cfg(not(a, b))</code> <a href="https://github.com/mozilla/rust/pull/12893">has changed
slightly</a>.</li>
<li><code>libextra</code> <a href="https://github.com/mozilla/rust/pull/12896">has finally been
purged</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Another great PR from the illustrious ktt3ja, the compiler <a href="https://github.com/mozilla/rust/pull/12238">will now give
suggestions</a> on how to fix
lifetime woes. This is an awesome usability improvement.</li>
<li>Implementations of <code>Deref</code> and <code>DerefMut</code> <a href="https://github.com/mozilla/rust/pull/12610">are now
considered</a> for automatic
dereferencing.</li>
<li>Partial type hints <a href="https://github.com/mozilla/rust/pull/12764">are now
implemented</a>, but not at the item
level (in function returns etc). The eventual goal is to have
<code>some_iter.collect::&lt;Vec&lt;_&gt;&gt;()</code> be possible.</li>
<li>There is a <a href="http://static.rust-lang.org/doc/master/guide-unsafe.html">new
guide</a> for &ldquo;low level and unsafe code&rdquo;.
<a href="https://github.com/mozilla/rust/pull/12887">PR</a>.</li>
<li>There is now a lint for <a href="https://github.com/mozilla/rust/pull/12861">uses of
<code>~[T]</code></a>. It&rsquo;s very verbose. The
replacement for <code>~[T]</code>, as recommended by the lint, is <code>std::vec_ng::Vec&lt;T&gt;</code>.
It implements almost everything <code>~[T]</code> does.</li>
<li><code>HashMap</code> <a href="https://github.com/mozilla/rust/pull/12081">has been
reimplemented</a> to use <a href="http://codecapsule.com/2013/11/11/robin-hood-hashing/">Robin Hood
hashing</a>. It&rsquo;s now much
more faster, and uses less space.</li>
<li>Support for basic backtracing <a href="https://github.com/mozilla/rust/pull/12602">has been
reimplemented</a>.</li>
<li><code>char</code> <a href="https://github.com/mozilla/rust/pull/12561">now has simple case
folding</a>. That is, basic
locale-ignorant case conversion.</li>
<li><p>Inline assembly <a href="https://github.com/mozilla/rust/pull/12798">now supports the <code>+</code>
modifier</a>.</p>

<h2>New Contributors</h2></li>
<li><p>Adolfo Ochagavía</p></li>
<li>Clark Gaebel</li>
<li>Peter Marheine</li>
<li>Piotr Czarnecki</li>
<li>Piotr Zolnierek</li>
<li>Robert Gawdzik</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-11">weekly
meeting</a>
discussed the new hashmap, destructuring the <code>self</code> argument, partial type
hints, coercion of returned values, as well as the requirements of unsafe
pointers and the continued existence of <code>*mut</code>.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>In the last two weeks, we landed 56 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton made fixes to ACID in
<a href="https://github.com/mozilla/servo/pull/1905">#1905</a></li>
<li>Along with about 20 other PRs, ms2ger brought WindowTimers up to date with
the spec in <a href="https://github.com/mozilla/servo/pull/1890">#1890</a></li>
<li>Pradeep Kumar implemented <code>position:absolute</code> in
<a href="https://github.com/mozilla/servo/pull/1681">#1681</a> and fixed up relative
positioning in <a href="https://github.com/mozilla/servo/pull/1808">#1808</a></li>
<li>Bill Yang fixed up our instructions for installation on Ubuntu Linux in
<a href="https://github.com/mozilla/servo/pull/1881">#1881</a></li>
<li>Bruno Abinader fixed up HTMLCollection in
<a href="https://github.com/mozilla/servo/pull/1838">#1838</a></li>
<li>Isabelle Carter ensured that children of <code>position:fixed</code> items make it into
the correct DisplayList in <a href="https://github.com/mozilla/servo/pull/1832">#1832</a></li>
<li>Manish Goregaokar made <code>getElementsByName</code> return a <code>NodeList</code> in
<a href="https://github.com/mozilla/servo/pull/1756">#1756</a></li>
<li>Keegan McAllister cleaned up our reftest harness and made them test both the
CPU and GPU rendering paths in
<a href="https://github.com/mozilla/servo/pull/1804">#1804</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Bill Yang (analyst74)</li>
<li>Manish Goregaokar (manishearth)</li>
</ul>


<h2>Meetings and Notes</h2>

<p>At this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-10">meeting</a>, we
discussed HTML parsing, embedding, writing modes, the ACID2 burndown, and the
Rust upgrade.</p>

<h1>RFCs</h1>

<p><a href="https://github.com/rust-lang/rfcs/blob/master/active/0001-rfc-process.md">We have a new RFC
process</a>!
Every week I&rsquo;ll list the new RFCs and RFCs that have been accepted.
Contributing to the discussions around these RFCs is the easiest way to drive
the design of Rust.</p>

<p>As an aside, I will no longer include any RFCs in the &ldquo;Announcements&rdquo; section
that are not sent to the RFC repository.</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/1">Private Fields by Default</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/3">Rearchitecting the attribute-usage lint</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/4">Unified Function Call Syntax</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/5">Virtual Structs</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/7">Add OsUnknown as a target operating system</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/8">Redesign Compiler Intrinsics</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/9">&ldquo;Fat Objects&rdquo; for DSTs</a>, an
alternative to &ldquo;Virtual Structs&rdquo;.</li>
</ul>


<h1>Project Updates</h1>

<p><a href="https://github.com/arjantop/rust-bencode">rust-bencode</a>, a pure Rust
implementation of Bencode encoding.
<a href="http://en.wikipedia.org/wiki/Bencode">Bencode</a> is used primarily in the
BitTorrent protocol. This implementation leverages the <code>serialize</code> crate for
automatic Encodable/Decodable implementation as well as custom, more flexible
FromBencode/ToBencode traits.</p>

<p><a href="https://gist.github.com/Kimundi/8782487">Lazily initialized statics v0.2</a>.
This makes safe use of statics for types which require runtime initialization
almost trivial. It utilizes the recent overloadable deref to do optional
initialization before returning the reference to the wrapped type. It&rsquo;s an
example that the right amount of abstractions, but syntactic (macros) and
semantic (operator overloading) can reduce boilerplate for a more pleasant
experience.</p>

<p><a href="https://github.com/phildawes/racer">Racer</a> &ndash; code completion for Rust. This
project is in its early stages, but can already do a fair bit of useful
completion. It is not using the parser (libsyntax) or compiler (librustc), so
it will likely always be inaccurate in some respect. Nevertheless, this may
prove to be an incredibly useful tool.</p>

<p><a href="https://github.com/BurntSushi/quickcheck">QuickCheck for Rust</a>. This has some
seriously great docs. QuickCheck, originally from Haskell, is a way of doing
property-based testing. You describe certain properties your code should have
and it generates random inputs, trying to find inputs that violate those
properties. This is a modern, featureful port of QuickCheck and hopefully gets
even more useful as time goes on.</p>

<p>The <a href="https://github.com/uutils/coreutils">coreutils port</a> is still alive and
making progress. 32 out of 119 programs are implemented. This is a great
project to contribute to if you want a relatively self-contained,
goal-oriented task. It&rsquo;s great practice both for learning Unix* (some of these
utilities are quirky or not-frequently-used) and Rust.</p>

<p>* Well, specifically GNU, which as we all know, <a href="https://en.wikipedia.org/wiki/GNU">ain&rsquo;t
Unix</a>.</p>

<h1>Other Announcements</h1>

<ul>
<li><a href="http://www.fastcolabs.com/3027664/under-the-hood-of-mozillas-new-multi-core-browser-and-the-open-source-language-that-powers-i">Under The Hood Of Mozilla&rsquo;s New Multi-Core Browser And The Open Source
Language That Powers
It</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20ct5c/march_meetup_live_stream_link_oss_parallel_layout/">Bay Area Rust, March 2014
Meetup</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20aj03/writing_an_os_in_rust_in_tiny_steps_steps_15/">Writing an OS in Rust in tiny
steps</a></li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/8878">&ldquo;Virtual fn&rdquo; is a bad
idea</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/11/this-week-in-rust/"/>
    <updated>2014-03-11T23:45:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/11/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This week was the Winter Workweek.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>66 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>Any</code> <a href="https://github.com/mozilla/rust/pull/12667">has been cleaned up</a>, and
in particular the <code>as_void_ptr</code> and <code>as_mut_void_ptr</code> methods are gone.</li>
<li>Patterns are <a href="https://github.com/mozilla/rust/pull/12715">no longer allowed in extern function
declarations</a>. Previously, they
either silently passed or ICEd.</li>
<li>Comparison traits <a href="https://github.com/mozilla/rust/pull/12520">have been
reworked</a>.</li>
<li>DeepClone <a href="https://github.com/mozilla/rust/pull/12706">has been removed</a>.</li>
<li>Compound assignment (eg, <code>+=</code>) <a href="https://github.com/mozilla/rust/pull/12733">is no longer
allowed</a> on potentially
uninitialized variables.</li>
<li><code>std::rand</code> <a href="https://github.com/mozilla/rust/pull/12650">has been moved into a
<code>librand</code></a>.</li>
<li>debuginfo flags <a href="https://github.com/mozilla/rust/pull/12714">have changed
slightly</a>, and more limited
debuginfo is supported again (only line number information).</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Dereferencing <a href="https://github.com/mozilla/rust/pull/12491">is now
overloadable</a>. This is another
part of the smart pointer changes. Code like <code>let x = *Rc::new(5);</code> is now
valid. There is a follow-up pull request that will automatically dereference
smart pointers where appropriate, to avoid expressions like
<code>foo.borrow().get().borrow_mut().get()</code>.</li>
<li>Hexadecimal floating point literals <a href="https://github.com/mozilla/rust/pull/12652">are now
available</a> through a syntax
extension.</li>
<li>Support for creating binary installer tarballs <a href="https://github.com/mozilla/rust/pull/12793">has
landed</a>.</li>
<li>Linker arguments <a href="https://github.com/mozilla/rust/pull/12688">are no longer
deduplicated</a>.</li>
<li>Weak linkage etc <a href="https://github.com/mozilla/rust/pull/12556">is now
possible</a> via a <code>linkage</code>
attribute.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Dmitry Promsky</li>
<li>Mike Boutin</li>
<li>Robert Gawdzik</li>
</ul>


<h1>Weekly Meeting</h1>

<p>There was no weekly meeting due to the workweek. There are <a href="https://github.com/mozilla/rust/wiki/Meeting-workweek-2014-03-03">notes and
minutes</a>,
however, and there will be many <a href="https://github.com/rust-lang/rfcs">RFCs</a> from
it.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/20143y/leveraging_tuples_to_make_a_statically_typed/">Leveraging tuples to make a statically-typed, concatenative
EDSL</a></li>
<li><a href="http://featherweightmusings.blogspot.com/2014/03/subtyping-and-coercion-in-rust.html">Subtyping and coercion in
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ztahv/rust_language_support_in_atom/">Rust support for the Atom
editor</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/02/this-week-in-rust/"/>
    <updated>2014-03-02T12:43:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/03/02/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>83 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>IterBytes and <code>std::to_bytes</code> <a href="https://github.com/mozilla/rust/pull/12492">have been
removed</a>. If you were depending on
them for anything non-<code>Hash</code> related, look into using <code>serialize</code> instead.</li>
<li><code>break</code> and <code>continue</code> <a href="https://github.com/mozilla/rust/pull/12338">are now hygienic in
macros</a>, with respect to labels.
Unfortunately there&rsquo;s a bug in it where <a href="https://github.com/mozilla/rust/issues/12512">loop labels hide variables of the
same name</a>.</li>
<li><code>extern fn</code> <a href="https://github.com/mozilla/rust/pull/12328">now always means <code>extern "C"
fn</code></a>, rather than being
context-dependent.</li>
<li><code>std::run</code> <a href="https://github.com/mozilla/rust/pull/12380">has been removed</a>,
and <code>std::io::process</code> improved to pick up the slack.</li>
<li><code>#[deriving(ToStr)]</code> <a href="https://github.com/mozilla/rust/pull/12412">has been
removed</a> in favor of
<code>#[deriving(Show)]</code>. <code>ToStr</code> is now implemented over all types which implement
<code>Show</code>, as <code>format!("{}" val)</code>.</li>
<li><code>flate</code> <a href="https://github.com/mozilla/rust/pull/12445">now returns a
<code>CVec&lt;u8&gt;</code></a> rather than a <code>~[u8]</code>,
for efficiency.</li>
<li><code>extra::json</code> <a href="https://github.com/mozilla/rust/pull/12453">has been
liberated</a> and now lives in
<code>libserialize</code>.</li>
<li><code>swap_remove</code> on vectors <a href="https://github.com/mozilla/rust/pull/12481">now returns an
<code>Option</code></a>.</li>
<li>A curious bug where bindings in match weren&rsquo;t treated as assignment <a href="https://github.com/mozilla/rust/pull/12508">has
been fixed</a>. See the associated
bug report for examples which this will break.</li>
<li>Some useless reexports <a href="https://github.com/mozilla/rust/pull/12485">have been
removed</a> from the prelude.</li>
<li>The <code>Bool</code> trait <a href="https://github.com/mozilla/rust/pull/12473">has been
removed</a>.</li>
<li>A bug where operator overloads were over-zealous <a href="https://github.com/mozilla/rust/pull/12493">has been
fixed</a>.</li>
<li>Statics are <a href="https://github.com/mozilla/rust/pull/11979">no longer allowed to contain anything with
destructors</a>. The exact rules are
laid out quite nicely in the PR.</li>
<li><code>collections:List</code> <a href="https://github.com/mozilla/rust/pull/12348">has been refactored to use
iterators</a>.</li>
<li><code>HashMap</code> <a href="https://github.com/mozilla/rust/pull/12544">is now generic over
hashers</a>.</li>
<li><code>assert_eq!</code> <a href="https://github.com/mozilla/rust/pull/12626">now uses <code>{}</code> instead of <code>{:?}</code> for the error
message</a>.</li>
<li>Type parameter overrides <a href="https://github.com/mozilla/rust/pull/12525">are now feature
gated</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Invalid crate handling <a href="https://github.com/mozilla/rust/pull/12645">is now more
graceful</a>.</li>
<li><code>std::io::stdout()</code> and <code>stderr()</code> <a href="https://github.com/mozilla/rust/pull/12630">are buffered by default
now</a>.</li>
<li>Improper operator overloads <a href="https://github.com/mozilla/rust/pull/12638">are no longer an
ICE</a>.</li>
<li>There&rsquo;s now a warning for <a href="https://github.com/mozilla/rust/pull/12595">publicly exposing private types in function
signatures</a>.</li>
<li><code>libnative</code>&rsquo;s Windows file handling <a href="https://github.com/mozilla/rust/pull/12584">has been
rewritten</a> and now actually works.
rustc uses libnative by default now.</li>
<li>Generated binary size <a href="https://github.com/mozilla/rust/pull/12616">has been brought down a
bit</a>. There is much more room for
improvement.</li>
<li>&ldquo;Strict Version Hashes&rdquo; <a href="https://github.com/mozilla/rust/pull/12533">have been
introduced</a>. This is a purely
internal change. The hash is of the crate&rsquo;s public ABI and rustc checks this
when linking crates together, to avoid problems such as &ldquo;def id drift&rdquo;.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Daniel Fagnan</li>
<li>Felix Crux</li>
<li>Gary M. Josack</li>
<li>George Papanikolaou</li>
<li>Jag Talon</li>
<li>Johannes Löthberg</li>
<li>Mickaël Delahaye</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-25">weekly
meeting</a>
discussed TotalEq/TotalOrd, weak extern functions, channel naming, and a brief
discussion on <code>use</code> paths being absolute.</p>

<p>It was announced that a Sam Wright has been contracted to work on the
tutorial, and the Michael Woerister has been contracted to work on debug info.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 27 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Josh Matthews landed the massive changes to remove <code>@mut</code> from the DOM types
in preparation for a Rust upgrade in
<a href="https://github.com/mozilla/servo/pull/1735">#1735</a>
<a href="https://github.com/mozilla/servo/pull/1591">#1591</a> and
<a href="https://github.com/mozilla/servo/pull/1755">#1755</a>.</li>
<li>Tetsuharu Ohzeki refactored our commandline options out of the rendering
crate and into a more reasonable place in
<a href="https://github.com/mozilla/servo/pull/1738">#1738</a>.</li>
<li>Ms2ger simplified our Document implementation in
<a href="https://github.com/mozilla/servo/pull/1739">#1739</a>.</li>
<li>Patrick Walton removed the need to explicitly create leaf sets during
parallel layout in <a href="https://github.com/mozilla/servo/pull/1700">#1700</a>.</li>
<li>Harrison Gentry cleaned up some type names in
<a href="https://github.com/mozilla/servo/pull/1781">#1781</a>.</li>
<li>Keegan McAllister moved fontconfig in-tree on Linux in order to get a
thread-safe implementation in
<a href="https://github.com/mozilla/servo/pull/1780">#1780</a>.</li>
<li>Saurabh Anand made the DOM parser pass in the correct content types in
<a href="https://github.com/mozilla/servo/pull/1775">#1775</a>.</li>
<li>tgkokk fixed the bindings generator to no longer produce .pyc files in
<a href="https://github.com/mozilla/servo/pull/1735">#1735</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Saurabh Anand (sawrubh)</li>
<li>Harrison Gentry (hgentry)</li>
<li>tgkokk</li>
</ul>


<h2>Meetings</h2>

<p>At this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-24">meeting</a>, we
discussed embedding, the JSManaged conversion, a Rust upgrade, vtables, and
recruiting efforts.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/02/28/rust-rfc-opt-in-builtin-traits/">RFC: Opt-in Builtin
Traits</a></li>
<li><a href="https://github.com/mozilla/rust/issues/9912#issuecomment-36073562">Structural single-inheritance
counter-proposal</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/02/25/rust-rfc-stronger-guarantees-for-mutable-borrows/">RFC: Stronger Guarantees for Mutable
Borrows</a></li>
<li><a href="https://github.com/kvark/dark">Dark</a>, an experimental universal data
compressor based on the BWT-DC scheme</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/008832.html">cargo-lite
v1.1.0 release</a></li>
<li><a href="http://pcwalton.github.io/blog/2014/02/25/revamped-parallel-layout-in-servo/">Revamped parallel layout in
servo</a></li>
<li><a href="https://air.mozilla.org/rust-meetup-february-2014/">February Bay Area Rust
Recording</a></li>
<li><a href="https://github.com/brianmadden/rust-bloom-filter">A bloom filter implementation</a></li>
<li><a href="https://github.com/hoeppnertill/redox-tween">A tweening library</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/23/this-week-in-rust/"/>
    <updated>2014-02-23T16:09:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/23/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This is the busiest week in This Week in Rust&rsquo;s history, <a href="http://buildbot.rust-lang.org/bors/bors.html">and the pull request
queue isn&rsquo;t getting any
shorter</a>. This is a mixed
blessing: tons of work is getting done, but it takes forever to get merged.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>89 pull requests were merged this week. This is the most pull requests merged
in a week, ever. 10 1.0 issues were closed this week, and 0 opened.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Unique vector patterns (matching on a <code>~[]</code>) <a href="https://github.com/mozilla/rust/pull/12244">has been removed from the
language</a>. One can still match
against a slice.</li>
<li><code>std::unstable</code> <a href="https://github.com/mozilla/rust/pull/12311">has been
dismantled</a>. Even as we march
towards 1.0 stability, I will still consider changes to any public interface
breaking.</li>
<li><code>Bitwise::population_count</code> <a href="https://github.com/mozilla/rust/pull/12331">has been
renamed</a> to
<code>Bitwise::count_ones</code>.</li>
<li><code>TaskBuilder</code> <a href="https://github.com/mozilla/rust/pull/12232">has seen some
cleanup</a> to actually use the
emerging &ldquo;builder&rdquo; pattern.</li>
<li>As part of <code>std::num</code>s <a href="https://github.com/mozilla/rust/issues/10387">continued
revamp</a>, <a href="https://github.com/mozilla/rust/pull/12321">the <code>Real</code> trait has
been dismantled</a> in favor of the
<code>Float</code> trait.</li>
<li>Another issue with imports <a href="https://github.com/mozilla/rust/pull/12245">has been
fixed</a>. In particular, when
importing an item where there are two items with the name, one private and one
public, the private one was accidentally imported too. This shouldn&rsquo;t affect
any code, as it&rsquo;s a fairly convoluted case.</li>
<li>UTF-16 handling <a href="https://github.com/mozilla/rust/pull/12317">has been
refactored</a> to match the standard
string APIs.</li>
<li><code>extra::test</code> <a href="https://github.com/mozilla/rust/pull/12343">has been
liberated</a> into a <code>libtest</code>.</li>
<li><code>extra::time</code> <a href="https://github.com/mozilla/rust/pull/12411">has been
liberated</a> into a <code>libtime</code>.</li>
<li><code>EnumSet</code> <a href="https://github.com/mozilla/rust/pull/12415">has been moved</a> into
<code>libcollections</code>.</li>
<li>The <code>Integer</code> trait <a href="https://github.com/mozilla/rust/pull/12326">has
migrated</a> to <code>libnum</code>.</li>
<li><code>std::hash</code> <a href="https://github.com/mozilla/rust/pull/11863">has been rewritten and
redesigned</a>.</li>
<li><code>std::trie</code> and <code>std::hashmap</code> <a href="https://github.com/mozilla/rust/pull/12428">have been
moved</a> into <code>libcollections</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Pull request 12345 was opened. In the spirit of significant arbitrary
numbers, <a href="https://github.com/mozilla/rust/pull/12345">it is absolutely
menial</a>.</li>
<li><code>rustdoc</code> <a href="https://github.com/mozilla/rust/pull/12298">will now test code blocks by
default</a>, not requiring a &ldquo;rust&rdquo;
annotation.</li>
<li>Unix domain sockets <a href="https://github.com/mozilla/rust/pull/12103">are now
implemented</a> in <code>libnative</code>.</li>
<li><code>MutexArc</code> <a href="https://github.com/mozilla/rust/pull/12336">no longer has a <code>Freeze</code>
bound</a>.</li>
<li>rustdoc has seen <a href="https://github.com/mozilla/rust/pull/12339">a bunch of minor
fixes</a>.</li>
<li>More noteworthy, there is now <a href="https://github.com/mozilla/rust/pull/12416">syntax
highlighting</a> in rustdoc output!</li>
<li>The <code>unnecessary_parens</code> lint <a href="https://github.com/mozilla/rust/pull/12366">now looks at
assignments</a> for extraneous
parenthesis.</li>
<li>A bug with infinitely recursing macro errors <a href="https://github.com/mozilla/rust/pull/12370">has been
fixed</a>.</li>
<li><code>std::str::is_utf8</code> <a href="https://github.com/mozilla/rust/pull/12314">has been internally
refactored</a> to use 100% safe code,
as well as get a bit of a speed boost.</li>
<li><code>format!</code> <a href="https://github.com/mozilla/rust/pull/12349">now handles temporaries
better</a>.</li>
<li>If you find yourself working with libsyntax, <a href="https://github.com/mozilla/rust/pull/12387">there is now a <code>-Z</code>
option</a> for dumping the AST as
JSON. This can be useful when trying to figure out what code corresponds to
what structure or enum variant.</li>
<li>Using channels outside of the runtime <a href="https://github.com/mozilla/rust/pull/12397">has been
fixed</a>.</li>
<li>Generic Drop implementations with trait bounds <a href="https://github.com/mozilla/rust/pull/12403">has been
fixed</a>. Yay!</li>
<li>Integer formatting <a href="https://github.com/mozilla/rust/pull/12382">has been
rewritten</a>. It&rsquo;s now cleaner, does
less allocation, and is 3-6x faster in many cases.</li>
<li><code>std::io::stdin</code> <a href="https://github.com/mozilla/rust/pull/12422">is now buffered by
default</a>.</li>
<li>All language items <a href="https://github.com/mozilla/rust/pull/11603">must now be
reachable</a>. Previously this caused
a linker error.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Axel Viala</li>
<li>Craig MacKenzie</li>
<li>Douglas Young</li>
<li>Dylan Braithwaite</li>
<li>Ehsanul Hoque</li>
<li>Sterling Greene</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-18">weekly
meeting</a>
discussed the Hash changes, debug assertions, and commit log administrivia.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 15 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Sankha Narayan Guria made drawing a single line much more efficient in
<a href="https://github.com/mozilla/servo/pull/1709">#1709</a></li>
<li>Lars Bergstrom removed the last of the <code>@mut</code>s not in script in
<a href="https://github.com/mozilla/servo/pull/1712">#1712</a></li>
<li>Junyoung Cho fixed up a bug where we were removing <code>&amp;nbsp;</code>s in
<a href="https://github.com/mozilla/servo/issues/1727">#1727</a></li>
<li>Youngmin Yoo added support for the <code>&lt;object&gt;</code> element in
<a href="https://github.com/mozilla/servo/pull/1664">#1664</a></li>
<li>Keegan McAllister made use of the border box more consistent in layout
in <a href="https://github.com/mozilla/servo/pull/1699">#1699</a></li>
<li>Peiyong Lin fixed up the naming of some of our flow methods in
<a href="https://github.com/mozilla/servo/pull/1693">#1693</a></li>
<li>Simon Sapin refactored the <code>cascade</code> methods in
<a href="https://github.com/mozilla/servo/pull/1706">#1706</a></li>
<li>Adam Sinnett corrected the parent type names of Text, Comment, and PI
types in <a href="https://github.com/mozilla/servo/pull/1702">#1702</a></li>
<li>Patrick Walton added some inlining that sped up flow contruction even
more in <a href="https://github.com/mozilla/servo/pull/1602">#1602</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Peiyong Lin (lpy)</li>
<li>Adam Sinnett (quandrum)</li>
</ul>


<h2>Meetings</h2>

<p>We did not have a meeting this week because of President&rsquo;s Day in the US.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/drbawb/rust-story"><code>rust-story</code></a>, a Rust port of the
&ldquo;Reconstructing Cave Story&rdquo; video series</li>
<li><a href="http://www.reddit.com/r/rust/comments/1y69r0/rlanerustgamedevkit/"><code>rust-gamedev-kit</code></a>,
a collection of libraries for gamedev</li>
<li><a href="http://www.reddit.com/r/rust/comments/1yfdzh/the_periodic_table_of_rust_types/">Periodic Table of Rust
Types</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ykop6/so_i_wrote_a_dominion_simulator_in_rust_though/">A Dominion simulator, in
Rust</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-February/008763.html">Travis CI is building pull
requests</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1yr2uz/tetris_game_in_rust/">A terminal tetris game, in
Rust</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
