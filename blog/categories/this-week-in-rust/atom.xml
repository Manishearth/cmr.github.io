<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: this-week-in-rust | Rust 'n Stuffs]]></title>
  <link href="http://cmr.github.io/blog/categories/this-week-in-rust/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2014-01-12T20:48:00-05:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/11/this-week-in-rust/"/>
    <updated>2014-01-11T16:23:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/11/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>0.9 was released this week, bringing with it a restructuring of our
documentation and the usual influx of attention.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>57 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Float literals are now <a href="https://github.com/mozilla/rust/pull/11480">more
strict</a>. Octal and hex float
literals are no longer allowed.</li>
<li>A nasty soundness bug <a href="http://www.reddit.com/r/rust/comments/1uxbgm/moving_ownership_via_borrowed_reference/">reported on
reddit</a>
<a href="https://github.com/mozilla/rust/pull/11465">has been fixed</a>.</li>
<li><code>print</code> and <code>println</code> <a href="https://github.com/mozilla/rust/pull/11416">have been removed from the
prelude</a>. Use the <code>print!</code> and
<code>println!</code> macros instead.</li>
<li><code>Rc</code> <a href="https://github.com/mozilla/rust/pull/10926/files">now supports weak
pointers</a>, and it no longer
requires the wrapped type to be Freeze or Send. That is, it no longer
statically avoids cycles using the type system. It was found to be too
restrictive. The only constructor is now <code>Rc::new</code>.</li>
<li>The <code>eof</code> method on <code>Reader</code> <a href="https://github.com/mozilla/rust/pull/11376">has been
removed</a>, as only files really
know when they are at eof. It is now a method on the types it makes sense for
<a href="https://github.com/mozilla/rust/pull/11437">such as <code>MemReader</code> and
<code>BufReader</code></a>.</li>
<li><code>std::num</code> is seeing some simplification. <a href="https://github.com/mozilla/rust/pull/11412">Many traits have been merged into
<code>Real</code></a>.</li>
<li>Similarly, <a href="https://github.com/mozilla/rust/pull/11402"><code>ApproxEq</code> has been
removed</a>.</li>
<li>The <code>std::io::Decorator</code> trait <a href="https://github.com/mozilla/rust/pull/11394">has been
removed</a>.</li>
<li>A nasty resolve bug <a href="https://github.com/mozilla/rust/pull/11370">has been
fixed</a>. Importing a trait made it
available to all child modules; now it is only available in the module that
imported it, as it should be.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/10854">method renaming</a> has been
done to <code>Option</code>. <code>map_default</code> is now <code>map_or</code> and <code>mutate_default</code> is now
<code>mutate_or_set</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>A <a href="https://github.com/mozilla/rust/pull/11329">lint for unnecessary casts</a>
has been added. It is set to allow by default.</li>
<li><a href="https://github.com/mozilla/rust/pull/11342">Mutable iterators</a> have been
added to <code>std::trie</code>.</li>
<li>A bug in rustpkg preventing it from finding any static libraries, and
libnative, <a href="https://github.com/mozilla/rust/pull/11338">has been fixed</a>.</li>
<li><code>u64_from_be_bytes</code> <a href="https://github.com/mozilla/rust/pull/11448">has seen some
optimization</a>, it is 3-6x faster.</li>
<li><code>box</code> has been
<a href="https://github.com/mozilla/rust/pull/11055">kinda-implemented</a>. <code>box(GC)</code> and
<code>box(HEAP)</code> now work.</li>
<li>Typed arenas <a href="https://github.com/mozilla/rust/pull/11358">have been added</a>.
They&rsquo;re really fast!</li>
<li><code>stderr</code>/<code>stdout</code> is now
<a href="https://github.com/mozilla/rust/pull/11353">per-task</a>, which will allow
capturing or redirecting a task&rsquo;s output.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Andrew Chin</li>
<li>Clinton Ryan</li>
<li>Derek Chiang</li>
<li>Mick Koch</li>
<li>Nick Cameron</li>
<li>Niels langager Ellegaard</li>
<li>Nif Ward</li>
<li>Raphael Catolino</li>
<li>Rich Lane</li>
<li>Dzmitry Malyshau</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-07">weekly
meeting</a>
discussed Windows XP support, bounded channels, the Rc changes, using guard
pages, loadable syntax extensions, and functions that fail.</p>

<h1>Quotes of the Week</h1>

<p>&ldquo;[I] find it easy to get lost in this file.&rdquo; &ndash;
<a href="https://github.com/mozilla/rust/pull/11472/files#r8810362">kud1ing</a> on
<code>libc.rs</code>
&ndash; &ldquo;A language is more than just semantics, syntax, and an implementation &ndash;
it&rsquo;s about an ecosystem and a community. Without that it dies.&rdquo; &ndash;
<a href="https://botbot.me/mozilla/rust-internals/msg/9689869/">bjz</a></p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>The Servo tree has been mostly frozen for a large part of this week, as the
nearly month-long Rust upgrade is finally getting close and we wanted to avoid
additional rebases. We did land 7 PRs, many with associated fixes, however.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Kim fixed anonymous boxes and images disappearing during line
breaking in <a href="https://github.com/mozilla/servo/pull/1461">#1461</a> and
<a href="https://github.com/mozilla/servo/pull/1463">#1463</a>.</li>
<li>Patrick Walton fixed a race issue with window sizes and script code in
<a href="https://github.com/mozilla/servo/pull/1409">#1409</a>.</li>
<li>Jaeman Park landed CSS parsing and selector matching for pseudo element
:before and :after in <a href="https://github.com/mozilla/servo/pull/1464">#1464</a>.</li>
<li>Bruno Abinder made some DOM additions in
<a href="https://github.com/mozilla/servo/pull/1466">#1466</a> and
<a href="https://github.com/mozilla/servo/pull/1472">#1472</a>.</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-06">meeting</a>, we
discussed the upcoming workweek, the Rust upgrade, ARM buildbots for Rust and
Servo, and some research we&rsquo;re doing into the breakdown of page</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1uy7rt/an_appeal_for_correct_capable_futureproof_math_in/">An appeal for correct, capable, future-proof math in nascent programming
languages</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1v10ac/thehydroimpulserustwebsite/">An in-progress redesign of the
website</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1v104e/combining_rusthttp_with_routerecognizerrs_to/">Combining rust-http with route-recognizer.rs to create routable
HTTP</a></li>
<li><a href="https://github.com/mneumann/rust-toml">A TOML configuration file parser</a></li>
<li><a href="http://llvm.lyngvig.org/Articles/Mapping-High-Level-Constructs-to-LLVM-IR">Mapping High-Level Constructs to LLVM
IR</a>,
a peek at what drives the underbelly of the compiler</li>
<li><a href="https://github.com/mozilla/rust/pull/11399">Add garbage collector to
<code>std::gc</code></a></li>
<li><a href="http://www.meetup.com/Rust-Bay-Area/events/153909222/">Bay Area Rust Meetup:
1/28/2014</a></li>
<li><a href="https://github.com/HeroesGrave/rust-workspace">rust-workspace</a>, a simple
shell to make maintaining Rust projects easier</li>
<li><a href="http://www.reddit.com/r/rust/comments/1usupv/semantic_code_browser_for_rust/">Semantic code browser for
Rust</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/01/09/rvalue-lifetimes-in-rust/">Rvalue Lifetimes in
Rust</a></li>
<li><a href="http://steveklabnik.github.io/nobody_knows_rust/#/">Nobody Knows Rust &ndash; Steve Klabnik&rsquo;s slides</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007753.html">0.9 Release
Announcement</a></li>
<li><a href="https://github.com/cmr/rust-logo-3d/blob/master/rlogo.stl">A 3d-printable Rust
logo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/06/this-week-in-rust/"/>
    <updated>2014-01-06T01:09:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/06/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>0.9 is on the brink. Perhaps this week, the next at the latest. Some hefty
changes come this week.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>63 pull requests were merged this week.</p>

<h2>Breaking changes</h2>

<ul>
<li><code>@mut</code> <a href="https://github.com/mozilla/rust/pull/11251">has been removed</a>. The
replacements are <code>Gc&lt;RefCell&lt;T&gt;&gt;</code> or, preferably, <code>Rc&lt;RefCell&lt;T&gt;&gt;</code>. See also
<code>Cell&lt;T&gt;</code> for <code>Pod</code> types.</li>
<li>Dereferencing of unary tuple structs and enums (tuple structs with one field
and enums with one variant) <a href="https://github.com/mozilla/rust/pull/11188">has been
removed</a>. An example:</li>
</ul>


<p>```
struct Foo(int);</p>

<p>fn bar() {</p>

<pre><code>let x = Foo(42);
// previously `*x` would return 42
let Foo(y) = x; // but now you do this pattern matching
</code></pre>

<p>}
```</p>

<ul>
<li><code>Either</code> <a href="https://github.com/mozilla/rust/pull/11149">has been removed</a>.</li>
<li><code>extern mod foo (name="bar")</code> syntax <a href="https://github.com/mozilla/rust/pull/10696">has been
removed</a>. The newer <code>extern mod
foo = "bar"</code> syntax replaces it.</li>
<li>The hashmap iterators <a href="https://github.com/mozilla/rust/pull/11242">have
changed</a>. Use <code>.keys()</code> and
<code>.values()</code> respectively.</li>
<li>rustc now outputs <a href="https://github.com/mozilla/rust/pull/11184">1-based column
numbers</a>. This shouldn&rsquo;t
affect any tooling that assume columns are 0-based. But, this brings us in
line with gcc.</li>
<li>The <code>cfg</code> attribute <a href="https://github.com/mozilla/rust/pull/11093">will now strip struct fields and enum
variants</a>.</li>
<li>The contents of the <code>crate_type</code> attribute <a href="https://github.com/mozilla/rust/pull/11264">are now checked for
validity</a>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li><code>Reader</code>/<code>Writer</code> have regrown some functionality. It can now <a href="https://github.com/mozilla/rust/pull/10861">read and
write strings</a>, though <em>only</em> real
UTF-8 strings. Encoding support will come later. <code>write_char</code> <a href="https://github.com/mozilla/rust/pull/11310">also
reappeared</a>.</li>
<li>Unwinding on ARM <a href="https://github.com/mozilla/rust/pull/11301">has been
fixed</a>. Still no C++!</li>
<li>Native UDP IO <a href="https://github.com/mozilla/rust/pull/11186">has been
implemented</a>.</li>
<li>A <code>rust_fail</code> function <a href="https://github.com/mozilla/rust/pull/11231">has been
added</a>. Break on this function to
catch failure. Should be easier to remember! Certainly better than
<code>_Unwind_RaiseException</code>.</li>
<li>Some more C <a href="https://github.com/mozilla/rust/pull/11208">has been converted to
Rust</a>.</li>
<li>volatile load and store intrinsics <a href="https://github.com/mozilla/rust/pull/11173">have been
added</a>.</li>
</ul>


<p>Additionally, it hasn&rsquo;t landed yet, but <a href="https://github.com/mozilla/rust/pull/11151">external syntax
extensions</a>, aka loadable syntax
extensions, aka procedural macros, seem to be really close to landing. This is
quite exciting!</p>

<h2>New Contributors</h2>

<ul>
<li>Alan Andrade</li>
<li>Carl-Anton Ingmarsson</li>
<li>John Louis Walker</li>
<li>Peter Zotov</li>
<li>lyuts</li>
<li>Matthew Auld</li>
</ul>


<h1>Meeting</h1>

<p>Once again, no meeting due to the holidays. There will be one on January 7,
however.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>Mozilla Corp. came back from vacation this Thursday, January 2nd. We landed 14
PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Aydin Kim fixed Android support &ndash; hooray! &ndash; in
<a href="https://github.com/mozilla/servo/pull/1445">#1445</a>.</li>
<li>Mike Blumenkrantz cleaned up our configure script to avoid the &ldquo;configure
smashed my submodule edits&rdquo; problem in
<a href="https://github.com/mozilla/servo/pull/1449">#1449</a>.</li>
<li>deokjinkim fixed several font-related issues in
<a href="https://github.com/mozilla/servo/pull/1454">#1454</a> and
<a href="https://github.com/mozilla/servo/pull/1452">#1452</a>.</li>
<li>Simon Sapin refactored font styles in
<a href="https://github.com/mozilla/servo/pull/1455">#1455</a>.</li>
<li>Shamir Khodzha implemented <code>child_elements</code> for filtered iteration in
<a href="https://github.com/mozilla/servo/pull/1443">#1443</a>.</li>
<li>ms2ger landed several changes to attributes in
<a href="https://github.com/mozilla/servo/pull/1439">#1439</a>,
<a href="https://github.com/mozilla/servo/pull/1456">#1456</a>, and
<a href="https://github.com/mozilla/servo/pull/1460">#1460</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Shamir Khodzha</li>
<li>Mike Blumenkrantz</li>
</ul>


<h1>Announcements, etc</h1>

<ul>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/">DST, take
5</a>. I
think this might be the last DST proposal, and I quite like it.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007687.html">rust-redis and
rust-msgpack</a>.</li>
<li><a href="http://dwrensha.github.io/capnproto-rust/2014/01/04/zmq-explorers.html">A capnproto-rust and zmq
example</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1ucrfg/using_rust_for_an_undergraduate_os_course/">Post-mortem from the OS class taught in
Rust</a>.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007659.html">Using CMake with
Rust</a></li>
<li><a href="https://github.com/huonw/boehm-rs">boehm-rs</a>, a <code>Gc&lt;T&gt;</code> type with a real
GC!</li>
<li><a href="https://github.com/wellposed/rust-OpenBLAS">rust-OpenBLAS</a>, a (in-progress)
library for using OpenBLAS and LAPACK.</li>
<li><a href="https://github.com/WebeWizard/libhttpd/tree/master">libhttpd</a>, a library
for writing web servers. Intended to be similar to jetty.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/30/this-week-in-rust/"/>
    <updated>2013-12-30T00:48:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/30/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>It&rsquo;s been a slow week due to the holidays. In the next week or two 0.9 is
being released. It&rsquo;s an exciting release, but in more subtler ways than the
previous 3. Many small details, especially around the runtime and linking,
have changed that make Rust faster and more flexible without necessarily being
a breaking change. As always, the detailed changelog will have the
nitty-gritties.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>36 pull requests were merged this week. bors was feeling unwell for a bit,
due to a deadlock in a scheduler test that was fixed today and a deadlock in
(incorrect usage of) LLVM.</p>

<h2>Breaking changes</h2>

<ul>
<li>The <code>comm</code> primitives are <a href="https://github.com/mozilla/rust/pull/11111">never <code>Freeze</code>
anymore</a>.</li>
<li>The <code>link</code> attribute is <a href="https://github.com/mozilla/rust/pull/11091">now
forbidden</a> on crates. All hail
<code>crate_id</code>!</li>
<li><a href="https://github.com/mozilla/rust/pull/11121">All of our C++ dependencies have been
removed</a>. This is only breaking
because it changes the debugging experience; <code>rust_begin_unwind</code> is gone and
<code>catch throw</code> doesn&rsquo;t work because we don&rsquo;t use C++ exceptions anymore. To set
a breakpoint on task failure, <code>break _Unwind_RaiseException</code>.</li>
<li>The underbelly of the runtime has been <a href="https://github.com/mozilla/rust/pull/10965">completely
overhauled</a>. Alex wrote an <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007565.html">email
to the
list</a>
about the practical implications of this.</li>
<li><code>std::result::collect</code> <a href="https://github.com/mozilla/rust/pull/11098">now uses an
iterator</a>.</li>
<li><code>ClonableIterator</code> <a href="https://github.com/mozilla/rust/pull/11160">has been
renamed</a> to <code>CloneableIterator</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>libnative has <a href="https://github.com/mozilla/rust/pull/11159">process and TCP</a>
implementations.</li>
<li>Coercion of types into trait objects <a href="https://github.com/mozilla/rust/pull/11156">is now
supported</a>, which means <code>as
~SomeTrait</code> and <code>as &amp;Reader</code> can be left out.</li>
<li>I normally wouldn&rsquo;t mention this since it&rsquo;s internal to the compiler, but
Patrick made a heroic effort to <a href="https://github.com/mozilla/rust/pull/11058">remove <code>@mut</code> from all the
places</a>.</li>
<li>rustdoc can <a href="https://github.com/mozilla/rust/pull/11120">now test doc
comments</a>. See the pull request
for details on how and what is tested (also in the rustdoc manual).</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Sébastien Paolacci</li>
</ul>


<h1>Meeting</h1>

<p>There was no meeting this week due to the holiday.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>Mozilla is on an extended holiday break until January 2nd, but we still landed
2 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Jack Moffitt re-enabled building with make to enable work on cross-targeting
ARM in <a href="https://github.com/mozilla/servo/pull/1441">#1441</a>.</li>
<li>ms2ger cleaned up how we handle namespaces in DOM elements
<a href="https://github.com/mozilla/servo/pull/1438">#1438</a></li>
</ul>


<h1>Announcements, etc</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007575.html">rust-openssl</a>
has been formed from the union of sfackler&rsquo;s rust-ssl and erickt&rsquo;s rustcrypto.</li>
<li><a href="http://www.lars.com/concurrency/rust/servo/2013/12/21/concurrency-rust-and-servo.html">Concurrency models, Rust, and
Servo</a>.</li>
<li><a href="http://words.steveklabnik.com/rust-is-surprisingly-expressive">Rust is surprisingly
expressive</a>.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007486.html">irust</a>,
a basic REPL written in Ruby.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/22/this-week-in-rust/"/>
    <updated>2013-12-22T06:57:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/22/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a></p>

<p>This week brings a bunch of optimizations, cleanups, and the <code>std::comm</code>
rewrite. The <code>pkgid</code> attribute has also seen some changes.</p>

<!-- more -->


<p>This week also brings a bunch of tiny bugfixes, many of which I do not mention
below. Out of the 52 PRs this week, I only mention 16. The decision to include
a PR or not is fairly arbitrary, but I try to maintain a &ldquo;significance
barrier&rdquo; so that the list is not huge and hard to read (and also to save me
work!). Examples of things which I will stop including mentions of are test
fixes, minor documentation changes, build infrastructure fixes, and any
cleanup to the compiler that doesn&rsquo;t result in a relatively significant
speedup or memory usage decrease. I don&rsquo;t do this out of malice, but out of
laziness and convenience. <code>&lt;3</code></p>

<h1>What&rsquo;s cooking on master?</h1>

<p>52 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>std::comm</code> <a href="https://github.com/mozilla/rust/pull/10830">has been
rewritten</a>. In short, use
<code>Chan::new</code> and <code>SharedChan::new</code> to construct a Port/Chan pair. We&rsquo;re in the
ballpark of Go&rsquo;s performance, which is exciting. Read the PR for more details.</li>
<li>Some more <code>std::vec::raw</code>
<a href="https://github.com/mozilla/rust/pull/10996">cleanup</a> has turned some free
functions into methods. <code>.as_mut_buf</code> and friends <a href="https://github.com/mozilla/rust/pull/11029">have also been
removed</a>, replaced by using
<code>.as_ptr</code>, <code>.as_mut_ptr</code>, and <code>.len</code>.</li>
<li><code>extra::ebml</code> <a href="https://github.com/mozilla/rust/pull/11057">has been partially
de-@d</a>.</li>
<li>A ton of useless traits, <code>ToOption</code> etc,  <a href="https://github.com/mozilla/rust/pull/10967">have been
removed</a>.</li>
<li>A nasty bug where having an <code>impl</code> for a type forced it to be public <a href="https://github.com/mozilla/rust/pull/11019">has
been fixed</a>. Some types which were
previously accessible may not be anymore, due to this.</li>
<li>The <code>pkgid</code> crate attribute <a href="https://github.com/mozilla/rust/pull/11041">has been
renamed</a> to <code>crate_id</code>.</li>
<li><code>extra::sort</code> <a href="https://github.com/mozilla/rust/pull/11064">has been
removed</a>, and there is now a
<code>sort</code> method on mutable slices (<code>&amp;mut [T]</code>).</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>The <code>remove</code> and <code>insert</code> methods on vectors have had some unsafe code added
to make them <a href="https://github.com/mozilla/rust/pull/11061">3x faster</a>.</li>
<li>The <code>sum</code> method on <code>extra::stat::Stat</code> <a href="https://github.com/mozilla/rust/pull/10927">has been made more
accurate</a>.</li>
<li>debuginfo for by-value <code>self</code> <a href="https://github.com/mozilla/rust/pull/11033">has been
fixed</a>.</li>
<li><code>return</code> is now <a href="https://github.com/mozilla/rust/pull/11024">allowed in
closures</a> for early return.</li>
<li><code>crate_id</code> (then <code>pkgid</code>) <a href="https://github.com/mozilla/rust/pull/10972">now
supports</a> specifying the crate
name. <code>#foo:1.0</code> as the fragment will make the crate name <code>foo</code>, for example
<code>gl</code> in <code>github.com/bjz/gl-rs#gl:1.0</code>.</li>
<li>A <code>Pod</code> kind <a href="https://github.com/mozilla/rust/pull/10924">has been added</a>
for types where a memcpy is a logical copy. This behaves very similarly to the
old <code>Copy</code> kind.</li>
<li>Stability attributes (<code>#[deprecated]</code>, <code>#[experimental]</code>, etc) <a href="https://github.com/mozilla/rust/pull/10990">are now
checked for method calls</a>.</li>
<li>Metadata reading has been made <a href="https://github.com/mozilla/rust/pull/11017">4x
faster</a>.</li>
<li>msys terminals are <a href="https://github.com/mozilla/rust/pull/11031">now
supported</a> by <code>extra::term</code>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Carter Tazio Schonwald</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-17">weekly
meeting</a>
discusses some pull requests, <code>pkgid</code>, renaming <code>extern mod</code>, the stdlib
module hierarchy, and renaming some of the vector methods.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>We landed 19 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Pradeep Kumar re-enabled parallel selector matching
<a href="https://github.com/mozilla/servo/pull/1429">#1429</a>.</li>
<li>Daniel Hedlund fixed window redraw on Linux
<a href="https://github.com/mozilla/servo/pull/1414">#1414</a>.</li>
<li>Tetsuharu Ohzeki significantly cleaned up the compositor source code in
<a href="https://github.com/mozilla/servo/pull/1425">#1425</a>.</li>
<li>Simon Sapin added support for non-UTF8 stylesheets
<a href="https://github.com/mozilla/servo/pull/1377">#1377</a>.</li>
<li>Patrick Walton cleaned up made several PRs that clean up layout&rsquo;s dependency
on DOM nodes.</li>
<li>Isabelle Carter added support for positioned offsets for layout in
<a href="https://github.com/mozilla/servo/pull/1407">#1407</a>.</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-16">meeting</a>, we
discussed using the Critic review tool from Opera with github. We are
currently experimenting it, with jgraham&rsquo;s support. Jack also discussed his
ongoing Rust upgrade which, as always, has uncovered several interesting Rust
compiler bugs.</p>

<p>We also sketched out our current planning
<a href="https://github.com/mozilla/servo/wiki/Roadmap">roadmap</a>, along with a cheat
sheet of some of the
<a href="https://github.com/mozilla/servo/wiki/Research">research</a> topics we&rsquo;re also
investigating.</p>

<h1>Announcements, etc</h1>

<ul>
<li>The SF meetup happened. It was recorded and <a href="https://air.mozilla.org/rust-meetup-december-2013/">is available on Air
Mozilla</a>. The video is
well worth watching.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1t87a3/a_broad_vision_for_the_rust_docs_stack/">A broad vision for the Rust docs
stack</a>.</li>
<li><a href="http://blog.ezyang.com/2013/12/two-bugs-in-the-borrow-checker-every-rust-developer-should-know-about/">Two bugs in the borrow checker every Rust developer should know
about</a>.</li>
<li><a href="http://metajack.im/2013/12/19/building-rust-code--using-make-part-2/">Building Rust Code &ndash; Using Make Part
2</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1tdw88/video_2d_portaling_demo_in_rust_rustsdl2/">Video: 2D portaling demo in Rust and
rust-sdl2</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1teet8/what_do_you_want_in_a_rust_book/">What do you want in a Rust
book?</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1tcat1/i_etched_myself_a_rust_logo/">An etched copper Rust
logo</a>.</li>
<li><a href="https://github.com/blackducksw/ohcount/pull/30">Ohcount Rust support</a> has
been merged, so hopefully ohloh will have more accurate information for Rust
projects soon.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/16/this-week-in-rust/"/>
    <updated>2013-12-16T16:14:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/16/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>! It&rsquo;s late this week
because bors was having some issues which bounced every pull request, and it&rsquo;s
no fun writing about nothing.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>61 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The first part of the <code>box</code> changes <a href="https://github.com/mozilla/rust/pull/10929">has
landed</a>. <code>box</code> is a keyword, and
in an expression is now synonymous with <code>~</code> (ie, it allocates an owned box).</li>
<li><code>std::vec::raw</code> <a href="https://github.com/mozilla/rust/pull/10984">has seen some
cleanup</a>.</li>
<li>Link meta attributes <a href="https://github.com/mozilla/rust/pull/10593">have been
replaced</a> with a <code>pkgid</code>.  rustdoc
<a href="https://github.com/mozilla/rust/pull/10948">also now requires</a> a <code>pkgid</code>
attribute, rather than the deprecated link meta.</li>
<li>Some fairly obscure import syntax <a href="https://github.com/mozilla/rust/pull/10808">has been
changed</a>. <code>use {foo, bar}</code> is now
permitted, and the old <code>use foo, bar</code> is not.</li>
<li><code>Cell</code> <a href="https://github.com/mozilla/rust/pull/10791">has been removed</a>.
<code>RefCell</code> supersedes it.</li>
<li>Attempting to implement private traits <a href="https://github.com/mozilla/rust/pull/10862">no longer
works</a>.</li>
<li>The coherence <code>-Z</code> flag <a href="https://github.com/mozilla/rust/pull/10909">has been
removed</a>.</li>
<li>The <code>self</code> lifetime <a href="https://github.com/mozilla/rust/pull/10897">is now
illegal</a>, like the rest of the
keywords. Now, lifetime parameters are truly only identifiers.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>A dead code warning <a href="https://github.com/mozilla/rust/pull/10477">has been
implemented</a>. This is pretty
awesome and will do things like warn for test functions that are accidentally
never marked <code>#[test]</code> and so are never called. Some bugs in it were
<a href="https://github.com/mozilla/rust/pull/10870">also</a>
<a href="https://github.com/mozilla/rust/pull/10994">fixed</a>.</li>
<li>The benchmark runner <a href="https://github.com/mozilla/rust/pull/10952">now
handles</a> slow benchmarks.
Previously, it wouldn&rsquo;t run a benchmark that took more than 1ms. Now, it will!</li>
<li>The <code>shootout-fasta</code> benchmark <a href="https://github.com/mozilla/rust/pull/10933">has been
rewritten</a>. It&rsquo;s about 10x faster,
and looks nicer.</li>
<li>Stepping through / breaking on function calls <a href="https://github.com/mozilla/rust/pull/10966">no longer goes through the
function prelude</a>.</li>
<li>The vector <code>move_iter</code> <a href="https://github.com/mozilla/rust/pull/10995">has been made
faster</a>.</li>
<li>A single <a href="https://github.com/mozilla/rust/pull/10918"><code>#[inline]</code></a>  has made
<code>vec::from_elem</code> 20x faster</li>
<li><code>Buffer</code> <a href="https://github.com/mozilla/rust/pull/10856">now has an iterator over its
lines</a>. The gotcha is that the
newlines are included in the yielded strings.</li>
<li>Struct pattern shorthand <a href="https://github.com/mozilla/rust/pull/10833">has been
improved</a> by allowing ref/mut,
like <code>let Foo { mut x, .. } = some_foo</code>, rather than the previous <code>let Foo {
x: mut x, .. } = some_foo</code>.</li>
<li>LTO (link time optimization) <a href="https://github.com/mozilla/rust/pull/10812">has been
implemented</a>.  Rejoice.</li>
<li>All landing pads (and thus unwinding!) <a href="https://github.com/mozilla/rust/pull/10916">can now be
omitted</a> when doing LTO.</li>
<li><code>std::io::util</code> <a href="https://github.com/mozilla/rust/pull/10895">has been added</a>
with:

<ul>
<li><code>LimitReader</code> that will only read <code>n</code> bytes from another reader</li>
<li><code>NullWriter</code> that ignores everything written to it</li>
<li><code>NullReader</code> that is always EOF</li>
<li><code>ZeroReader</code> which returns all zeroes,</li>
<li><code>MultiWriter</code> which will replicate a written buffer to many writers</li>
<li><code>ChainedReader</code> which reads readers in order to completion</li>
<li><code>TeeReader</code> which will write to a Writer while reading</li>
<li>a <code>copy</code> function which copies the full contents of a reader into a writer.</li>
</ul>
</li>
<li>Windows application manifests <a href="https://github.com/mozilla/rust/pull/10878">are now
embedded</a>, so we don&rsquo;t get
special cased.</li>
<li>A <code>--dep-info</code> flag <a href="https://github.com/mozilla/rust/pull/10698">has been
added</a> which is like <code>-MMD</code> to C
compilers.</li>
<li><code>&amp;mut</code> underneath <code>&amp;</code> can <a href="https://github.com/mozilla/rust/pull/10787">now be
frozen</a>.</li>
<li><code>PortReader</code> and <code>ChanWriter</code> <a href="https://github.com/mozilla/rust/pull/10823">have been
implemented</a>.</li>
<li>Some more random distributions <a href="https://github.com/mozilla/rust/pull/10859">have been
implemented</a>.</li>
<li>We <a href="https://github.com/mozilla/rust/pull/10874">now use</a> LLVM&rsquo;s integrated
assembler on Windows.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Cadence Marseille</li>
<li>Edward Z. Yang</li>
<li>Erik Price</li>
<li>Fabrice Desré</li>
<li>Jan Niklas Hasse</li>
<li>Richard Diamond</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-10">weekly
meeting</a>
discussed <code>enum mod</code>, using types to drive inference (rather than attributes
like <code>#[no_send]</code> etc), a formal grammar, unwinding, and some various PRs (all
mentioned above).</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>We landed 29 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton landed a number of changes to layout to avoid going back to
the DOM for properties to make layout&rsquo;s access to the DOM more opaque. He also
cleaned up a significant number of regressions and added a huge number of ref
tests.</li>
<li>Keegan McAllister made content tests work in headless mode in
<a href="https://github.com/mozilla/servo/pull/1382">#1382</a>.</li>
<li>Daniel Glazman added namespace info to elements in
<a href="https://github.com/mozilla/servo/pull/1358">#1358</a>.</li>
<li>Daniel Hedlund added support for leading font metrics on Linux
<a href="https://github.com/mozilla/servo/pull/1352">#1352</a>.</li>
</ul>


<h2>Meetings</h2>

<p>This week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-09">meeting</a> discussed
an upcoming Servo workweek in SF on January 20th. We also discussed the Rust
version update and some general team frustration at a large number of
regressions lately, primarily caused by the need to disable some of our
automated testing due to instability (particularly at shutdown). This week of
work saw many of those issues fixed.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/mozilla/rust/wiki/Doc-FAQ-Cheatsheet">FAQ Cheatsheet</a> &ndash;
A cookbook-style cheatsheet of how to do simple things, based on IRC FAQs.</li>
<li><a href="http://metajack.im/2013/12/11/building-rust-code--current-issues/">Building Rust Code &ndash; Current
Issues</a></li>
<li><a href="http://metajack.im/2013/12/12/building-rust-code--using-make/">Building Rust Code &ndash; Using
Make</a></li>
<li><a href="https://github.com/pirapira/kissdb-rust">A Rust port of kissdb</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1syapv/implement_the_new_box_syntax_for_unique_pointers/">Reddit
discussion</a>
of the <code>box</code> change.</li>
</ul>

]]></content>
  </entry>
  
</feed>
