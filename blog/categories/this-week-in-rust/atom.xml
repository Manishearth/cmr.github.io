<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: this-week-in-rust | Ramblin's]]></title>
  <link href="http://cmr.github.io/blog/categories/this-week-in-rust/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2013-06-22T09:02:06-04:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/06/22/this-week-in-rust/"/>
    <updated>2013-06-22T05:21:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/22/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the third issue of <em>This Week in Rust</em>, a weekly overview
of Rust and its community.</p>

<p>It has come to my attention that Github does not categorize some
merged-by-bors pull requests as &ldquo;merged&rdquo; and instead categorizes it as
&ldquo;closed&rdquo;. This skews the numbers and also the PRs that I looked through for
inclusion into twir. I&rsquo;ll no longer be including issue churn/PR numbers, and I
hope I didn&rsquo;t miss any import PRs in the last two issues.</p>

<!-- more -->


<h1>What&rsquo;s cooking in incoming?</h1>

<p>The last of the tree breakage has been cleaned up. The mysterious stack
corruption was traced down by Blei to occur in jemalloc. It has been disabled
until the real cause of the error is found. A bunch more buildbot
configurations have been turned on for auto, to fend off more breakage. The
tree is open, and aatch got out a new snapshot!</p>

<p>Most of the work this week is cleanup and preparation for 0.7, but since the
tree has been closed (and the extra auto buildbots lengthen the time it takes
for a PR to be tested for the day it has been open), not much has landed these
past few days, but a bunch happened earlier this week.</p>

<h2>Notable additions, bugfixes, and cleanup</h2>

<ul>
<li>doener made compiles faster by emitting less useless copies and allocations
in <a href="https://github.com/mozilla/rust/pull/7259">7259</a></li>
<li>aatch landed <a href="https://github.com/mozilla/rust/pull/7124">part 1</a> and <a href="https://github.com/mozilla/rust/pull/7182">part
2</a> of his huge trans refactor
effort, which make trans faster and less terrible.</li>
<li>sully got <a href="https://github.com/mozilla/rust/pull/7203">default methods</a>
less broken</li>
<li>yichoi landed a <a href="https://github.com/mozilla/rust/pull/7128">bunch</a> of
Android fixes.</li>
<li>vadimcn has <a href="https://github.com/mozilla/rust/pull/7134">fixed debuginfo</a>,
which is super amazing. This makes it a lot easier for the GSoC student (mw)
to get started.</li>
<li>doener has <a href="https://github.com/mozilla/rust/pull/7186">fixed</a> some
pathological behavior in how codegen creates cleanup blocks. This makes the
IR better, reducing compile time, and also allowing better optimization,
reducing binary size.</li>
</ul>


<p><blockquote><p>They reduce compile times by about 10% in total.</p><footer><strong><a href="https://github.com/mozilla/rust/pull/7259">https://github.com/mozilla/rust/pull/7259</a></strong></footer></blockquote></p>

<p><blockquote><p>Reduces the size of librustc by about 5% and the time required to build<br/>it by about 10%.</p><footer><strong><a href="https://github.com/mozilla/rust/pull/7186">https://github.com/mozilla/rust/pull/7186</a></strong></footer></blockquote></p>

<p><blockquote><p>The resulting code for rustc is about 13% faster (measured up to and<br/>including the &ldquo;trans&rdquo; pass) and the resulting librustc is about 5%<br/>smaller.</p><footer><strong><a href="https://github.com/mozilla/rust/pull/7154">https://github.com/mozilla/rust/pull/7154</a></strong></footer></blockquote></p>

<h2>Breaking changes</h2>

<p>strcat <a href="https://github.com/mozilla/rust/pull/7263">continues</a>
<a href="https://github.com/mozilla/rust/pull/7162">work</a> with iterators. The changes
that landed are vector cleanups. Probably most importantly, the <code>each</code> and
<code>eachi</code> methods are being removed. The <code>eachi</code> removal landed but the <code>each</code>
one broke bors, so it&rsquo;s currently in limbo. The current replacement is:</p>

<p><code>
// each
for your_vec.iter().advance |element| {
  ...
}
// eachi
for your_vec.iter().enumerate().advance |(i, element)| {
  ...
}
</code></p>

<p>Once the rest of the iterator work is hashed out and lands, it will just be</p>

<p><code>
// each
for your_vec |element| {
  ...
}
// eachi
for your_vec.enumerate() |(i, element)| {
  ...
}
</code></p>

<p>although the syntax might be slightly different (<code>for element in your_vec</code> is
my favorite proposal).</p>

<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-18">Tuesday
meeting&rsquo;s</a>
main topics were once fn&rsquo;s and how namespaces work. For once fn&rsquo;s, graydon
says &ldquo;I&rsquo;m concerned with adding new features and I want to see if we can live
without it, I understand it is common,&rdquo; not yet making a decision to include
them in the language.</p>

<h1>Meetups</h1>

<ul>
<li>tjc&rsquo;s pre-talk and talk, &ldquo;Rust: A Friendly Introduction&rdquo; went very well. The
<a href="http://catamorphism.org/Writing/Rust-Tutorial-tjc.pdf">slides</a> are up, and
a recording is coming soon (hopefuly). tjc says the slides aren&rsquo;t as
understanable without the audio of the talk.</li>
<li>nmatsakis has expressed willingness/interest in a Boston meetup sometime. If
you&rsquo;re interested, contact him on IRC or the ML.</li>
</ul>


<h1>Notable discourse and external projects</h1>

<ul>
<li><a href="http://maniagnosis.crsr.net/2013/06/mmap-and-rust-foreign-function-interface.html">mmap and the Rust FFI</a>
(indutny is working on mman bindings in libc, for the record. will mention
in next week&rsquo;s twir when it lands)</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004480.html">code generation and rustc speed</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1gs93k/rust_for_game_development/">Rust for game development?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1grj61/feed_us_some_low_hanging_fruit/">Feed us some low hanging fruit!</a></li>
<li><a href="http://aatch.github.io/blog/2013/06/19/paying-technical-debt-in-rustc/">Paying Technical Debt in rustc</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1gpbcs/what_issues_in_rust_today_effect_you_most/">What issues in Rust today effect (sic) you most?</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004520.html">rustdoc rewrite and redesign</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1gmac5/linux_rustbench_a_tool_for_profiling_memory_usage/">rust-bench: a tool for profiling memory usage</a></li>
</ul>


<h1>Other announcements</h1>

<ul>
<li>Michael Woerister (mw), the GSoC student working on debug info, has begun
work. His project log is at <a href="http://michaelwoerister.github.io/,">http://michaelwoerister.github.io/,</a> and will be
updated weekly. I&rsquo;m looking forward to a much better debug experience.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week In Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/06/15/this-week-in-rust/"/>
    <updated>2013-06-15T22:00:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the second issue of <em>This Week In Rust</em>, a weekly overview
of Rust and its community. I&rsquo;ll be covering what&rsquo;s cooking in incoming,
meeting summaries, meetups, and anything else pertinent.</p>

<p>I&rsquo;ve decided to stop using real names and use irc/github names, simply because
that is how I, and most everyone, interacts in the community.</p>

<!-- more -->


<h1>What&rsquo;s cooking in incoming?</h1>

<p>There&rsquo;s been a lot of breakage on incoming this week, with jemalloc breaking
32bit cross-compilation as well as random segfaults and stack corruption of
unknown cause.  Some heroics by the core devs have got it mostly cleaned up,
though the tree is still rather chaotic. Meanwhile a handful of performance
improvements have landed, and achricto rewrote <code>rusti</code>.</p>

<p>There were 17 pull requests merged this week. Total issue churn (excludes pull
requests) this week was +2 (this excludes the 38 pull requests that were
closed when incoming was killed).</p>

<h2><code>incoming</code> branch annihilated</h2>

<p>Goodbye <code>incoming</code>, hello <code>master</code>! This change, long in coming, unfortunately
closed all open PRs. Start doing your development against <code>master</code> rather than
incoming.</p>

<h2>Notable additions, bugfixes, and cleanups</h2>

<p>There&rsquo;s a concerted effort to remove duplicate freestanding functions where
possible.</p>

<ul>
<li>In <a href="https://github.com/mozilla/rust/pull/6986">6986</a> bjz and jensnockert have cleaned up the numeric code some
more, adding methods for existing things like <code>sin</code>, as well as adding a
bunch of interpolation stuff.</li>
<li>steven_is_false added prototype dynamic library loading support in
<a href="https://github.com/mozilla/rust/pull/7027">7027</a>, which should remove a lot of pain for people looking for
easy dynamic loading. It currently doesn&rsquo;t work on Windows, so if you can
sling Windows code, help would be appreciated!</li>
<li>In <a href="https://github.com/mozilla/rust/pull/7029">7029</a> luqmana allows having multiple impl&rsquo;s add static methods,
which previously did not work.</li>
<li>Eridius stepped up to <a href="https://github.com/mozilla/rust/pull/7133">fix the terminfo code</a>, colors should be
arriving to more people soon.</li>
<li>SiegeLord <a href="https://github.com/mozilla/rust/pull/7077">improved the CSS</a> used by rustdoc with <em>huge</em> improvements.</li>
<li>sully has gotten default methods working for the most part, he is still
testing cross-crate edge casses.</li>
<li>vadimcn <a href="https://github.com/mozilla/rust/pull/7134">has fixed debuginfo</a>, and supposedly the GSoC intern is
getting started on improving it next week.</li>
<li>doener has got <a href="https://github.com/mozilla/rust/pull/7154">some nice</a> <a href="https://github.com/mozilla/rust/pull/7144">performance</a> PRs in place.</li>
<li>aatch is working on <a href="https://github.com/mozilla/rust/pull/7124">cleaning up trans</a>. Huge thanks to him!</li>
</ul>


<h2>Breaking changes</h2>

<ul>
<li>dbaupp and strcat continue their cleanup of the standard library, removing
the ad-hoc iterator functions where <code>std::iterator</code> can replace them.</li>
<li>All of the string functions that could be reasonably converted to methods
have been.</li>
<li>If you&rsquo;re working in the stdlib, acrichto has toggled most of the lint
settings to &ldquo;deny&rdquo; for std/extra, so watch out.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-11">Tuesday meeting</a> talked about bblum&rsquo;s <a href="https://github.com/mozilla/rust/wiki/Proposal-for-effects">Effect proposal</a>,
removing the master/incoming split, and &ldquo;alloc expressions&rdquo;, a replacement for
@-sigils.</p>

<p>The consensus on the effect proposal is that it needs investigation and
wouldn&rsquo;t be landing in 1.0.</p>

<p>Discussion about master/incoming mostly centered on &ldquo;master isn&rsquo;t always
green, how can we add better coverage to bors' tests?&rdquo; Consensus seems to be
that removing incoming would be beneficial, but enabling more OS and valgrind
coverage on bors would harmfully impact development speed.</p>

<p>The proposed syntax for alloc expressions is <code>new (provider) expr</code>, with <code>new
expr</code> becoming the replacement for the current <code>~expr</code>. This would allow
custom smart pointers. pcwalton ended the meeting with a huge cliff hanger</p>

<p><blockquote><p>I&rsquo;ve been meaning to talk a little bit today about simplifying the<br/>mut-borrowing story in regards to this, we may be able to effect a large<br/>simplification on the language</p></blockquote></p>

<p>Personally, I think <a href="https://gist.github.com/Kimundi/5744578">kimundi&rsquo;s proposal</a> has a lot of promise, and the
syntax is more pleasing to me. It wasn&rsquo;t brought up at the meeting, though.</p>

<h1>Meetups</h1>

<ul>
<li>The Mountain View meetup was a great success. 18 showed up. erickt is
planning for another SF Bay area meetup in July. If you want to give a
presentation, send him your proposal and how long you need to put it
together.</li>
<li>Tim Chevalier will be giving a talk titled &ldquo;Rust: A Friendly Introduction&rdquo;
on Monday, June 17, 6-9pm in Portland. See <a href="http://calagator.org/events/1250464376">Calagator</a> for more
details. This is a preview of a talk he will be giving at <a href="http://opensourcebridge.org/sessions/970">Open Source
Bridge</a>, also in Portland.</li>
</ul>


<h1>Notable discourse</h1>

<ul>
<li>Still more discussion about <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004364.html">iterators</a>, this time focusing around
<a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004465.html">changing the semantics</a> of the <code>for</code> loop.</li>
<li>Some discussion about <a href="http://www.reddit.com/r/rust/comments/1gag3t/list_comprehensions_in_rust_iterator/">list comprehensions</a>, including initial
proofs-of-concept.</li>
<li>Graydon explains hashing and versioning
<a href="https://botbot.me/mozilla/rust/msg/3792753/">https://botbot.me/mozilla/rust/msg/3792753/</a></li>
<li>Principal author of 0install evaluates rust among other languages as a
python replacement
<a href="http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/">http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/</a></li>
<li>Niko thinks about parallelism
<a href="http://smallcultfollowing.com/babysteps/blog/2013/06/11/data-parallelism-in-rust/">http://smallcultfollowing.com/babysteps/blog/2013/06/11/data-parallelism-in-rust/</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/06/11/on-the-connection-between-memory-management-and-data-race-freedom/">http://smallcultfollowing.com/babysteps/blog/2013/06/11/on-the-connection-between-memory-management-and-data-race-freedom/</a></li>
</ul>


<h1>Other announcements</h1>

<ul>
<li>bjz tells me lmath is <em>actually</em> fixed now, and is usable</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week In Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/06/07/this-week-in-rust/"/>
    <updated>2013-06-07T18:46:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/07/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the first issue of <em>This Week In Rust</em>, a weekly overview
of Rust and its community. I&rsquo;ll be covering what&rsquo;s cooking in incoming,
meeting summaries, meetups, and anything else pertinent. Any ideas, email them
to me, <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#99;&#111;&#x72;&#101;&#121;&#x2b;&#x72;&#117;&#115;&#x74;&#x40;&#x6f;&#99;&#x74;&#97;&#121;&#110;&#46;&#x6e;&#101;&#x74;">&#x63;&#111;&#114;&#x65;&#121;&#x2b;&#114;&#117;&#115;&#x74;&#x40;&#111;&#99;&#x74;&#97;&#x79;&#110;&#46;&#x6e;&#x65;&#x74;</a>.</p>

<p>The Rust interns arrived this week and have got cracking right away. Big hello
to Aaron Todd, Ben Blum, and Michael Sullivan! We can look forward to work all
over the place, especially in the RT and debug-info.</p>

<!-- more -->


<h1>What&rsquo;s cooking in incoming?</h1>

<p>There were 30 pull requests merged this week. A scattering of doc fixes and a
bunch of code cleanups and optimization work as usual. Total issue churn
(excludes pull requests) this week was +6.</p>

<h2>Notable additions, bugfixes, and cleanups</h2>

<ul>
<li>Ben Striegel added the <code>as_c_str</code> string function as a method as part of the
overall methodization covered by <a href="https://github.com/mozilla/rust/issues/6045">6045</a>.</li>
<li>James Miller landed a much better optimization pipeline in <a href="https://github.com/mozilla/rust/pull/6881">6881</a>,
fixing a bunch of nascent optimization problems, especially with inlining,
and also fixing an earlier (huge) regression (that he introduced,
admittedly).</li>
<li>James also fixed <a href="https://github.com/mozilla/rust/issues/6977">6977</a>, which allowed nonsensical expressions like <code>[0,
..-1]</code>. Whoops!</li>
<li>I introduced terminfo handling to <code>extra::term</code> in <a href="https://github.com/mozilla/rust/pull/6826">6826</a>, bringing
rustc&rsquo;s beautiful colors to a wider audience.  Unfortunately, it isn&rsquo;t
complete yet and, most notably, does not handle <code>xterm-256color</code> correctly
yet.</li>
<li>Daniel Micay landed jemalloc as the default allocator in the runtime,
leading to nice allocation performance boosts on all platforms, as well as
much improved multithreaded performance. It also has the benefit of
cross-platform tuning and instrumentation.</li>
</ul>


<h2>Breaking changes</h2>

<p>It would be silly not to mention these changes, even though they weren&rsquo;t
strictly this week:</p>

<ul>
<li><code>libcore</code> was renamed to <code>libstd</code> and <code>libstd</code> was renamed to <code>libextra</code>, to
better reflect their purpose. Confusingly, the code in rustc still uses the
old names. Something to watch out for!</li>
<li>All of the module reexports were removed from the prelude, so if you use,
for example, <code>io::foo</code>, <code>vec::foo</code>, etc, you will find yourself having to
add a lot of extra imports. <code>use std::*</code> to regain the old behavior,
more or less.</li>
<li>Patrick fixed the unsafe checker to safe code can no longer call unsafe
methods.</li>
</ul>


<p>This week:</p>

<ul>
<li><code>pub impl</code> was removed by Patrick Walton as part of <a href="https://github.com/mozilla/rust/pull/6944">6944</a>. What
this did was have all <code>fn</code>s in a <code>pub impl</code> be <code>pub</code> by default. Now, you
must explicitly specify <code>pub</code> on all <code>fn</code>s in the impl if you want them
public.</li>
<li>Also in <a href="https://github.com/mozilla/rust/pull/6944">6944</a>, Patrick removed the ability to have multiple
patterns appear in &ldquo;let&rdquo; declarations. For example: <code>let a = 4, b = 2;</code>
becomes <code>let (a, b) = (4, 2);</code></li>
<li>Daniel renamed the <code>Ptr</code> trait to <code>RawPtr</code> in <a href="https://github.com/mozilla/rust/pull/6913">6913</a></li>
<li>Daniel and Huon Wilson have been working on iterators a lot. In
<a href="https://github.com/mozilla/rust/pull/6999">6999</a>, they start removing the <code>vec::each_*</code> functions, as the new
iterator code in <code>std::iterator</code> is now mature enough for use.</li>
</ul>


<h1>Meetings</h1>

<p>There were two main meetings this week. Mostly discussion about DST, closures,
and the GC. Lots of issues and details remain to be worked out, I suspoect it
will still be a bit before anything final-looking comes up in a PR. See the
<a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-04">meeting</a> <a href="https://github.com/mozilla/rust/wiki/Meeting-2013-06-07">notes</a> for more details.</p>

<h1>Meetups</h1>

<ul>
<li>Erick Tryzelaar has a meetup planned in Mountain View on Wednesday, June 12,
at 7pm. See the <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004356.html">ML thread</a> for more details.</li>
<li>Tim Chevalier will be giving a talk titled &ldquo;Rust: A Friendly Introduction&rdquo;
on Monday, June 17, 6-9pm in Portland. See <a href="http://calagator.org/events/1250464376">Calagator</a> for more details.</li>
</ul>


<h1>Prominent blog posts and ML threads</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004364.html">https://mail.mozilla.org/pipermail/rust-dev/2013-June/004364.html</a></li>
<li><a href="http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures/">http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures/</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/">http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/">http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/</a></li>
<li><a href="http://pcwalton.github.io/blog/2013/06/02/removing-garbage-collection-from-the-rust-language/">http://pcwalton.github.io/blog/2013/06/02/removing-garbage-collection-from-the-rust-language/</a></li>
</ul>


<h1>Other announcements</h1>

<ul>
<li>10gen has some interns working on a MongoDB driver for Rust, which will be
very nice to have. Good luck to them!</li>
<li>Brendan Zabarauskas has fixed <code>lmath</code>. It now works on incoming. Yay!</li>
</ul>


<p>Brendan sent in a correction:</p>

<p><blockquote><p>Unfortunately whilst it builds on incoming, due to a bug you can&rsquo;t use it in<br/>external crates. moonchrome and I am are working on fixing this but it will<br/>require us to remove the trait heirachy and use macros to generate each type<br/>(Vec3f, Vec3f32, &hellip; etc.) individually instead. Integer and Boolean vector<br/>types (present in GLSL) will also be removed.</p></blockquote></p>
]]></content>
  </entry>
  
</feed>
