<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: this-week-in-rust | Rust 'n Stuffs]]></title>
  <link href="http://cmr.github.io/blog/categories/this-week-in-rust/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2014-02-10T03:33:52-05:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/09/this-week-in-rust/"/>
    <updated>2014-02-09T22:15:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/09/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>There were a surprising number of breaking changes this week. The libextra
dissolution continues. Condition removal and the IO error overhaul also
landed. <code>rustpkg</code> was also removed, and rustc&rsquo;s CLI interface has changed.
Additionally, Rust gained another full-time developer! A big hello to Nick
Cameron, I look forward to seeing his work.</p>

<p>It was also <a href="http://octoverse.github.com/">discovered</a> that we closed the
second largest number of issues of any repository on GitHub! We trailed behind
homebrew, which is almost cheating, because they use it to track issues on
over five thousand packages. Good job everyone!</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>72 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Some intrinsics <a href="https://github.com/mozilla/rust/pull/12124">have been
moved</a> into <code>std::mem</code>, in
preparations of the intrinsics no longer being publically exposed.</li>
<li>A soundness regression <a href="https://github.com/mozilla/rust/pull/12117">has been
fixed</a>.</li>
<li><code>char</code> <a href="https://github.com/mozilla/rust/pull/12086">now has range asserts</a>.
This may cause invalid uses of <code>char</code> (using invalid values) to break.</li>
<li>The various traits in <code>std::fmt</code> <a href="https://github.com/mozilla/rust/pull/12066">now use
<code>&amp;self</code></a>, rather than a separate
parameter with an argument of type <code>&amp;Self</code>.</li>
<li><code>@self</code> and <code>@Trait</code> (managed trait objects) <a href="https://github.com/mozilla/rust/pull/12030">have been
removed</a>.</li>
<li><code>rustpkg</code> <a href="https://github.com/mozilla/rust/pull/11987">has been removed</a>.</li>
<li><code>std::fmt::Default</code> <a href="https://github.com/mozilla/rust/pull/11948">has been
renamed</a> to <code>Show</code>.</li>
<li>IO errors <a href="https://github.com/mozilla/rust/pull/11946">have been completely
overhauled</a>, and no longer use
conditions. Alex wrote <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-February/008505.html">an
email</a>
to the mailing list summarizing the changes. Especially take note of the
<code>if_ok!</code> macro.</li>
<li>Conditions <a href="https://github.com/mozilla/rust/pull/12039">have been removed
entirely</a>. A detailed post-mortem
is available on the pull request.</li>
<li><code>rustc</code> has seen some work on its interface. The output flags <a href="https://github.com/mozilla/rust/pull/12020">have been
unified</a>, replacing <code>-c</code>,
<code>--emit-llvm</code>, <code>-S</code>, <code>--dylib</code>, <code>--rlib</code>, etc with two arguments: <code>--emit</code> and
<code>--crate-type</code>. There is <a href="https://github.com/mozilla/rust/pull/12084">another PR in the
queue</a> that replaces a bunch of
miscellaneous flags behind <code>-C</code>. It will likely land shortly, and is something
to be aware of.</li>
<li><code>NonCopyable</code> <a href="https://github.com/mozilla/rust/pull/12016">has been renamed</a>
to <code>NoPod</code> to be consistent with the rest of the &ldquo;marker types&rdquo;.</li>
<li><code>reserve</code> naming <a href="https://github.com/mozilla/rust/pull/11951">has been shuffled around
slightly</a>. <code>reserve</code> becomes
<code>reserve_exact</code> and <code>reserve_at_least</code> becomes <code>reserve</code>.</li>
<li><code>SendStr</code> <a href="https://github.com/mozilla/rust/pull/12098">has been removed</a> in
favor of a <code>MaybeOwned</code> type.</li>
</ul>


<p>As part of the libextra dissolution, the following crates have been
introduced:</p>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/12010"><code>libcollections</code></a>, which has
inherited <code>Bitv</code>, <code>BTree</code>, <code>Deque</code>, <code>DList</code>, <code>List</code>, <code>LruCache</code>,
<code>PriorityQueue</code>, <code>RingBuf</code>, <code>SmallIntMap</code>, <code>TreeMap</code>, and <code>TreeSet</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/12007"><code>libgetopts</code></a>, which has
inherited <code>extra::getopts</code>. Additionally, <code>getopts::groups</code> is now the <em>only</em>
interface. It has been moved up a level, into just <code>getopts</code>, and the old
functions have been removed.</li>
<li><a href="https://github.com/mozilla/rust/pull/11984"><code>libserialize</code></a>, which has
inherited <code>extra::serialize</code> and <code>extra::ebml</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/11912"><code>libuuid</code></a>, which has inherited
<code>extra::uuid</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/12012"><code>libsemver</code></a>, which has
inherited <code>extra::semver</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/11945"><code>libterm</code></a>, which has inherited
<code>extra::term</code> and <code>extra::terminfo</code>.</li>
</ul>


<p>All crates are still documented, and there is a list with links at
<a href="http://static.rust-lang.org/doc/master/index.html">http://static.rust-lang.org/doc/master/index.html</a>.</p>

<h2>Other Changes</h2>

<ul>
<li>A <code>black_box</code> function <a href="https://github.com/mozilla/rust/pull/12105">has been added to
<code>extra::test</code></a>, and the <code>iter</code>
method on BenchHarness can now return values. As
<a href="https://github.com/mozilla/rust/pull/12119">documented</a>, these exist to make
sure that LLVM will not optimize out benchmarks.</li>
<li>A <code>fourcc!</code> syntax extension <a href="https://github.com/mozilla/rust/pull/12034">has been
added</a>.</li>
<li>A <code>unimplemented!</code> macro <a href="https://github.com/mozilla/rust/pull/12090">has been
added</a>, used much the same as
<code>unreachable!()</code>.</li>
<li>The runtime libraries <a href="https://github.com/mozilla/rust/pull/12073">have gained
examples</a>, and libgreen now has an
explanation of how it is structured at a high level, specifically where
concurrency and parallelism come from.</li>
<li>A <code>from_utf8_lossy</code> function <a href="https://github.com/mozilla/rust/pull/12062">has been
added</a> that replaces invalid
codepoints with the unicode replacement character (�).</li>
<li>Network streams <a href="https://github.com/mozilla/rust/pull/11894">are now
cloneable</a>. This allows for
multiple tasks reading/writing a <code>TcpStream</code>.</li>
<li>A copy-on-write Arc container <a href="https://github.com/mozilla/rust/pull/11230">has been added to
libextra</a>, though it&rsquo;s now in
<code>libcontainers</code>.</li>
<li>SIMD types <a href="https://github.com/mozilla/rust/pull/11717">are now allowed in
generics</a>.</li>
<li>A new mutex type that plays well with the various runtimes <a href="https://github.com/mozilla/rust/pull/11866">has been
implemented</a>. It is in the same
ballpark as native, pthread mutexes.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Arcterus</li>
<li>Cole Mickens</li>
<li>Colin Sherratt</li>
<li>HeroesGrave</li>
<li>Ivan Enderlin</li>
<li>James Deng</li>
<li>João Souls</li>
<li>Marek Šuppa</li>
<li>Q.P.Liu</li>
<li>Yuri Kunde Schlesner</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-04">weekly
meeting</a>
discussed adding a <code>libprim</code>, operator overloading, and the 1.0 goals for
LLVM.</p>

<h1>Meetups</h1>

<ul>
<li>There will be a meetup <a href="http://www.eventbrite.fr/e/billets-rust-paris-meetup-10528169037">in
Paris</a>, on
February 25, from 18:30 to 23:30.</li>
<li><a href="http://www.meetup.com/Rust-Bay-Area/events/156288462/">Bay Area Rust</a> will
be meeting February 25, at 19:00 in San Francisco. David Renshaw will be
talking about Cap' Proto, Steven Fackler will be talking about exportable
macros, and Kevin Cantu about testing.</li>
</ul>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary
test cases for the Rust language.</p>

<p>This week, we landed 14 PRs, but there are a substantial number of very
close pending PRs that add major layout features to Servo (e.g., lists
markers, tables, initial pseudo-class and pseudo-element support).</p>

<h2>Notable additions</h2>

<ul>
<li>Bruno Abinader continued with his great DOM additions in
<a href="https://github.com/mozilla/servo/pull/1634">#1634</a> and
<a href="https://github.com/mozilla/servo/pull/1622">#1622</a> and
<a href="https://github.com/mozilla/servo/pull/1604">#1604</a></li>
<li>Patrick Kim fixed borders on inline boxes in
<a href="https://github.com/mozilla/servo/pull/1577">#1577</a> and landed
<code>position:relative</code> support in
<a href="https://github.com/mozilla/servo/pull/1613">#1613</a></li>
<li>Patrick Walton further improved layout performance in
<a href="https://github.com/mozilla/servo/pull/1630">#1630</a> and
<a href="https://github.com/mozilla/servo/pull/1615">#1615</a></li>
<li>Adrian Bustany fixed <code>insertBefore</code> in
<a href="https://github.com/mozilla/servo/pull/1621">#1621</a></li>
<li>Lars Bergstrom landed reftest stabilization fixes in
<a href="https://github.com/mozilla/servo/pull/1623">#1623</a> &ndash; we are almost ready to
gate landing commits on content and ref tests passing on Linux, once we get
more fonts <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=3D968375">installed</a>
on our Linux buildbots</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Adrien Bustany (abustany)</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-03">meeting</a>, we mainly
discussed display list construction with respect to layering and stacking
contexts.</p>

<p>Josh Matthews' talk on Servo at FOSDEM is available
<a href="http://mirrors.dotsrc.org/fosdem/2014/UD2218A/Saturday/Servo_buildi%0Ang_a_parallel_web_browser.webm">here</a>.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1wvxcn/lazily_initialized_statics/">Lazily initialized
statics</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1wypbz/rust_gains_a_new_fulltime_developer_nick_cameron/">Rust gains a new full-time developer, Nick
Cameron</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1wz7ws/handling_io_errors/">Handling I/O
Errors</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x0zeu/adler32_and_crc32/">Pure-Rust Adler32 and
CRC32</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x1tvo/closures_and_the_borrow_checker/">Closures and the borrow
checker</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x3ooy/lzw_compression_algorithm/">Pure-Rust LZW Compression
Algorithm</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x67wq/rust_by_example_default_arguments_named_params/">Rust by Example: Default arguments,
etc</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xaum0/standalone_rust_app/">Standalone rust
app</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xfjo7/ide_support/">IDE support?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xdlou/playing_with_the_new_rust_io_error_handling/">Playing with the new Rust I/O error
handling</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xdudv/another_failed_attempt_at_parser_combinators/">Another failed attempt at parser
combinators</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xck76/a_case_for_reflection_in_rust/">A case for reflection in
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xa8uy/a_persistent_map_implementation_like_in_clojure/">A persistent map implementation, like in Clojure and Scala, with
performance
numbers</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/01/this-week-in-rust/"/>
    <updated>2014-02-01T18:45:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/01/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This was a good week, with default type parameters, <code>do</code> removal, <code>@[]</code>
removal, and some code bloat reduction.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>61 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>do</code> <a href="https://github.com/mozilla/rust/pull/11868">has been removed</a>. Replace
<code>do spawn { ... }</code> with <code>spawn(proc() { ... })</code>.</li>
<li><code>libextra</code> <a href="https://github.com/mozilla/rust/pull/11787">has exploded</a>. <a href="https://github.com/mozilla/rust/pull/11867">It
exploded some more</a>. It will
continue to explode until it no longer exists.</li>
<li><code>#[simd]</code> <a href="https://github.com/mozilla/rust/pull/11738">has been feature
gated</a>.</li>
<li>We <a href="https://github.com/mozilla/rust/pull/11706">now generate static
libraries</a> by default, rather than
dynamic libraries.</li>
<li><code>@[]</code> and <code>@str</code> <a href="https://github.com/mozilla/rust/pull/11974">have been removed from the
language</a>. All that is left is
<code>@T</code>!</li>
<li>Various methods on vectors <a href="https://github.com/mozilla/rust/pull/11944">now return
Options</a>, to be in line with the
rest of everything else.</li>
<li><code>next_power_of_two_opt</code> <a href="https://github.com/mozilla/rust/pull/11930">has been renamed
to</a> <code>checked_next_power_of_two</code>.
Additionally, the various functions for division in <code>std::uint</code> were removed.</li>
<li><code>#[no_send]</code> etc <a href="https://github.com/mozilla/rust/pull/11768">have been removed in favor of marker
types</a>. Additionally, variance of
types and lifetimes can explicitly be annotated with these marker types. They
are zero-sized and have no runtime impact.</li>
<li><code>std::borrow</code> <a href="https://github.com/mozilla/rust/pull/11895">has been
removed</a>.</li>
<li><code>Times</code> <a href="https://github.com/mozilla/rust/pull/11672">has finally been
removed</a>. Good riddance.</li>
<li>The various <code>CopyableVector</code>-like types have <a href="https://github.com/mozilla/rust/pull/11893">been
renamed</a> to
<code>CloneableVector</code> etc.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>There are now lints for <a href="https://github.com/mozilla/rust/pull/11754">unused
values</a>. Types annotated with
<code>#[must_use]</code> will now warn when (surprise) their results are not used.</li>
<li>debuginfo <a href="https://github.com/mozilla/rust/pull/11864">should now be fixed on OS
X</a>, due to us now explicitly
setting the DWARF version.</li>
<li><code>fp-elim</code> <a href="https://github.com/mozilla/rust/pull/11879">has been re-disabled, but only if debuginfo generation is
disabled</a>.</li>
<li>Errors from <code>#[deriving(...)]</code> have
<a href="https://github.com/mozilla/rust/pull/11826">seen</a> some
<a href="https://github.com/mozilla/rust/pull/11834">work</a>.</li>
<li>The evil environment pointers <a href="https://github.com/mozilla/rust/pull/11595">has been removed from bare
functions</a>, as well as <code>self</code> now
being a mostly-normal argument, to the compiler. This was a huge effort (88
changed files with 1,436 additions and 2,138 deletions) by Eduard Burtescu,
and is awesome!</li>
<li>Also from Eduard is <a href="https://github.com/mozilla/rust/pull/11217">default type
parameters</a>! They are currently
behind a feature flag, but allow you to say, for example, <code>struct Foo&lt;T =
uint&gt;</code> and use <code>Foo</code> as a bare type.</li>
<li>The tydesc <a href="https://github.com/mozilla/rust/pull/11909">is used in less
places</a> to help fend off code
bloat.</li>
<li>The occasional infinite recursion in some recursive types <a href="https://github.com/mozilla/rust/pull/11839">has been
fixed</a>.</li>
<li>Take glue <a href="https://github.com/mozilla/rust/pull/11723">has been removed from
tydescs</a>, also to fend off code
bloat.</li>
<li><code>fail!()</code> <a href="https://github.com/mozilla/rust/pull/11841">also generates less code
now</a>, to fend off bloat. In
particular, <code>fn main() { fail!() }</code> now compiles 2-3x faster due to generating
less code.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>JeremyLetang</li>
<li>Johannes Muenzel</li>
<li>Keshav Kini</li>
<li>Michael Darakananda</li>
<li>Nathaniel Herman</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-28">weekly
meeting</a>
discussed default type parameters, the unused result lint, minor changes to
the attribute syntax, how to deal with I/O splitting, and the visit glue.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 32 PRs, significantly above our usual PR landing rate!</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton landed a huge number of PRs that significantly improved our
performance and parallelism
<a href="https://github.com/mozilla/servo/pull/1600">#1600</a>,
<a href="https://github.com/mozilla/servo/pull/1564">#1564</a>,
<a href="https://github.com/mozilla/servo/pull/1567">#1567</a>,
<a href="https://github.com/mozilla/servo/pull/1589">#1589</a>,
<a href="https://github.com/mozilla/servo/pull/1566">#1566</a>
<a href="https://github.com/mozilla/servo/pull/1574">#1574</a>,
<a href="https://github.com/mozilla/servo/pull/1571">#1571</a>,
<a href="https://github.com/mozilla/servo/pull/1559">#1559</a>, etc.</li>
<li>Rui (xiongmao86) fixed a linking issue in our Makefiles in
<a href="https://github.com/mozilla/servo/pull/1603">#1603</a>.</li>
<li>Isabelle Carter landed multiple display list support in
<a href="https://github.com/mozilla/servo/pull/1579">#1579</a>.</li>
<li>Lars Bergstrom finally re-enabled ref tests in
<a href="https://github.com/mozilla/servo/pull/1565">#1565</a> and started a quest to
improve test reliability in
<a href="https://github.com/mozilla/servo/pull/1597">#1597</a> and
<a href="https://github.com/mozilla/servo/pull/1570">#1570</a>.</li>
<li>Bruno Abinader pushed on more DOM features in
<a href="https://github.com/mozilla/servo/pull/1583">#1583</a> and
<a href="https://github.com/mozilla/servo/pull/1580">#1580</a>.</li>
<li>Clark Gaebel (wowus) enabled a limit on the number of redirects Servo
follows in <a href="https://github.com/mozilla/servo/pull/1562">#1562</a>.</li>
<li>Tetsuharu Ohzeki cleaned up Node&rsquo;s <code>remove</code> and <code>insert</code> members
<a href="https://github.com/mozilla/servo/pull/1582">#1582</a>.</li>
<li>Deokjin Kim implemented <code>whitespace:pre</code> in
<a href="https://github.com/mozilla/servo/pull/1547">#1547</a>.</li>
<li>Patrick Kim landed border support for inline flows in
<a href="https://github.com/mozilla/servo/pull/1546">#1546</a>.</li>
<li>Simon Sapin used his CSS wizardry to redo a performance tweak we made so
that it&rsquo;s actually spec-compliant in
<a href="https://github.com/mozilla/servo/pull/1560">#1560</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Clark Gaebel (wowus)</li>
<li>Rui (xiongmao86)</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-27">meeting</a>, we
discussed moving the build of fontconfig on Linux into Servo to avoid
situations where the system version is old and not threadsafe, what&rsquo;s blocking
the JSManaged conversion (which is required for our next Rust upgrade), and
the status of ref and content tests.</p>

<p>Josh Matthews is at FOSDEM this weekend, giving a
<a href="http://www.joshmatthews.net/fosdemservo/">talk</a> on Servo. Look for video on
air.mozilla.org shortly!</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1wqjsf/more_xxhash_benchmarks/">An xxHash implementation in
Rust</a>,
as well as some benchmarks comparing to gcc and clang.</li>
<li><a href="http://hydrocodedesign.com/2014/01/31/llvm-with-rust/">Using LLVM From Within
Rust</a></li>
<li><a href="http://vimeo.com/85253071">Felix&rsquo;s CodeMesh presentation</a></li>
<li><a href="https://docs.google.com/a/octayn.net/spreadsheet/ccc?key=0AlWBWplsaTZvdGdSdEVzZW1BeDA5dm0zM2FFeW0ySEE&amp;usp=drive_web#gid=0">A 1.0 roadmap
spreadsheet</a></li>
<li><a href="https://github.com/kballard/rust-lua">rust-lua</a>, safe bindings to Lua 5.1</li>
<li><a href="http://www.infoq.com/interviews/klock-rust?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row1#.Uupx3qddN-w.reddit">InfoQ interview with
Felix</a></li>
<li><a href="http://blog.safaribooksonline.com/2014/01/30/parameters-bounds-rust/">Parameters and Bounds in
Rust</a></li>
<li><a href="http://blog.safaribooksonline.com/2014/01/28/network-communication-serialization-rust/">Network Communication and Serialization in
Rust</a></li>
<li><a href="https://air.mozilla.org/rust-meetup-january-2014/">Recording of the Bay Area Rust January
meetup</a>, wherein Brian
talks about 1.0, Niko talks about DST, Kevin talks about rust-lua, and I talk
about evangelism.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008224.html">Deprecating
rustpkg</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/26/this-week-in-rust/"/>
    <updated>2014-01-26T19:00:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/26/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>74 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Struct fields <a href="https://github.com/mozilla/rust/pull/11777">now inherit the privacy of the struct
itself</a>.</li>
<li>A bug in instantiability checking (determining whether a value of a given
type could ever be constructed) <a href="https://github.com/mozilla/rust/pull/11661">has been
fixed</a>.</li>
<li><code>Zero</code> and <code>One</code> <a href="https://github.com/mozilla/rust/pull/11664">have been tightened
up</a>, and fewer types implement
them now.</li>
<li><a href="https://github.com/mozilla/rust/pull/11129">A lot of things have changed</a>
regarding functions that fail or return Options. Almost everything that used
to fail now returns an Option instead.</li>
<li>Many incorrect usages of types from <code>std::libc</code> <a href="https://github.com/mozilla/rust/pull/10943">now use Rust
types</a>. This might introduce an
extra <code>as</code> or few in code using these (relatively obscure) interfaces.</li>
<li><code>invert</code> on <code>DoubleEndedIterator</code> <a href="https://github.com/mozilla/rust/pull/11686">has been
renamed</a> to <code>rev</code>.</li>
<li>The numeric constants <a href="https://github.com/mozilla/rust/pull/11790">have been
uppercased</a>.</li>
<li>Some privacy in std and extra <a href="https://github.com/mozilla/rust/pull/11808">has been shuffled
around</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Most macros are <a href="https://github.com/mozilla/rust/pull/11774">no longer injected as a hard-coded
string</a> and in fact live in
libstd.</li>
<li>Using <code>-Z no-landing-pads</code> <a href="https://github.com/mozilla/rust/pull/11653">actually disables landing pad
generation</a>. It was accidentally
broken.</li>
<li>The FFI documentation <a href="https://github.com/mozilla/rust/pull/11486">now includes a section on
callbacks</a>.</li>
<li>A lint for unnecessary parens on control flow conditions etc <a href="https://github.com/mozilla/rust/pull/11663">has been
added</a>.</li>
<li>Support for ARM&rsquo;s thumb instructions <a href="https://github.com/mozilla/rust/pull/11700">has been
added</a>.</li>
<li>libnative <a href="https://github.com/mozilla/rust/pull/11294">now implements
timers</a>.</li>
<li>There is now <a href="https://github.com/mozilla/rust/pull/11611">exponential notation for float
formatting</a>.</li>
<li><code>Vec&lt;T&gt;</code> <a href="https://github.com/mozilla/rust/pull/11682">has been added</a>, which
is intended to eventually replace <code>~[T]</code>.</li>
<li>Borrow checker errors <a href="https://github.com/mozilla/rust/pull/11718">now have better
spans</a> and should be more
understandable.</li>
<li>It is now possible to <a href="https://github.com/mozilla/rust/pull/11744">opt out of using
rpaths</a>.</li>
<li>libnative <a href="https://github.com/mozilla/rust/pull/11732">now implements
<code>get_host_addresses</code></a>.</li>
<li>A new synchronization primitive, Barrier, <a href="https://github.com/mozilla/rust/pull/11725">has been
added</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Andre Arko</li>
<li>Aydin Kim</li>
<li>Ben Harris</li>
<li>Ben Noordhuis</li>
<li>Chris Wong</li>
<li>Daniel MacDougall</li>
<li>Hong Chulju</li>
<li>Jake Greenfield</li>
<li>Matthias Einwag</li>
<li>Philippe Delrieu</li>
<li>Salem Talha</li>
<li>Sean Chalmers</li>
<li>Trent Ogren</li>
<li>Virgile Andreani</li>
<li>comex</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-21">weekly
meeting</a>
discussed a bunch of open pull requests, but nothing too groudbreaking.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 19 PRs and had a Servo workweek in the Mozilla San
Francisco office from Tuesday through Friday (Monday was a US federal
holiday).</p>

<h2>Notable additions</h2>

<ul>
<li>Bruno Abinader implemented Document::createHTMLDocument in
<a href="https://github.com/mozilla/servo/pull/1523">#1523</a>.</li>
<li>Patrick Walton implemented parallel layout for two of our three layout
passes in <a href="https://github.com/mozilla/servo/pull/1493">#1493</a>.</li>
<li>Patrick Kim fixed computation of image box sizes in
<a href="https://github.com/mozilla/servo/pull/1520">#1520</a> and text-decoration in
<a href="https://github.com/mozilla/servo/pull/1506">#1506</a>.</li>
<li>Deokjin Kim landed the <code>white-space:pre</code> property in
<a href="https://github.com/mozilla/servo/pull/1507">#1507</a>.</li>
<li>Aydin Kim and Lars Bergstrom landed fixes for Servo on Android.</li>
<li>Teodor Szente fixed up a type signature in
<a href="https://github.com/mozilla/servo/pull/1541">#1541</a>.</li>
<li>Lars Bergstrom changed ref tests so that they now emit a PNG showing the
image-diff between the baseline and incorrect rendering in
<a href="https://github.com/mozilla/servo/pull/1544">#1544</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Teodor Szente</li>
</ul>


<h2>Meetings</h2>

<p>There was no separate Servo meeting, but during the workweek we discussed
details in our designs for
<a href="https://etherpad.mozilla.org/Servo-workweek-layers">layers</a>, <a href="https://etherpad.mozilla.org/Servo-workweek-generated-content">generated
content</a>,
<a href="https://etherpad.mozilla.org/Servo-workweek-tables">tables</a>,
<a href="https://etherpad.mozilla.org/Servo-workweek-pixels">HiDPI/pixels</a>, and
<a href="https://etherpad.mozilla.org/Servo-workweek-displaylist">DisplayList
creation</a>.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008214.html">Rust contribution
ideas</a></li>
<li><a href="https://github.com/SiegeLord/RustAlgebloat">RustAlgebloat</a>, a linear
algebra library</li>
<li><a href="http://glaebhoerl.tumblr.com/rust_closure_types">Table of Potential Closure
Types</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008088.html">rust-ci
updates</a>,
categorization and documentation uploading</li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/7848">Channel API
proposal</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/18/this-week-in-rust/"/>
    <updated>2014-01-18T20:21:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/18/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This was a big week. rvalue lifetimes and external syntax extensions landed,
as well as a bunch of codegen optimization.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>69 pull requests were merged this week. As of writing,
<a href="http://buildbot.rust-lang.org/bors/bors.html">bors</a> has 14 approved pull
requests waiting.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>std::num</code>&rsquo;s ongoing overhaul continues. It&rsquo;s going to be drastically
simplified, and not try to be a general-purpose numeric library.
<a href="https://github.com/bjz/num-rs">num-rs</a> is intended to provide some base
algebraic types. <a href="https://github.com/mozilla/rust/pull/11504">#11504</a> removes
gamma/bessel and does some cleanup of cmath.
<a href="https://github.com/mozilla/rust/pull/11548">#11548</a> merges Bitwise and
BitCount and removes Bounded and Bitwise from the prelude.
<a href="https://github.com/mozilla/rust/pull/11622">#11622</a> simplifies Primitive.</li>
<li>Destructuring <code>@</code> patterns are <a href="https://github.com/mozilla/rust/pull/11305">no longer
supported</a>.</li>
<li>The return type of <code>Chan::try_recv</code> has been extended to <a href="https://github.com/mozilla/rust/pull/11112">indicate why it
did not return a value</a>. That is,
whether there was legitimately no value, or if the other end had hung up.</li>
<li>Disk-relative paths on Windows <a href="https://github.com/mozilla/rust/pull/11579">are now properly
generated</a> when joining two paths.</li>
<li>FromBase64 and FromHex <a href="https://github.com/mozilla/rust/pull/11597">now use error
enums</a>.</li>
<li><code>std::io</code> <a href="https://github.com/mozilla/rust/pull/11598">has been shuffled around a
bit</a>.</li>
<li>(Almost?) all iterator types <a href="https://github.com/mozilla/rust/pull/11001">have been
renamed</a>.</li>
<li>unsafe functions can <a href="https://github.com/mozilla/rust/pull/11605">no longer be coerced to
closures</a>.</li>
<li>Unnecessary (useless) visibility modifiers on <code>use</code> and <code>extern mod</code> <a href="https://github.com/mozilla/rust/pull/11607">are
now forbidden</a>.</li>
<li>Building on last week&rsquo;s per-task stdout/stderr, <a href="https://github.com/mozilla/rust/pull/11620">rustc&rsquo;s error reporting has
been cleaned up significantly</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Externally loadable syntax extensions <a href="https://github.com/mozilla/rust/pull/11151">have
landed</a>! We can now write
syntax extensions outside of the compiler, and export macros.</li>
<li>The &ldquo;rvalue lifetime&rdquo; issue has seen some <a href="https://github.com/mozilla/rust/pull/11585">significant work put into
it</a>. Notably, <code>for x in [1, 2, 3,
4].iter() { .. }</code> should now work, among many other papercut annoyances with
rvalues.</li>
<li>Error messages involving inferred integer types <a href="https://github.com/mozilla/rust/pull/11513">are now much more
sane</a>. Rather than <code>&lt;V0&gt;</code> or
<code>&lt;VI1&gt;</code>, it now prints <code>&lt;generic integer #0&gt;</code> etc.</li>
<li>Accidentally including a semicolon on the last line of a function <a href="https://github.com/mozilla/rust/pull/11482">now has a
better error message</a>, if the
types line up.</li>
<li>Some bugs with trait object coercion <a href="https://github.com/mozilla/rust/pull/11525">have been
fixed</a>.</li>
<li>The runtime <a href="https://github.com/mozilla/rust/pull/11501">now has its own
documentation</a>, viewable
<a href="http://static.rust-lang.org/doc/master/guide-runtime.html">here</a>.</li>
<li>rustdoc&rsquo;s search is now <a href="https://github.com/mozilla/rust/pull/11438">more
forgiving</a> on the input it
accepts.</li>
<li>Inserting into tries has been optimized significantly, <a href="https://github.com/mozilla/rust/pull/11546">with no unsafe
code</a>. Its iterator has <a href="https://github.com/mozilla/rust/pull/11497">also been
optimized</a>, albeit with unsafe
code.</li>
<li><a href="https://github.com/mozilla/rust/pull/11535">The reference-counting headers have been
removed</a>. The associated
&ldquo;managed-unique&rdquo; concept <a href="https://github.com/mozilla/rust/pull/11565">has also been
removed</a>.</li>
<li>The recent OS X 10.9 breakage <a href="https://github.com/mozilla/rust/pull/11604">should be
fixed</a>, as we will no longer use
<code>ar s</code> on that platform.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Clinton Ryan</li>
<li>Derek Guenther</li>
<li>Lucy</li>
<li>Petter Remen</li>
<li>Shamir Khodzha</li>
<li>Yehuda Katz</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-14">weekly
meeting</a>
discussed associated function resolution, changes to our calling convention
(specifically the fate of the ubiquitous environment pointer), how we want to
handle feature freeze, static items with destructors, and documentation on
primitives.</p>

<h1>Quotes of the Week</h1>

<p><blockquote><p>who says you can&rsquo;t make money selling a compiler? You can, as long as you<br/>convince people it&rsquo;s a video game</p><footer><strong>tjc on the Rust-the-game/Rust-the-language confusion</strong></footer></blockquote></p>

<p><blockquote><p>who needs pure functional when you have pure cool?</p><footer><strong>eddyb</strong></footer></blockquote></p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary
test cases for the Rust language.</p>

<p>This week, we landed 22 PRs. There will be a Servo workweek in the
Mozilla San Francisco office next week, Tuesday through Friday.</p>

<h2>Notable additions</h2>

<ul>
<li>Jack Moffitt landed the huge Rust upgrade
<a href="https://github.com/mozilla/servo/pull/1473">#1473</a>, bringing us very close to
the 0.9 release. Hooray!</li>
<li>Lars Bergstrom got NVidia-on-Linux working in
<a href="https://github.com/mozilla/servo/pull/1487">#1487</a> and fixed the content test
reliability in <a href="https://github.com/mozilla/servo/pull/1500">#1500</a>.</li>
<li>Tetsuharu Ohzeki implemented <code>removeAttribute</code> on Element in
<a href="https://github.com/mozilla/servo/pull/1448">#1448</a>.</li>
<li>jgraham landed innerHTML support
<a href="https://github.com/mozilla/servo/pull/1450">#1450</a>.</li>
<li>Bruno Abinader implemented several fixes related to DOMImplementation:
<a href="https://github.com/mozilla/servo/pull/1497">#1497</a>,
<a href="https://github.com/mozilla/servo/pull/1488">#1488</a>.</li>
<li>Corey Richardson fixed up an error case in startup on Linux in
<a href="https://github.com/mozilla/servo/pull/1502">#1502</a>.</li>
<li>Isabelle Carter landed the initial work for handling <code>position:fixed</code> in
<a href="https://github.com/mozilla/servo/pull/1440">#1440</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Corey Richardson</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-13">meeting</a>, we
discussed the need to clean up our test harnesses, the removal of <code>@</code> in
support of the next Rust upgrade, and the workweek..</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/DaGenix/rust-crypto/pull/21">The first pure-Rust AES
implementation</a>. According to
enix in IRC, this is also the first bit slicing implementation in a high level
language (ie, not assembly or a port of assembly).</li>
<li><a href="https://github.com/nickdesaulniers/rust-re2">rust-re2</a>, re2 bindings</li>
<li><a href="http://words.steveklabnik.com/a-30-minute-introduction-to-rust">A 30 Minute Introduction to
Rust</a></li>
<li><a href="https://github.com/shilgapira/ObjCrust">ObjCrust</a>, building an iOS static
library with Rust.A</li>
<li><a href="http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/">The Periodic Table of Rust
Types</a></li>
<li><a href="https://github.com/dnaq/sodiumoxide">Sodium Oxide</a>, NaCl bindings, updated
to 0.9</li>
<li><a href="http://dwrensha.github.io/capnproto-rust/2014/01/15/benchmark-update.html">capnproto-rust benchmark
update</a></li>
<li><a href="https://github.com/sfackler/rust-phf">rust-phf</a>, compile-time hash maps. It
also serves as a demonstration of loadable syntax extensions!</li>
<li><a href="http://www.reddit.com/r/rust/comments/1v9rgp/rust_has_dowhile_loops/">Rust has do-while
loops</a>,
a dirty hack no one should use.</li>
<li><a href="http://paulkoerbitz.de/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">Understanding Pointers, Ownership, and Lifetimes in
Rust</a></li>
<li><a href="http://hydrocodedesign.com/2014/01/17/jit-just-in-time-compiler-rust/">A Just-in-time Compiler (Written) In
Rust</a></li>
<li><a href="https://github.com/alexcrichton/jba/tree/rust">jba</a>, a GameBoy emulator
written in Rust.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/11/this-week-in-rust/"/>
    <updated>2014-01-11T16:23:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/11/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>0.9 was released this week, bringing with it a restructuring of our
documentation and the usual influx of attention.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>57 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Float literals are now <a href="https://github.com/mozilla/rust/pull/11480">more
strict</a>. Octal and hex float
literals are no longer allowed.</li>
<li>A nasty soundness bug <a href="http://www.reddit.com/r/rust/comments/1uxbgm/moving_ownership_via_borrowed_reference/">reported on
reddit</a>
<a href="https://github.com/mozilla/rust/pull/11465">has been fixed</a>.</li>
<li><code>print</code> and <code>println</code> <a href="https://github.com/mozilla/rust/pull/11416">have been removed from the
prelude</a>. Use the <code>print!</code> and
<code>println!</code> macros instead.</li>
<li><code>Rc</code> <a href="https://github.com/mozilla/rust/pull/10926/files">now supports weak
pointers</a>, and it no longer
requires the wrapped type to be Freeze or Send. That is, it no longer
statically avoids cycles using the type system. It was found to be too
restrictive. The only constructor is now <code>Rc::new</code>.</li>
<li>The <code>eof</code> method on <code>Reader</code> <a href="https://github.com/mozilla/rust/pull/11376">has been
removed</a>, as only files really
know when they are at eof. It is now a method on the types it makes sense for
<a href="https://github.com/mozilla/rust/pull/11437">such as <code>MemReader</code> and
<code>BufReader</code></a>.</li>
<li><code>std::num</code> is seeing some simplification. <a href="https://github.com/mozilla/rust/pull/11412">Many traits have been merged into
<code>Real</code></a>.</li>
<li>Similarly, <a href="https://github.com/mozilla/rust/pull/11402"><code>ApproxEq</code> has been
removed</a>.</li>
<li>The <code>std::io::Decorator</code> trait <a href="https://github.com/mozilla/rust/pull/11394">has been
removed</a>.</li>
<li>A nasty resolve bug <a href="https://github.com/mozilla/rust/pull/11370">has been
fixed</a>. Importing a trait made it
available to all child modules; now it is only available in the module that
imported it, as it should be.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/10854">method renaming</a> has been
done to <code>Option</code>. <code>map_default</code> is now <code>map_or</code> and <code>mutate_default</code> is now
<code>mutate_or_set</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>A <a href="https://github.com/mozilla/rust/pull/11329">lint for unnecessary casts</a>
has been added. It is set to allow by default.</li>
<li><a href="https://github.com/mozilla/rust/pull/11342">Mutable iterators</a> have been
added to <code>std::trie</code>.</li>
<li>A bug in rustpkg preventing it from finding any static libraries, and
libnative, <a href="https://github.com/mozilla/rust/pull/11338">has been fixed</a>.</li>
<li><code>u64_from_be_bytes</code> <a href="https://github.com/mozilla/rust/pull/11448">has seen some
optimization</a>, it is 3-6x faster.</li>
<li><code>box</code> has been
<a href="https://github.com/mozilla/rust/pull/11055">kinda-implemented</a>. <code>box(GC)</code> and
<code>box(HEAP)</code> now work.</li>
<li>Typed arenas <a href="https://github.com/mozilla/rust/pull/11358">have been added</a>.
They&rsquo;re really fast!</li>
<li><code>stderr</code>/<code>stdout</code> is now
<a href="https://github.com/mozilla/rust/pull/11353">per-task</a>, which will allow
capturing or redirecting a task&rsquo;s output.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Andrew Chin</li>
<li>Clinton Ryan</li>
<li>Derek Chiang</li>
<li>Mick Koch</li>
<li>Nick Cameron</li>
<li>Niels langager Ellegaard</li>
<li>Nif Ward</li>
<li>Raphael Catolino</li>
<li>Rich Lane</li>
<li>Dzmitry Malyshau</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-07">weekly
meeting</a>
discussed Windows XP support, bounded channels, the Rc changes, using guard
pages, loadable syntax extensions, and functions that fail.</p>

<h1>Quotes of the Week</h1>

<p>&ldquo;[I] find it easy to get lost in this file.&rdquo; &ndash;
<a href="https://github.com/mozilla/rust/pull/11472/files#r8810362">kud1ing</a> on
<code>libc.rs</code>
&ndash; &ldquo;A language is more than just semantics, syntax, and an implementation &ndash;
it&rsquo;s about an ecosystem and a community. Without that it dies.&rdquo; &ndash;
<a href="https://botbot.me/mozilla/rust-internals/msg/9689869/">bjz</a></p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>The Servo tree has been mostly frozen for a large part of this week, as the
nearly month-long Rust upgrade is finally getting close and we wanted to avoid
additional rebases. We did land 7 PRs, many with associated fixes, however.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Kim fixed anonymous boxes and images disappearing during line
breaking in <a href="https://github.com/mozilla/servo/pull/1461">#1461</a> and
<a href="https://github.com/mozilla/servo/pull/1463">#1463</a>.</li>
<li>Patrick Walton fixed a race issue with window sizes and script code in
<a href="https://github.com/mozilla/servo/pull/1409">#1409</a>.</li>
<li>Jaeman Park landed CSS parsing and selector matching for pseudo element
:before and :after in <a href="https://github.com/mozilla/servo/pull/1464">#1464</a>.</li>
<li>Bruno Abinder made some DOM additions in
<a href="https://github.com/mozilla/servo/pull/1466">#1466</a> and
<a href="https://github.com/mozilla/servo/pull/1472">#1472</a>.</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-06">meeting</a>, we
discussed the upcoming workweek, the Rust upgrade, ARM buildbots for Rust and
Servo, and some research we&rsquo;re doing into the breakdown of page load.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.meetup.com/Rust-Bay-Area/events/153909222/">Bay Area Rust Meetup:
1/28/2014</a></li>
<li><a href="http://www.youtube.com/watch?v=gfCtbGiHcg0">The Rust language: memory, ownership and
lifetimes</a>,
Niko&rsquo;s presentation at Linux.conf.au</li>
<li><a href="http://www.reddit.com/r/rust/comments/1uy7rt/an_appeal_for_correct_capable_futureproof_math_in/">An appeal for correct, capable, future-proof math in nascent programming
languages</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1v10ac/thehydroimpulserustwebsite/">An in-progress redesign of the
website</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1v104e/combining_rusthttp_with_routerecognizerrs_to/">Combining rust-http with route-recognizer.rs to create routable
HTTP</a></li>
<li><a href="https://github.com/mneumann/rust-toml">A TOML configuration file parser</a></li>
<li><a href="http://llvm.lyngvig.org/Articles/Mapping-High-Level-Constructs-to-LLVM-IR">Mapping High-Level Constructs to LLVM
IR</a>,
a peek at what drives the underbelly of the compiler</li>
<li><a href="https://github.com/mozilla/rust/pull/11399">Add garbage collector to
<code>std::gc</code></a></li>
<li><a href="https://github.com/HeroesGrave/rust-workspace">rust-workspace</a>, a simple
shell to make maintaining Rust projects easier</li>
<li><a href="http://www.reddit.com/r/rust/comments/1usupv/semantic_code_browser_for_rust/">Semantic code browser for
Rust</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/01/09/rvalue-lifetimes-in-rust/">Rvalue Lifetimes in
Rust</a></li>
<li><a href="http://steveklabnik.github.io/nobody_knows_rust/#/">Nobody Knows Rust &ndash; Steve Klabnik&rsquo;s slides</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007753.html">0.9 Release
Announcement</a></li>
<li><a href="https://github.com/cmr/rust-logo-3d/blob/master/rlogo.stl">A 3d-printable Rust
logo</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
