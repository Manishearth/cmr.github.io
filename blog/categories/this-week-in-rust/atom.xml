<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: this-week-in-rust | Ramblin's]]></title>
  <link href="http://cmr.github.io/blog/categories/this-week-in-rust/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2013-08-19T01:48:52-04:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/08/19/this-week-in-rust/"/>
    <updated>2013-08-19T00:33:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/08/19/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the 11th edition of <code>This Week in Rust</code>! I&rsquo;m starting uni
this week, so if you notice I&rsquo;m not quite as omnipresent and omniprescient as
usual, that&rsquo;d be why. <strong>Please</strong> <a href="corey@octayn.net">send me an email</a> if you
would like your pull request, project, or blog post mentioned. I would hate to
overlook something cool or important.</p>

<!-- more -->


<p>The Mozilla Intern talks happened this past week or so. The ones I know about
relating to Rust are:</p>

<ul>
<li><a href="https://air.mozilla.org/intern-presentation-sullivan/">Default Methods in Rust
(sully)</a></li>
<li><a href="https://air.mozilla.org/ben-blum-from-the-research-team-presents-types-of-types-in-rust/">Types of Types in Rust
(bblum)</a></li>
<li><a href="https://air.mozilla.org/2013-intern-todd/">A Work-stealing Runtime for Rust
(toddaaro)</a></li>
<li><a href="https://air.mozilla.org/eston-schweickart-from-the-research-team-presents-a-forest-of-quadtrees-the-graphics-of-servo/">A Forest of QUadtrees: The Graphics of
Servo</a></li>
<li><a href="https://air.mozilla.org/2013-intern-presentations-august-13/">Layout in Servo: Parallel and Rustic Tree Traversals
(eatkinson)</a></li>
<li><a href="https://air.mozilla.org/2013-intern-kuehn/">Architecting Servo: Pipelines and Parallelism
(tikue)</a></li>
</ul>


<p>Congratulations to them all. The interns did a ton of great work over the
summer.</p>

<h1>What&rsquo;s cooking on master?</h1>

<p>There were only 46 PRs merged this week. I don&rsquo;t quite know why that number is
so low this week. It certainly wasn&rsquo;t for lack of PRs: the queue has been
constantly backlogged. Issue churn was -26, yay!</p>

<h2>Breaking Changes</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8526">Some functions in Result and Either were replaced to work with external
iterators</a></li>
<li><a href="https://github.com/mozilla/rust/pull/8423">The <code>priv</code> and <code>pub</code> visibility modifiers are now forbidden on contexts
where they have no meaning.</a>. For
example, marking a struct field <code>pub</code>, or a module <code>priv</code>. The compiler
errors for this are quite informative, and the conversion is purely
mechanical.</li>
</ul>


<h2>Library improvments, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8446"><code>ifmt!</code>, the new formatter, has been
finished</a>. Yay!</li>
<li><a href="https://github.com/mozilla/rust/pull/8453"><code>extra::stats::write_boxplot</code> now works with negative or zero sample
values</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8452">Some missing pieces in libstd have been filled
in</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8491">A <code>sample</code> method has been added to <code>RngUtil</code>, for resevior
sampling</a>.</li>
</ul>


<h2>Compiler improvements, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8527">A ton of work was done on a new
visitor</a>. This is the first of a
series of five.</li>
<li><a href="https://github.com/mozilla/rust/pull/8483">Vector repeat exprs (<code>[0, ..16]</code>) are now allowed in
statics</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8477">A hint has been added for incorrect use of static
methods</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8497">Trait object coercion to <code>&amp;Trait</code> has been fixed to handle freezing and
reborrowing more correctly</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8329">Debuginfo of lexical scopes and variable shadowing has been massively
improved</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8410">A <code>--target-cpu</code> flag has been added to select the target CPU, rather than
always using &ldquo;generic&rdquo;</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8455">Support for owned and borrowed trait objects has been made better
added</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8421">An <code>address_insignificant</code> attribute has been
added</a>. LLVM will do merging of
statics marked with that attribute.</li>
<li><a href="https://github.com/mozilla/rust/pull/8408">Intrinsics for checked overflow on add, sub, and mul have been
added</a>.</li>
</ul>


<h2>Tools, documentation, etc</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8469">The tutorial was translated into
Japanese</a>. I think this is the
first translation of anything, so it&rsquo;s a pretty big milestone I think.</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-08-13">Tuesday
meeting</a>
discussed turning jemalloc back on, default arguments, and method invocation
ordering. It also discussed the new IO code and stage0 stdtest.</p>

<h1>Notable discourse</h1>

<ul>
<li><a href="http://bluishcoder.co.nz/2013/08/15/phantom_types_in_rust.html">Phantom Types in
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1k6hua/rustdev_rfc_runtimeless_libstd/">RFC: Runtimeless
libstd</a></li>
</ul>


<h1>External projects</h1>

<ul>
<li><a href="https://github.com/erickt/rust-elasticsearch">Bindings to elasticsearch</a></li>
<li><a href="https://github.com/erickt/rust-zmq">zeromq bindings have been updated</a></li>
<li><a href="https://github.com/huonw/spellck">A spellchecker for Rust code, written in Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1kd8ah/rustencoding_character_encoding_support_for_rust/">rust-encoding: character encoding support for
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1kctjn/my_first_rust_program_vocabulary_trainer/">A simple vocabulary
trainer</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1k7mfn/rustdev_rustdoc_ng_95_done/"><code>rustdoc_ng</code>: 95%
done</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1k5kqx/some_pages_in_servo_as_of_20130810/">Some pages as rendered by
Servo</a></li>
<li><a href="https://github.com/jfager/d3cap">d3cap: a libpcap-based network activity
visualizer</a></li>
<li><a href="https://github.com/sfackler/rust-postgres">postgres bindings</a></li>
<li><a href="https://gist.github.com/luqmana/6264106">RemoteJoy: a program for remotely viewing the screen of your PlayStation
Portable</a>.
(<a href="http://i.imgur.com/9Kda25J.jpg">screnshot</a>)</li>
<li><a href="https://github.com/bjz/gl-rs">The new OpenGL loader is working, pending the function pointer
fix</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/08/10/this-week-in-rust/"/>
    <updated>2013-08-10T21:39:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/08/10/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the tenth issue of <em>This Week in Rust</em>. This week marks
the enabling of the new runtime written entirely in Rust. A lot happens every
week, so I&rsquo;m going to start omitting PRs that I deem of lesser importance.
This process is entirely arbitrary, don&rsquo;t feel hurt if I exclude your PR :).</p>

<!-- more -->


<h1>What&rsquo;s cooking on <code>master</code>?</h1>

<p>Issue churn was -12 this week. A total of 70 PRs were merged.</p>

<p><a href="https://github.com/mozilla/rust/pull/8358">The new runtime has been enabled by
default</a>. This is the culmination
of a lot of work by brson and the rt interns (toddaaro, bblum, and ecr being
the ones I know of). It&rsquo;s written entirely in Rust, and lives in <code>std::rt</code>.
Additionally, the <a href="https://github.com/mozilla/rust/pull/8387">old C++ runtime has been
removed</a>.</p>

<h2>Breaking Changes</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8296"><strong>Trailing nulls have been removed from all string
types.</strong></a>. This will break your
FFI code in subtle and mysterious ways, if you didn&rsquo;t explicitly use the
<code>as_c_str</code> methods. FFI code using the new <code>str::c_str</code> code will be more
robust, as it forbids interior nulls, and ensures that a trailing null
always exists. The replacement for <code>str.as_c_str</code> is
<code>str.to_c_str().as_slice()</code>, from what I can tell.</li>
<li><a href="https://github.com/cmr/rust/commit/e99eff172a11816f335153147dd0800fc4877bee">The <code>priv</code> keyword is no longer allowed where it has no
meaning</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8265"><code>iter</code> and <code>iter_err</code> in Result have been replaced with external
iterators</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8288">The <code>get</code> method of <code>Option</code>, <code>Either</code>, and <code>Result</code> has been removed in
favor of <code>unwrap</code></a>. They both did
the same thing, which was useless duplication.</li>
<li><a href="https://github.com/mozilla/rust/pull/8218"><code>std::gc</code> and <code>std::stackwalk</code></a>
have been removed, as they are obsolete with the new runtime.</li>
<li><a href="https://github.com/mozilla/rust/pull/8264">The transitionary <code>foreach</code> has been
removed</a>.</li>
</ul>


<h2>Notable library additions, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8357">Some redundant <code>Ord</code> methods were removed from
impls</a> where the default methods
sufficed.</li>
<li><a href="https://github.com/mozilla/rust/pull/8336">FromStr for IpAddr and
SocketAddr</a> is implemented.</li>
<li><a href="https://github.com/mozilla/rust/pull/8356">Work steealing is implemented for the newrt
scheduler</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8320">A frequency counting function has been added to
<code>extra::stat</code></a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8323">Saturating math</a> is now
implemented. I knew this as &ldquo;clamping&rdquo;: it is arithmetic that clamps results
into a specific interval.</li>
<li><a href="https://github.com/mozilla/rust/pull/8287">A hexadecimal encoding module</a>
has been added to <code>extra</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8054"><code>EnumSet</code> has been moved into <code>extra</code>, it previously existed as a utility
in <code>rustc</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/8237"><code>str::is_utf8</code> has seen some more
optimization</a>.</li>
</ul>


<h2>Notable compiler additions, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8245">Initial support for the new formatting
code</a> has been added.</li>
<li><a href="https://github.com/mozilla/rust/pull/8279">A <code>no_main</code> attribute has been
added</a>, to omit the Rust entry
point entirely.</li>
<li><a href="https://github.com/mozilla/rust/pull/8220">Vanilla Linux on ARM</a> is now
supported.</li>
<li><a href="https://github.com/mozilla/rust/pull/8262">Extra copies of rvalues </a> are no
longer omitted.</li>
<li><a href="https://github.com/mozilla/rust/pull/8361">Some cross-arch bugs with node hash
metadata</a> have been fixed.</li>
<li><a href="https://github.com/mozilla/rust/pull/8350">A soundness bug in struct matching has been
fixed</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8362">An <code>option_env!</code> syntax extension has been
added</a> for compile-time inclusion
of environment variables that may or may not be present.</li>
<li><a href="https://github.com/mozilla/rust/pull/8176"><code>extern mod a = "b/c/d"</code> has been
implemented</a>, paving the way for
more rustpkg awesomeness.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-08-06">Tuesday
meeting</a> seems
to have been a bit under-attended. SIMD, ARM, trailing nulls, order of <code>mod</code>
and <code>use</code>, and the condition system were all briefly discussed..</p>

<h1>Discussion + Blog posts</h1>

<ul>
<li><a href="https://air.mozilla.org/2013-intern-todd/">&ldquo;A Work-stealing Runtime for
Rust&rdquo;</a>, toddaaro&rsquo;s intern
presentation.</li>
<li><a href="http://michaelwoerister.github.io/2013/08/10/iterator-blocks-features.html">&ldquo;Iterator Blocks for Rust &ndash; Feature
Survey&rdquo;</a></li>
</ul>


<h1>External projects</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1k43px/a_simple_jit_vm_written_using_rust_and_libjit/">Galvanized: a simple JIT VM written in Rust, using
LibJIT</a></li>
<li><a href="https://github.com/Jeaye/q3/commit/f4c82ce9c276327cababdb6650038e2c1d62f2d5">Q3 has a new
logger</a>.
I think it&rsquo;s nicer than the built-in one!</li>
<li><a href="https://github.com/stepancheg/rust-protobuf">rust-protobuf: a protobuf implementation generating rust code, written in
rust</a>.</li>
<li><a href="https://twitter.com/metajack/status/364571230331875331/photo/1">Servo: almost passing acid1
!</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/08/04/this-week-in-rust/"/>
    <updated>2013-08-04T18:40:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/08/04/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the ninth issue of <em>This Week in Rust</em>. This week brings
the new <code>for</code> loop, which is very exciting, as well as a bunch of runtime
changes and cleanup.</p>

<!-- more -->


<h1>What&rsquo;s cooking on <code>master</code>?</h1>

<p>Issue churn was +4 this week. A total of 63 PRs were merged (again).</p>

<h2>Breaking Changes</h2>

<ul>
<li><strong>The <code>for</code> loop now uses external iterators.</strong> This means any code written
to use the old internal iterator protocol will no longer work. See the
<a href="http://static.rust-lang.org/doc/tutorial-container.html">iterator tutorial</a>
for more information on how to use it. Related pull requests:
<a href="https://github.com/mozilla/rust/pull/8141">#8141</a>,
<a href="https://github.com/mozilla/rust/pull/8184">#8184</a>,
<a href="https://github.com/mozilla/rust/pull/8190">#8190</a>,
<a href="https://github.com/mozilla/rust/pull/8244">#8244</a>. A few uses now
require <code>do</code> rather than <code>for</code> because they cannot/have not been
implemented in terms of external iterators.</li>
<li><code>unsafe</code> is <a href="https://github.com/mozilla/rust/pull/8235">no longer allowed</a>
for functions in <code>extern</code> blocks: they are all unsafe.</li>
<li>The <a href="https://github.com/mozilla/rust/pull/8175"><code>extra::dbg</code> module</a> has
been removed.</li>
<li><code>uint::range</code> and all its friends have been replaced with an <a href="https://github.com/mozilla/rust/pull/8216">external
iterator</a>, that is in the
prelude. Code like the following now works:
<code>
for x in range(0, 10) {
    println(x.to_str());
}
</code></li>
<li>The pipes compiler (the thing driving <code>proto!</code>) <a href="https://github.com/mozilla/rust/pull/8170">has been
removed</a>, as it saw limited
use, was very old, and was a significant maintenance burden.</li>
<li><code>PortSet</code> <a href="https://github.com/mozilla/rust/pull/8164">has been removed</a> from
std, as the new scheduler does not support it.</li>
<li>A bunch of old task APIs <a href="https://github.com/mozilla/rust/pull/8139">have been
removed</a>, aslo in preparation for
the new schduler.</li>
<li><code>is_utf8</code> now <a href="https://github.com/mozilla/rust/pull/8133">rejects overlong
encodings</a>.</li>
<li>The iterator adaptors <a href="https://github.com/mozilla/rust/pull/8090">no longer have the Iterator
suffix</a>, same with <a href="https://github.com/mozilla/rust/pull/8095">str and vec
iterators</a> as well.</li>
</ul>


<h2>newrt changes</h2>

<p>A bunch of newrt things landed this week, so it gets its own section.</p>

<ul>
<li>Some <a href="https://github.com/mozilla/rust/pull/8234">bugs preventing the arc and sync tests from
passing</a> have been fixed.</li>
<li>The new scheduler now supports <a href="https://github.com/mozilla/rust/pull/8221">the <code>SingleThreaded</code> spawn
mode</a>.</li>
<li>A bunch of work with task killing <a href="https://github.com/mozilla/rust/pull/8195">has
landed</a>.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/8116">major TLS changes</a> also
landed.</li>
<li>Tasks can <a href="https://github.com/mozilla/rust/pull/8158">now be named</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8008"><code>select</code> on newrt pipes</a> has
been implemented.</li>
</ul>


<h2>Notable library additions, bugfixes, and cleanup</h2>

<ul>
<li><code>Map::contains_key</code> is <a href="https://github.com/mozilla/rust/pull/8246">now a default
method</a> implemented in terms of
<code>Map::find</code></li>
<li>A <code>dynamic_lib</code> segfault <a href="https://github.com/mozilla/rust/pull/8219">has been
fixed</a>.</li>
<li>A keyed <code>HashMap</code> constructor is <a href="https://github.com/mozilla/rust/pull/8186">now
exposed</a> for runtimeless programs
that want to use it.</li>
<li>The <code>Str</code> trait now has an <a href="https://github.com/mozilla/rust/pull/8204"><code>into_owned</code>
method</a> to avoid copies when you
already have a <code>~str</code>.</li>
<li>A bunch of <a href="https://github.com/mozilla/rust/pull/8174">SHA1 and SHA2
cleanup/optimizations</a> landed. I
hear that the speed is almost optimal, only a few cycles/byte short of
Intel&rsquo;s optimized implementation.</li>
<li>Errno coverage has been <a href="https://github.com/mozilla/rust/pull/8193">significantly expanded for
Linux</a>. I added all of the ones
that were missing, at least the ones that were present on my system.</li>
<li><code>assert!()</code> without a message <a href="https://github.com/mozilla/rust/pull/8150">now does less
allocation</a>.</li>
<li>&lsquo;\&rsquo; is <a href="https://github.com/mozilla/rust/pull/8138">no longer treated as a path
separater</a> on POSIX system.</li>
<li><code>getopt</code>&rsquo;s <code>opts_str</code> <a href="https://github.com/mozilla/rust/pull/8135">has been corrected to use more than just the first
element of the vector</a>.</li>
<li>Some more methods <a href="https://github.com/mozilla/rust/pull/8115">were added</a> in
<code>std::num</code>.</li>
<li>An iterator over the offsets of each character in a string <a href="https://github.com/mozilla/rust/pull/8082">was
added</a>.</li>
<li>A bunch of <code>RandomAccessIterator</code> implementations <a href="https://github.com/mozilla/rust/pull/8120">have been
added</a>.</li>
<li><code>Clone</code> and <code>DeepClone</code> are <a href="https://github.com/mozilla/rust/pull/8109">now
implemented</a> for <code>extern "Rust"
fn</code>.</li>
</ul>


<h2>Notable compiler additions, bugfixes, and cleanup</h2>

<ul>
<li>A <code>cfg!</code> syntax extension <a href="https://github.com/mozilla/rust/pull/8188">has been
added</a> for conditionally running
code based on crate configuration, similar to what <code>#[cfg]</code> does for
conditional compilation. It expands into a true/false constant, so LLVM
should optimize out the dead branches.</li>
<li>Some more codegen tests <a href="https://github.com/mozilla/rust/pull/8165">have been
added</a>.</li>
<li><code>copy</code> <a href="https://github.com/mozilla/rust/pull/8162">has been removed as a
keyword</a>.</li>
<li>Static struct initializers <a href="https://github.com/mozilla/rust/pull/8091">can now contain
<code>..base</code></a> for functional update.</li>
<li>Take glue <a href="https://github.com/mozilla/rust/pull/8146">has been unified</a> for
unique pointer type.</li>
<li>Pointer arithmetic is <a href="https://github.com/mozilla/rust/pull/8121">now implemented with
GEP</a> rather than casting to int
and back to the pointer.</li>
<li>Some more AST types <a href="https://github.com/mozilla/rust/pull/8107">were
renamed</a>.</li>
<li>Cross-crate conditions <a href="https://github.com/mozilla/rust/pull/8185">now
work</a>.</li>
</ul>


<h2>Documentation, tools, and other stuff</h2>

<ul>
<li>LLVM assertions <a href="https://github.com/mozilla/rust/pull/8147">can now be
disabled</a> with a configure
option.</li>
<li>Benchmarking can <a href="https://github.com/mozilla/rust/pull/8111">now be
disabled</a> by passing <code>NO_BENCH=1</code>
to make.</li>
<li><code>NO_REBUILD</code> <a href="https://github.com/mozilla/rust/pull/8110">no longer requires a
re-boostrap</a>, which should make
debug cycles on libstd much shorter.</li>
<li><code>vec</code> <a href="https://github.com/mozilla/rust/pull/7223">now has module
documentation</a>.</li>
<li>rustpkg <a href="https://github.com/mozilla/rust/pull/8032">now handles tags</a>, and
not just version numbers, in the package ID.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-30">Tuesday
meeting</a> this
week was quite meaty. I&rsquo;m not going to try to summarize it, as it seems no
real decisions were made.</p>

<h1>Discussion + Blog posts</h1>

<ul>
<li><a href="http://michaelwoerister.github.io/2013/08/03/visibility-scopes.html">Visibility scopes in Rust Debug
Info</a>.</li>
<li><a href="https://air.mozilla.org/2013-intern-kuehn/">Architecting Servo: Pipelines and
Parallelism</a>, a talk by Tim
Kuehn.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1jo431/runtimeless_sprocketnes/">Runtimeless
sprocketnes</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1joy7f/porting_machine_learning_algorithms_to_rust/">Porting machine learning algorithms to
Rust</a>.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-July/005039.html">RFC: Overloadable dereference
operator</a>.</li>
</ul>


<h1>External projects</h1>

<ul>
<li><a href="https://github.com/SiegeLord/RustGnuplot">RustGnuplot</a> was updated to
latest Rust.</li>
<li>A <a href="https://github.com/stepancheg/rust-protobuf">protobuf implementation</a> has
been started.</li>
<li><a href="https://github.com/linuxfood/rustsqlite">rustsqlite</a> has
been updated to latest Rust.</li>
<li>A <a href="https://github.com/veddan/rust-htmlescape">library for HTML escaping</a> has
been created.</li>
<li>A <a href="https://github.com/bjz/noise-rs">library for procedurally generating
noise</a> has been created.</li>
<li>A <a href="https://github.com/MarkJr94/rust-keccak">pure-Rust implementation of
Keccak</a> has been created.</li>
<li><a href="https://github.com/erickt/rust-zmq">rust-zmq</a> has been updated to latest
Rust, as well as cleaner error/constant interface.</li>
<li><a href="https://github.com/Jeaye/q3">q3</a> now does multithreaded rendering.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Last Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/07/29/last-week-in-rust/"/>
    <updated>2013-07-29T06:55:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/07/29/last-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the eighth issue of <em>This Week in Rust</em>. Due to me being
busy and forgetful over the weekend, this is a special issue, <em>Last Week in
Rust</em>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on <code>master</code>?</h1>

<p>Issue churn continues to be negative, -15 this week. A total of 63 PRs were
merged.</p>

<h2>Breaking Changes</h2>

<p>There were impressively few breaking changes last week.</p>

<ul>
<li><strong>You now need to pass <code>--cfg debug</code> to <code>rustc</code> to emit debug logging.</strong></li>
<li><a href="https://github.com/mozilla/rust/pull/7926"><strong><code>mod.rs</code> is now &ldquo;blessed&rdquo;.</strong></a>.
When loading <code>mod foo;</code>, rustc will now look for <code>foo.rs</code>, then
<code>foo/mod.rs</code>, and will generate an error when both are present.</li>
<li><a href="https://github.com/mozilla/rust/pull/7996">A bunch of <code>str</code> functions</a> were
renamed or shuffled around to be more consistent.</li>
<li><a href="https://github.com/mozilla/rust/pull/7934"><code>SmallIntSet</code> was removed</a> in
favor for the more efficient, equivalent <code>BitvSet</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7703"><code>Bitv</code> and <code>Bitvset</code> have switched to external
iterators</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7883"><code>extra::net</code> and a bunch of other obsolete
features</a> have been removed.</li>
</ul>


<h2>Notable library additions, bugfixes, and cleanup</h2>

<ul>
<li>Various <a href="https://github.com/mozilla/rust/pull/8040">TCP/UDP additions</a> have
been made in the new rt.</li>
<li>Some more <a href="https://github.com/mozilla/rust/pull/8039">atomic operations</a>
have been added.</li>
<li>A <a href="https://github.com/mozilla/rust/pull/7931"><code>chain_mut_ref</code> method</a> was
added to <code>Option</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7982">Random access iterators</a> have
been implemented.</li>
<li>Some missing <a href="https://github.com/mozilla/rust/pull/7993">memory orderings on atomic
types</a> have been added.</li>
<li><a href="https://github.com/mozilla/rust/pull/7885">workcache has seen a bunch of
attention</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7944">DList has seen some more cleanup
too</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7916">Timers have been added to the new
rt</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7943">Vectors now implement <code>slice_from</code> and
<code>slice_to</code></a>.</li>
</ul>


<h2>Notable compiler additions, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8045">debuginfo for destructured locals and function
args</a> is now implemented.</li>
<li><a href="https://github.com/mozilla/rust/pull/7986">Raw representations are now
consolidated</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8041">Impossible branches on
constants</a> are now omitted.</li>
<li><a href="https://github.com/mozilla/rust/pull/7924">It is now possible to link against crates with
<code>#[no_std]</code></a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8029">There is now a warning when matching against
NaN</a>, since it is impossible to
match against NaN (NaN != NaN).</li>
<li>A lot of <a href="https://github.com/mozilla/rust/pull/8015">default method and trait inheritance
bugs</a> have been fixed.</li>
<li><a href="https://github.com/mozilla/rust/pull/8000"><code>uint</code> enum discriminants are now
allowed</a>.</li>
<li>The <a href="https://github.com/mozilla/rust/pull/7958">section placement of static and fn items is now
configurable</a>.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/7848">trans naming modernization has
occured</a>.</li>
<li>Some unnecessary branches and blocks <a href="https://github.com/mozilla/rust/pull/7941">have been
removed</a>, resulting in a 10%
speedup of unoptimized rustc.</li>
</ul>


<h2>Documentation, tools, and other stuff</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/7912">Some benchmarks</a>, and <a href="https://github.com/mozilla/rust/pull/7980">some more
benchmarks</a>.</li>
<li>Crnobog has <a href="https://github.com/mozilla/rust/pull/8001">fixed</a>
<a href="https://github.com/mozilla/rust/pull/7979">some</a> Windows testsuite issues.</li>
<li><a href="https://github.com/mozilla/rust/pull/7820"><code>Makefile</code> dependencies</a> have
been fixed. <code>rustc</code> will never be invoked without its dependencies being
built.</li>
<li><a href="https://github.com/mozilla/rust/pull/8031"><code>rust-mode</code> has been rewritten</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8020">There are some build system changes surrounding the <code>--cfg debug</code>
changes</a>.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-23">Tuesday
meeting</a> was
quite productive. A quick summary:</p>

<ul>
<li>Graydon wants to investigate using the Memory Pool System as the Rust GC,
rather than a bespoke one. The <a href="http://www.ravenbrook.com/project/mps/">MPS</a> is
a very mature and robust memory management library.</li>
<li>The buildbots now collect and report some metrics as JSON. Take a poke in
<code>http://static.rust-lang.org/build-metrics/&lt;git-sha1&gt;/&lt;builder&gt;/&lt;slave&gt;/&lt;metricsfile&gt;.json</code>
if you&rsquo;re interested.</li>
<li>pcwalton proposes allowing <code>Self</code> in impls, like in trait definitions.</li>
<li>There was some discussion of destructors taking <code>self</code> by value.</li>
<li>There was a proposal to remove <code>*mut</code>, but it can be useful. There was no
consensus.</li>
<li>There was also some discussion on closures and mutable captures. I don&rsquo;t
really have enough context to understand the conversation, something to do
with &ldquo;thunks&rdquo;.</li>
<li>Removing <code>&amp;const</code> was discussed as well. The &ldquo;plan is that we add a lint
flag but document it as a reserved word&rdquo;, as it doesn&rsquo;t really seem to be
useful.</li>
</ul>


<h1>Discussion + Blog posts</h1>

<ul>
<li><a href="http://michaelwoerister.github.io/2013/07/26/Iterator-Blocks.html">Iterator Blocks for
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1j5vbn/rustdev_rfc_removing_t/">RFC: Removing
<code>*T</code></a></li>
<li><a href="https://speakerdeck.com/dherman/rust-low-level-programming-without-the-segfaults">dherman&rsquo;s OSCON
slides</a></li>
<li><a href="https://careers.mozilla.org/en-US/position/oKiEXfwn">Mozilla is hiring a Rust research
engineer</a></li>
<li><a href="http://blog.mongodb.org/post/56426792420/introducing-the-mongodb-driver-for-the-rust-programming">An alpha release of the MongoDB
Driver</a></li>
<li><a href="https://togototo.wordpress.com/2013/07/23/benchmarking-level-generation-go-rust-haskell-and-d/">A fairly useless benchmark of random number
generation</a></li>
</ul>


<h1>Projects</h1>

<ul>
<li><a href="https://github.com/bjz/color-rs">color-rs: A library that provides types and conversions for working with
various color formats.</a></li>
<li><a href="https://github.com/Aatch/grease-bench">grease-bench: a runtimeless
benchmarker</a></li>
<li><a href="https://github.com/dobkeratops/rustfind">rustfind, a &ldquo;jump to definition&rdquo;
tool</a></li>
<li><a href="https://github.com/Florob/RustyXML">RustyXML, a pure-Rust XML parser</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/07/21/this-week-in-rust/"/>
    <updated>2013-07-21T09:36:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/07/21/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the seventh issue of <em>This Week in Rust</em>, a weekly
overview of Rust and its community. Things are calming down quite a bit, in
that nothing extraordinarily exciting is happening. Lots of great work is
being done everywhere, and good progress is being made in both bugfixes and
cleanup. It has been a good week!</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>Issue churn this week was -15. A total of 59 PRs were merged.</p>

<h2>Breaking changes</h2>

<ul>
<li><strong><a href="https://github.com/mozilla/rust/pull/7684">The semantics of <code>range_rev</code> have
changed</a>. This will break your
code without warning.</strong> It is now, to use <a href="https://en.wikipedia.org/wiki/Interval_%28mathematics%29#Notations_for_intervals">interval
notation</a>,
<code>(hi, lo]</code> rather than <code>[hi, lo)</code>.</li>
<li><code>pub extern</code> and <code>priv extern</code> <a href="https://github.com/mozilla/rust/pull/7896">have been
removed</a> from the language. This
matches the previous similar change to <code>impl</code>. Place the visibility
qualifier (<code>pub</code>/<code>priv</code>) on each item in the <code>extern</code> block instead.</li>
<li><code>&amp;T</code> (besides <code>&amp;'static T</code>) is <a href="https://github.com/mozilla/rust/pull/7894">no longer allowed in
<code>@T</code></a>.</li>
<li>The <code>ThreadPerCore</code> spawn mode <a href="https://github.com/mozilla/rust/pull/7856">has been
removed</a>, as it doesn&rsquo;t make
sense with the new scheduler.</li>
<li>The <code>consume</code> methods of the hash containers <a href="https://github.com/mozilla/rust/pull/7833">has been replaced with an
external iterator</a>. The method
name is the same, though.</li>
<li>Moved values can <a href="https://github.com/mozilla/rust/pull/7849">no longer be captured
twice</a>. This was a blatant
soundness issue.</li>
<li>The <code>swap_unwrap</code> method of Option has been <a href="https://github.com/mozilla/rust/pull/7831">renamed to
<code>take_unwrap</code></a>.</li>
<li><code>debug!</code> statements <a href="https://github.com/mozilla/rust/pull/7822">generate no
code</a> unless you pass <code>--cfg
debug</code> to <code>rustc</code>. This should help keep code size down and make your
programs a (tiny bit) faster. Now you don&rsquo;t have to feel bad about having
<code>debug!</code> in hot code.</li>
<li>The <code>mutate_values</code> method of HashMap <a href="https://github.com/mozilla/rust/pull/7815">has been
removed</a>.</li>
</ul>


<h2>Notable library additions, bugfixes, and cleanup</h2>

<ul>
<li>An iterator adaptor was added that <a href="https://github.com/mozilla/rust/pull/7882">endlessly repeats the iterator it is
called on</a>.</li>
<li>Generated test runners <a href="https://github.com/mozilla/rust/pull/7840">now have a
<code>-h</code>/<code>--help</code></a> option.</li>
<li>Metric capturing + racheting <a href="https://github.com/mozilla/rust/pull/7829">has been
added</a> for benchmarks.</li>
<li><code>local_data</code> <a href="https://github.com/mozilla/rust/pull/7841">now has a
<code>get_mut</code></a> function.</li>
<li><code>extra::semver</code> <a href="https://github.com/mozilla/rust/pull/7726">has been updated to SemVer
2.0.0</a>.</li>
<li>Consuming iterators <a href="https://github.com/mozilla/rust/pull/7806">have been
added</a> for the hash structures.</li>
<li><code>extra::ringbuf</code> <a href="https://github.com/mozilla/rust/pull/7808">now implements
DoubleEndedIterator</a>.</li>
<li><code>Eq</code> <a href="https://github.com/mozilla/rust/pull/7799">now has a default implementation of
<code>ne</code></a>.</li>
<li><code>extra::term</code> <a href="https://github.com/mozilla/rust/pull/7716">now knows how to handle more
attributes</a>.</li>
<li>More containers <a href="https://github.com/mozilla/rust/pull/7788">implement
FromIter</a>. This means you can use
<code>.collect()</code> to gather the elements from an iterator into those containers.</li>
<li><a href="https://github.com/mozilla/rust/pull/7858">Task killing, failure, and exit code
propagation</a> in the new runtime
has been implemented.</li>
</ul>


<h2>Notable compiler additions, bugfixes, and cleanup</h2>

<ul>
<li><code>syntax::attr</code> <a href="https://github.com/mozilla/rust/pull/7902">has been
modernized</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7710">Tons of debuginfo work</a> from mw
this week!</li>
<li>Trait data structures <a href="https://github.com/mozilla/rust/pull/7886">have been cleaned
up</a>, as well as a default method
fix.</li>
<li>Intrinsics <a href="https://github.com/mozilla/rust/pull/7851">now have much better
codegen</a>.</li>
<li>A <code>no_implicit_prelude</code> attribute <a href="https://github.com/mozilla/rust/pull/7844">has been
added</a>, which prevents prelude
injection in the module heirarchy starting at the item which that attribute
is added to.</li>
<li>C-style enum variants are <a href="https://github.com/mozilla/rust/pull/7827">now
allowed</a> in <code>[T, ..n]</code>
expressions.</li>
<li>All language items are <a href="https://github.com/mozilla/rust/pull/7828">now
optional</a>. The compiler emits an
error if a language item is used but not provided.</li>
<li>The removal of <code>spanned&lt;T&gt;</code> <a href="https://github.com/mozilla/rust/pull/7826">has
begun</a>.</li>
<li>Headers <a href="https://github.com/mozilla/rust/pull/7816">have been removed</a> for
<code>~str</code> and <code>~[T]</code> where <code>T</code> is unmanaged.</li>
</ul>


<h2>Documentation, tools, and other stuff</h2>

<ul>
<li>rustpkg <a href="https://github.com/mozilla/rust/pull/7419">now works when you don&rsquo;t give it a package
ID</a>. It builds/installs/cleans
the package in the current directory, <em>iff</em> the current directory is in a
rustpkg workspace.</li>
<li><code>--quiet</code> is <a href="https://github.com/mozilla/rust/pull/7847">no longer passed</a>
to git during submodule operations, so you can see the progress of the huge
LLVM download.</li>
<li>Documentation of the <a href="https://github.com/mozilla/rust/pull/7823">lint-controlling
attributes</a> was added.</li>
<li>rustpkg <a href="https://github.com/mozilla/rust/pull/7681">now handles cloning from local git
repos</a>.</li>
<li>The GtkSourceView highlighting file <a href="https://github.com/mozilla/rust/pull/7795">was
improved</a>.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-16">Tuesday
meeting</a>
discussed nothing at all of importance.</p>

<h1>Discussion + Blog posts</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1ibd48/proofofconcept_pure_rust_malloc_implementation/">A pure-Rust memory allocator
(malloc)</a></li>
<li><a href="http://michaelwoerister.github.io/2013/07/12/Status-Update-4.html">mw&rsquo;s fourth weekly
update</a>.</li>
<li><a href="http://michaelwoerister.github.io/2013/07/20/Status-Update-5.html">mw&rsquo;s fifth weekly
update</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1imeac/guaranteeing_memory_safety_in_rust_niko_matsakis/">Discussion and slides from Niko&rsquo;s presentation at the Northeastern
University Programming Language
Seminar</a></li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/4829">A nightly Ubuntu
PPA</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1igvye/vision_for_rust_simd/">SIMD
discussion</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-July/004841.html">Rust on bare metal
ARM</a></li>
<li><a href="http://www.oscon.com/oscon2013/public/schedule/detail/28741">dherman&rsquo;s OSCON
presentation</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
