<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Rust 'n Stuffs]]></title>
  <link href="http://cmr.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2013-12-30T10:57:13-05:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/30/this-week-in-rust/"/>
    <updated>2013-12-30T00:48:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/30/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions.</a>.</p>

<p>It&rsquo;s been a slow week due to the holidays. In the next week or two 0.9 is
being released. It&rsquo;s an exciting release, but in more subtler ways than the
previous 3. Many small details, especially around the runtime and linking,
have changed that make Rust faster and more flexible without necessarily being
a breaking change. As always, the detailed changelog will have the
nitty-gritties.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>36 pull requests were merged this week. bors was feeling unwell for a bit,
due to a deadlock in a scheduler test that was fixed today and a deadlock in
(incorrect usage of) LLVM.</p>

<h2>Breaking changes</h2>

<ul>
<li>The <code>comm</code> primitives are <a href="https://github.com/mozilla/rust/pull/11111">never <code>Freeze</code>
anymore</a>.</li>
<li>The <code>link</code> attribute is <a href="https://github.com/mozilla/rust/pull/11091">now
forbidden</a> on crates. All hail
<code>crate_id</code>!</li>
<li><a href="https://github.com/mozilla/rust/pull/11121">All of our C++ dependencies have been
removed</a>. This is only breaking
because it changes the debugging experience; <code>rust_begin_unwind</code> is gone and
<code>catch throw</code> doesn&rsquo;t work because we don&rsquo;t use C++ exceptions anymore. To set
a breakpoint on task failure, <code>break _Unwind_RaiseException</code>.</li>
<li>The underbelly of the runtime has been <a href="https://github.com/mozilla/rust/pull/10965">completely
overhauled</a>. Alex wrote an <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007565.html">email
to the
list</a>
about the practical implications of this.</li>
<li><code>std::result::collect</code> <a href="https://github.com/mozilla/rust/pull/11098">now uses an
iterator</a>.</li>
<li><code>ClonableIterator</code> <a href="https://github.com/mozilla/rust/pull/11160">has been
renamed</a> to <code>CloneableIterator</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>libnative has <a href="https://github.com/mozilla/rust/pull/11159">process and TCP</a>
implementations.</li>
<li>Coercion of types into trait objects <a href="https://github.com/mozilla/rust/pull/11156">is now
supported</a>, which means <code>as
~SomeTrait</code> and <code>as &amp;Reader</code> can be left out.</li>
<li>I normally wouldn&rsquo;t mention this since it&rsquo;s internal to the compiler, but
Patrick made a heroic effort to <a href="https://github.com/mozilla/rust/pull/11058">remove <code>@mut</code> from all the
places</a>.</li>
<li>rustdoc can <a href="https://github.com/mozilla/rust/pull/11120">now test doc
comments</a>. See the pull request
for details on how and what is tested (also in the rustdoc manual).</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>SÃ©bastien Paolacci</li>
</ul>


<h1>Meeting</h1>

<p>There was no meeting this week due to the holiday.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>Mozilla is on an extended holiday break until January 2nd, but we still landed
2 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Jack Moffitt re-enabled building with make to enable work on cross-targeting
ARM in <a href="https://github.com/mozilla/servo/pull/1441">#1441</a>.</li>
<li>ms2ger cleaned up how we handle namespaces in DOM elements
<a href="https://github.com/mozilla/servo/pull/1438">#1438</a></li>
</ul>


<h1>Announcements, etc</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007575.html">rust-openssl</a>
has been formed from the union of sfackler&rsquo;s rust-ssl and erickt&rsquo;s rustcrypto.</li>
<li><a href="http://www.lars.com/concurrency/rust/servo/2013/12/21/concurrency-rust-and-servo.html">Concurrency models, Rust, and
Servo</a>.</li>
<li><a href="http://words.steveklabnik.com/rust-is-surprisingly-expressive">Rust is surprisingly
expressive</a>.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007486.html">irust</a>,
a basic REPL written in Ruby.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/22/this-week-in-rust/"/>
    <updated>2013-12-22T06:57:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/22/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a></p>

<p>This week brings a bunch of optimizations, cleanups, and the <code>std::comm</code>
rewrite. The <code>pkgid</code> attribute has also seen some changes.</p>

<!-- more -->


<p>This week also brings a bunch of tiny bugfixes, many of which I do not mention
below. Out of the 52 PRs this week, I only mention 16. The decision to include
a PR or not is fairly arbitrary, but I try to maintain a &ldquo;significance
barrier&rdquo; so that the list is not huge and hard to read (and also to save me
work!). Examples of things which I will stop including mentions of are test
fixes, minor documentation changes, build infrastructure fixes, and any
cleanup to the compiler that doesn&rsquo;t result in a relatively significant
speedup or memory usage decrease. I don&rsquo;t do this out of malice, but out of
laziness and convenience. <code>&lt;3</code></p>

<h1>What&rsquo;s cooking on master?</h1>

<p>52 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>std::comm</code> <a href="https://github.com/mozilla/rust/pull/10830">has been
rewritten</a>. In short, use
<code>Chan::new</code> and <code>SharedChan::new</code> to construct a Port/Chan pair. We&rsquo;re in the
ballpark of Go&rsquo;s performance, which is exciting. Read the PR for more details.</li>
<li>Some more <code>std::vec::raw</code>
<a href="https://github.com/mozilla/rust/pull/10996">cleanup</a> has turned some free
functions into methods. <code>.as_mut_buf</code> and friends <a href="https://github.com/mozilla/rust/pull/11029">have also been
removed</a>, replaced by using
<code>.as_ptr</code>, <code>.as_mut_ptr</code>, and <code>.len</code>.</li>
<li><code>extra::ebml</code> <a href="https://github.com/mozilla/rust/pull/11057">has been partially
de-@d</a>.</li>
<li>A ton of useless traits, <code>ToOption</code> etc,  <a href="https://github.com/mozilla/rust/pull/10967">have been
removed</a>.</li>
<li>A nasty bug where having an <code>impl</code> for a type forced it to be public <a href="https://github.com/mozilla/rust/pull/11019">has
been fixed</a>. Some types which were
previously accessible may not be anymore, due to this.</li>
<li>The <code>pkgid</code> crate attribute <a href="https://github.com/mozilla/rust/pull/11041">has been
renamed</a> to <code>crate_id</code>.</li>
<li><code>extra::sort</code> <a href="https://github.com/mozilla/rust/pull/11064">has been
removed</a>, and there is now a
<code>sort</code> method on mutable slices (<code>&amp;mut [T]</code>).</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>The <code>remove</code> and <code>insert</code> methods on vectors have had some unsafe code added
to make them <a href="https://github.com/mozilla/rust/pull/11061">3x faster</a>.</li>
<li>The <code>sum</code> method on <code>extra::stat::Stat</code> <a href="https://github.com/mozilla/rust/pull/10927">has been made more
accurate</a>.</li>
<li>debuginfo for by-value <code>self</code> <a href="https://github.com/mozilla/rust/pull/11033">has been
fixed</a>.</li>
<li><code>return</code> is now <a href="https://github.com/mozilla/rust/pull/11024">allowed in
closures</a> for early return.</li>
<li><code>crate_id</code> (then <code>pkgid</code>) <a href="https://github.com/mozilla/rust/pull/10972">now
supports</a> specifying the crate
name. <code>#foo:1.0</code> as the fragment will make the crate name <code>foo</code>, for example
<code>gl</code> in <code>github.com/bjz/gl-rs#gl:1.0</code>.</li>
<li>A <code>Pod</code> kind <a href="https://github.com/mozilla/rust/pull/10924">has been added</a>
for types where a memcpy is a logical copy. This behaves very similarly to the
old <code>Copy</code> kind.</li>
<li>Stability attributes (<code>#[deprecated]</code>, <code>#[experimental]</code>, etc) <a href="https://github.com/mozilla/rust/pull/10990">are now
checked for method calls</a>.</li>
<li>Metadata reading has been made <a href="https://github.com/mozilla/rust/pull/11017">4x
faster</a>.</li>
<li>msys terminals are <a href="https://github.com/mozilla/rust/pull/11031">now
supported</a> by <code>extra::term</code>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Carter Tazio Schonwald</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-17">weekly
meeting</a>
discusses some pull requests, <code>pkgid</code>, renaming <code>extern mod</code>, the stdlib
module hierarchy, and renaming some of the vector methods.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>We landed 19 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Pradeep Kumar re-enabled parallel selector matching
<a href="https://github.com/mozilla/servo/pull/1429">#1429</a>.</li>
<li>Daniel Hedlund fixed window redraw on Linux
<a href="https://github.com/mozilla/servo/pull/1414">#1414</a>.</li>
<li>Tetsuharu Ohzeki significantly cleaned up the compositor source code in
<a href="https://github.com/mozilla/servo/pull/1425">#1425</a>.</li>
<li>Simon Sapin added support for non-UTF8 stylesheets
<a href="https://github.com/mozilla/servo/pull/1377">#1377</a>.</li>
<li>Patrick Walton cleaned up made several PRs that clean up layout&rsquo;s dependency
on DOM nodes.</li>
<li>Isabelle Carter added support for positioned offsets for layout in
<a href="https://github.com/mozilla/servo/pull/1407">#1407</a>.</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-16">meeting</a>, we
discussed using the Critic review tool from Opera with github. We are
currently experimenting it, with jgraham&rsquo;s support. Jack also discussed his
ongoing Rust upgrade which, as always, has uncovered several interesting Rust
compiler bugs.</p>

<p>We also sketched out our current planning
<a href="https://github.com/mozilla/servo/wiki/Roadmap">roadmap</a>, along with a cheat
sheet of some of the
<a href="https://github.com/mozilla/servo/wiki/Research">research</a> topics we&rsquo;re also
investigating.</p>

<h1>Announcements, etc</h1>

<ul>
<li>The SF meetup happened. It was recorded and <a href="https://air.mozilla.org/rust-meetup-december-2013/">is available on Air
Mozilla</a>. The video is
well worth watching.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1t87a3/a_broad_vision_for_the_rust_docs_stack/">A broad vision for the Rust docs
stack</a>.</li>
<li><a href="http://blog.ezyang.com/2013/12/two-bugs-in-the-borrow-checker-every-rust-developer-should-know-about/">Two bugs in the borrow checker every Rust developer should know
about</a>.</li>
<li><a href="http://metajack.im/2013/12/19/building-rust-code--using-make-part-2/">Building Rust Code &ndash; Using Make Part
2</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1tdw88/video_2d_portaling_demo_in_rust_rustsdl2/">Video: 2D portaling demo in Rust and
rust-sdl2</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1teet8/what_do_you_want_in_a_rust_book/">What do you want in a Rust
book?</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1tcat1/i_etched_myself_a_rust_logo/">An etched copper Rust
logo</a>.</li>
<li><a href="https://github.com/blackducksw/ohcount/pull/30">Ohcount Rust support</a> has
been merged, so hopefully ohloh will have more accurate information for Rust
projects soon.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/16/this-week-in-rust/"/>
    <updated>2013-12-16T16:14:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/16/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>! It&rsquo;s late this week
because bors was having some issues which bounced every pull request, and it&rsquo;s
no fun writing about nothing.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>61 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The first part of the <code>box</code> changes <a href="https://github.com/mozilla/rust/pull/10929">has
landed</a>. <code>box</code> is a keyword, and
in an expression is now synonymous with <code>~</code> (ie, it allocates an owned box).</li>
<li><code>std::vec::raw</code> <a href="https://github.com/mozilla/rust/pull/10984">has seen some
cleanup</a>.</li>
<li>Link meta attributes <a href="https://github.com/mozilla/rust/pull/10593">have been
replaced</a> with a <code>pkgid</code>.  rustdoc
<a href="https://github.com/mozilla/rust/pull/10948">also now requires</a> a <code>pkgid</code>
attribute, rather than the deprecated link meta.</li>
<li>Some fairly obscure import syntax <a href="https://github.com/mozilla/rust/pull/10808">has been
changed</a>. <code>use {foo, bar}</code> is now
permitted, and the old <code>use foo, bar</code> is not.</li>
<li><code>Cell</code> <a href="https://github.com/mozilla/rust/pull/10791">has been removed</a>.
<code>RefCell</code> supersedes it.</li>
<li>Attempting to implement private traits <a href="https://github.com/mozilla/rust/pull/10862">no longer
works</a>.</li>
<li>The coherence <code>-Z</code> flag <a href="https://github.com/mozilla/rust/pull/10909">has been
removed</a>.</li>
<li>The <code>self</code> lifetime <a href="https://github.com/mozilla/rust/pull/10897">is now
illegal</a>, like the rest of the
keywords. Now, lifetime parameters are truly only identifiers.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>A dead code warning <a href="https://github.com/mozilla/rust/pull/10477">has been
implemented</a>. This is pretty
awesome and will do things like warn for test functions that are accidentally
never marked <code>#[test]</code> and so are never called. Some bugs in it were
<a href="https://github.com/mozilla/rust/pull/10870">also</a>
<a href="https://github.com/mozilla/rust/pull/10994">fixed</a>.</li>
<li>The benchmark runner <a href="https://github.com/mozilla/rust/pull/10952">now
handles</a> slow benchmarks.
Previously, it wouldn&rsquo;t run a benchmark that took more than 1ms. Now, it will!</li>
<li>The <code>shootout-fasta</code> benchmark <a href="https://github.com/mozilla/rust/pull/10933">has been
rewritten</a>. It&rsquo;s about 10x faster,
and looks nicer.</li>
<li>Stepping through / breaking on function calls <a href="https://github.com/mozilla/rust/pull/10966">no longer goes through the
function prelude</a>.</li>
<li>The vector <code>move_iter</code> <a href="https://github.com/mozilla/rust/pull/10995">has been made
faster</a>.</li>
<li>A single <a href="https://github.com/mozilla/rust/pull/10918"><code>#[inline]</code></a>  has made
<code>vec::from_elem</code> 20x faster</li>
<li><code>Buffer</code> <a href="https://github.com/mozilla/rust/pull/10856">now has an iterator over its
lines</a>. The gotcha is that the
newlines are included in the yielded strings.</li>
<li>Struct pattern shorthand <a href="https://github.com/mozilla/rust/pull/10833">has been
improved</a> by allowing ref/mut,
like <code>let Foo { mut x, .. } = some_foo</code>, rather than the previous <code>let Foo {
x: mut x, .. } = some_foo</code>.</li>
<li>LTO (link time optimization) <a href="https://github.com/mozilla/rust/pull/10812">has been
implemented</a>.  Rejoice.</li>
<li>All landing pads (and thus unwinding!) <a href="https://github.com/mozilla/rust/pull/10916">can now be
omitted</a> when doing LTO.</li>
<li><code>std::io::util</code> <a href="https://github.com/mozilla/rust/pull/10895">has been added</a>
with:

<ul>
<li><code>LimitReader</code> that will only read <code>n</code> bytes from another reader</li>
<li><code>NullWriter</code> that ignores everything written to it</li>
<li><code>NullReader</code> that is always EOF</li>
<li><code>ZeroReader</code> which returns all zeroes,</li>
<li><code>MultiWriter</code> which will replicate a written buffer to many writers</li>
<li><code>ChainedReader</code> which reads readers in order to completion</li>
<li><code>TeeReader</code> which will write to a Writer while reading</li>
<li>a <code>copy</code> function which copies the full contents of a reader into a writer.</li>
</ul>
</li>
<li>Windows application manifests <a href="https://github.com/mozilla/rust/pull/10878">are now
embedded</a>, so we don&rsquo;t get
special cased.</li>
<li>A <code>--dep-info</code> flag <a href="https://github.com/mozilla/rust/pull/10698">has been
added</a> which is like <code>-MMD</code> to C
compilers.</li>
<li><code>&amp;mut</code> underneath <code>&amp;</code> can <a href="https://github.com/mozilla/rust/pull/10787">now be
frozen</a>.</li>
<li><code>PortReader</code> and <code>ChanWriter</code> <a href="https://github.com/mozilla/rust/pull/10823">have been
implemented</a>.</li>
<li>Some more random distributions <a href="https://github.com/mozilla/rust/pull/10859">have been
implemented</a>.</li>
<li>We <a href="https://github.com/mozilla/rust/pull/10874">now use</a> LLVM&rsquo;s integrated
assembler on Windows.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Cadence Marseille</li>
<li>Edward Z. Yang</li>
<li>Erik Price</li>
<li>Fabrice DesrÃ©</li>
<li>Jan Niklas Hasse</li>
<li>Richard Diamond</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-10">weekly
meeting</a>
discussed <code>enum mod</code>, using types to drive inference (rather than attributes
like <code>#[no_send]</code> etc), a formal grammar, unwinding, and some various PRs (all
mentioned above).</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>We landed 29 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton landed a number of changes to layout to avoid going back to
the DOM for properties to make layout&rsquo;s access to the DOM more opaque. He also
cleaned up a significant number of regressions and added a huge number of ref
tests.</li>
<li>Keegan McAllister made content tests work in headless mode in
<a href="https://github.com/mozilla/servo/pull/1382">#1382</a>.</li>
<li>Daniel Glazman added namespace info to elements in
<a href="https://github.com/mozilla/servo/pull/1358">#1358</a>.</li>
<li>Daniel Hedlund added support for leading font metrics on Linux
<a href="https://github.com/mozilla/servo/pull/1352">#1352</a>.</li>
</ul>


<h2>Meetings</h2>

<p>This week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-09">meeting</a> discussed
an upcoming Servo workweek in SF on January 20th. We also discussed the Rust
version update and some general team frustration at a large number of
regressions lately, primarily caused by the need to disable some of our
automated testing due to instability (particularly at shutdown). This week of
work saw many of those issues fixed.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/mozilla/rust/wiki/Doc-FAQ-Cheatsheet">FAQ Cheatsheet</a> &ndash;
A cookbook-style cheatsheet of how to do simple things, based on IRC FAQs.</li>
<li><a href="http://metajack.im/2013/12/11/building-rust-code--current-issues/">Building Rust Code &ndash; Current
Issues</a></li>
<li><a href="http://metajack.im/2013/12/12/building-rust-code--using-make/">Building Rust Code &ndash; Using
Make</a></li>
<li><a href="https://github.com/pirapira/kissdb-rust">A Rust port of kissdb</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1syapv/implement_the_new_box_syntax_for_unique_pointers/">Reddit
discussion</a>
of the <code>box</code> change.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/09/this-week-in-rust/"/>
    <updated>2013-12-09T13:13:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/09/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>! It&rsquo;s a bit delayed
due to finals, but like the spinning of the Earth it goes on.</p>

<p>Shameless plug: <a href="http://www.reddit.com/r/rust/comments/1sikak/ask_cmr_to_do_things/">ask me to do
things</a>
over my winter break!</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>52 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The much-discussed <a href="https://github.com/mozilla/rust/pull/10364"><code>Result</code> API
changes</a> have happened. The gist
of it is that <code>.ok()</code> and <code>.err()</code> return Options. The other changes didn&rsquo;t
land, I assume they will be coming later.</li>
<li>The <a href="https://github.com/mozilla/rust/pull/10758">JIT support has been
removed</a>, due to lack of maintenance and upstream
changes (this came with the LLVM upgrade).</li>
<li>Keywords (except self) are <a href="https://github.com/mozilla/rust/pull/10675">no longer allowed as lifetime
parameters</a>.</li>
<li><code>Path::init</code> has been <a href="https://github.com/mozilla/rust/pull/10796">renamed</a>
back to <code>Path::new</code>.</li>
<li><code>std::str::from_utf8</code> <a href="https://github.com/mozilla/rust/pull/10701">no longer
allocates</a>.</li>
<li><code>std::util::ignore</code> <a href="https://github.com/mozilla/rust/pull/10701">has been
renamed</a> to <code>std::prelude::drop</code>, to
better reflect what it does.</li>
<li>Duplicate bindings are <a href="https://github.com/mozilla/rust/pull/10776">no longer
allowed</a> in struct bindings. That
is, <code>let SomeStruct { foo, foo } = baz;</code> is no longer legal.</li>
<li>Dynamic library propagation <a href="https://github.com/mozilla/rust/pull/10777">is
reimplemented</a>.</li>
<li><code>extra::c_vec</code> <a href="https://github.com/mozilla/rust/pull/10736">has been
modernized</a>.</li>
<li><code>MutableVector::mut_split</code> <a href="https://github.com/mozilla/rust/pull/10757">has been
renamed</a> to <code>mut_split_at</code>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>A part of the tutorial <a href="https://github.com/mozilla/rust/pull/10690">has been
rewritten</a>.</li>
<li>Vim highlighting <a href="https://github.com/mozilla/rust/pull/10793">has been
updated</a>.</li>
<li><code>deriving</code> <a href="https://github.com/mozilla/rust/pull/10844">has better error
messages</a>.</li>
<li><code>StrSlice</code> has <a href="https://github.com/mozilla/rust/pull/10824">grown some
documentation</a>.</li>
<li>Snapshots are now <a href="https://github.com/mozilla/rust/pull/10809">statically
linked</a>.</li>
<li>From the &ldquo;changes I don&rsquo;t really understand&rdquo; department, <a href="https://github.com/mozilla/rust/pull/10506">trait lifetime
parameters</a> are early bound in
associated functions.</li>
<li>A race in the scheduler <a href="https://github.com/mozilla/rust/pull/10817">has been
squelched</a>.</li>
<li>extra now has an <a href="https://github.com/mozilla/rust/pull/10211">LRU cache</a>.</li>
<li>A <code>log_enabled!(level)</code> macro <a href="https://github.com/mozilla/rust/pull/10768">has been
added</a>, for checking if the
program is being run at a given log level.</li>
<li>Static linking <a href="https://github.com/mozilla/rust/pull/10742">now has docs</a>!</li>
<li>Memory usage when compiling librustc has been killed by 130MB with some
<a href="https://github.com/mozilla/rust/pull/10676">well-placed indirection</a>.</li>
<li><code>MutableVector</code> has <a href="https://github.com/mozilla/rust/pull/10739">another
iterator</a>: <code>mut_chunks()</code>, for
iterating over mutable slices.</li>
<li>The <code>reverse-complement</code> shootout benchmark <a href="https://github.com/mozilla/rust/pull/10799">has been
rewritten</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Alexandros Tasos</li>
<li>Diego Ongaro</li>
<li>Julia Evans</li>
<li>osa1</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-03">weekly
meeting</a>
discussed using <code>box</code> for placement new, some rustpkg discussion, dropping the
dependency on a system C++ library, and the above <code>from_utf8</code> and <code>Result</code>
pull requests.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>We landed 19 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Simon Sapin added the CSS visibility property in
<a href="https://github.com/mozilla/servo/pull/1331">#1331</a>.</li>
<li>Juneyoung Cho landed local bookmark navigation in
<a href="https://github.com/mozilla/servo/pull/1262">#1262</a>.</li>
<li>ms2ger added reporting exceptions to JS when the DOM implementation fails in
<a href="https://github.com/mozilla/servo/pull/1304">#1304</a>.</li>
<li>Keegan McAllister and Patrick Kim landed several changes to continue our
push to remove @-boxes to open up more of our data to safe parallel access
across task boundaries.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Bruno de Oliveira Abinader</li>
<li>Daniel Hedlund</li>
</ul>


<h2>New intern</h2>

<ul>
<li>Isabelle Carter will be joining us as part of the GNOME Outreach Program for
Women, <a href="https://wiki.gnome.org/OutreachProgramForWomen">OPW</a>, and will be
working on adding <code>position:fixed</code> support to Servo. The internship runs from
December 10 through March 10.</li>
</ul>


<h2>Meetings</h2>

<p>This week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-02">meeting</a> was short
and mostly covered some build system changes that Jack is working on. In
short, we will use Rust&rsquo;s static linking to make it easier to distribute a
Servo binary and we are making a larger change to CMake in order to get both
more reliable parallel/incremental builds and get support for
cross-compilation.</p>

<h1>Announcements etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1s5laq/evictbt_an_issue_tracker_written_in_rust_that/">Evict-BT</a>
- an issue tracker that integrates loosely with git.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1s8c0j/rust_with_emscripten/">Rust with
Emscripten</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s3jgd/day_36_on_programming_without_malloc/">Day 36: On programming without
malloc</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s3osp/blast_from_the_past_pre01_raytracer_rustdev_rust/">Rust experience
report</a>
- a pre-0.1 raytracer and response to the language.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1s0aj5/rust_frontend_to_gcc/">Rust frontend to
GCC</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ry4ym/types_in_rust_for_beginners/">Types in Rust, for
Beginners</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1rxj0x/thoughts_on_dst_part_4_including_a_recap_of_parts/">Thoughts on DST, part
4</a></li>
<li><a href="http://pnkfelix.github.io/present-rust-codemesh2013/fklock-rust-codemesh2013.pdf">Slides from pnkfelix&rsquo;s codemash
presentation</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1seoe1/lets_avoid_having_both_foo_and_foo_opt/">An ML thread on redundant APIs involving
<code>Option</code></a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1se6qa/rfc_what_do_you_want_in_a_rust_docker_image/">What do you want in a Rust Docker
image?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s9y7o/less_is_more_lambda_the_ultimate/">A huge thread on lots of things
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s8opt/sodium_oxide_fast_cryptographic_library_for_rust/">Rust bindings to
libsodium/NaCl</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/11/30/this-week-in-rust/"/>
    <updated>2013-11-30T15:56:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/11/30/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>, a weekly newsletter
summarizing Rust&rsquo;s progress and community activity. As always, if you have
something you&rsquo;d like to be featured, just <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">send me an
email</a>.</p>

<p>Last week was very slow, but this week more than makes up for it I think!
Static linking landed, and there&rsquo;s been some nice cleanup of error messages
and various APIs.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>59 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Names of methods creating iterators have <a href="https://github.com/mozilla/rust/pull/10622">changed
drastically</a> to remove the
<code>_iter</code> suffix. This reflects that iterators are a primary focus of APIs.
The PR description has all of the changes summarized.</li>
<li>We now have <a href="https://github.com/mozilla/rust/pull/10528">static linking
support</a>! It does, however,
involve some changes with how the <code>link</code> attribute works. The error messages
should guide you to the fixes.</li>
<li>In preparation for the placement new changes, the <code>Path</code> constructor has
been <a href="https://github.com/mozilla/rust/pull/10697">renamed from <code>new</code> to
<code>init</code></a>,.</li>
<li>Some overly-permissive borrow checking for <code>&amp;mut &amp;mut</code> <a href="https://github.com/mozilla/rust/pull/10519">has been
fixed</a>. This is fairly obscure,
most code shouldn&rsquo;t have hit it.</li>
<li>The parser is <a href="https://github.com/mozilla/rust/pull/10642">more strict</a>
about what it accepts as a doc comment. Now, only <code>///</code> and <code>/**</code>  are
counted as introducing doc comments (previously, <code>////</code> and <code>/***</code> would
also introduce a doc comment).</li>
<li><code>std::{uint, int}::{min, max}</code> <a href="https://github.com/mozilla/rust/pull/10719">have been
removed</a>. They were identical to
the functions in <code>std::cmp</code>, so use those instead.</li>
<li><code>extra::json</code> <a href="https://github.com/mozilla/rust/pull/10727">has been rid of @
boxes</a>, and now uses idiomatic
constructor names.</li>
<li>The <code>type_id</code> intrinsic <a href="https://github.com/mozilla/rust/pull/10722">now uses a language item as its return
value</a>.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/10662">cleanup</a> has been done to
<code>std::rt::thread</code>, which is an interface to native threads (rather than
tasks).</li>
<li><code>do</code> blocks are <a href="https://github.com/mozilla/rust/pull/10581">no longer
allowed</a> in non-<code>proc</code> contexts.
This means that <code>do</code> can not be used with a function whose last argument is
not a <code>proc</code>. A fairly large <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006999.html">thread on the mailing
list</a>
is ongoing about this change.</li>
<li><code>LittleLock</code> now <a href="https://github.com/mozilla/rust/pull/10660">uses RAII</a>.</li>
<li>C-like enums are <a href="https://github.com/mozilla/rust/pull/10652">now represented as an
integer</a> rather than a struct,
at the LLVM level. This affects ABI.</li>
<li>Linked failure <a href="https://github.com/mozilla/rust/pull/10603">has been
removed</a> from the runtime.</li>
<li><code>extra::term</code> <a href="https://github.com/mozilla/rust/pull/10637">no longer uses <code>@mut
Writer</code></a>, instead taking the
writer to use by value.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li><code>RefCell&lt;T&gt;</code>, previously known as <code>Mut&lt;T&gt;</code>, <a href="https://github.com/mozilla/rust/pull/10514">has finally
landed</a>, for all your dynamic
borrow checking needs.</li>
<li>A lint for unknown attributes <a href="https://github.com/mozilla/rust/pull/10316">has finally been
added</a>. The compiler will now
warn when it sees an attribute it doesn&rsquo;t recognize.</li>
<li>A lock-free <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.170.1097&amp;rep=rep1&amp;type=pdf">Chase-Lev
deque</a>
has <a href="https://github.com/mozilla/rust/pull/10678">been added to the runtime</a>.</li>
<li>The shootout-spectralnorm benchmark <a href="https://github.com/mozilla/rust/pull/10704">has been
resurrected</a>.</li>
<li>Unknown feature gates <a href="https://github.com/mozilla/rust/pull/10680">are now
linted</a>, rather than being a
hard failure.</li>
<li>The AST is <a href="https://github.com/mozilla/rust/pull/10693">now frozen</a>!</li>
<li><code>GenericPort</code> <a href="https://github.com/mozilla/rust/pull/10688">now has an
iterator</a> over the messages it
receives.</li>
<li><code>NodeId</code>, <code>CrateNum</code>, <code>Name</code>, and <code>Mrk</code> (types in libsyntax) <a href="https://github.com/mozilla/rust/pull/10670">have been
shrunk to 32 bits</a>.</li>
<li>The restriction on macros expanding to a single item <a href="https://github.com/mozilla/rust/pull/10649">has been
lifted</a>. This obviates the need
for macros hackily expanding to a module containing the desired items. Do
note that this only works when the macro is in &ldquo;item position&rdquo;, or where an
item is expected. There is an
<a href="https://github.com/mozilla/rust/issues/10681">issue</a> open for lifting this
restriction.</li>
<li>A <code>thread_local</code> attribute <a href="https://github.com/mozilla/rust/pull/10312">has been
added</a>, which exposes a
platform&rsquo;s native TLS, a la C11/C++11 <code>thread_local</code>.</li>
<li>Cross compilation to win64 (via mingw-w64) <a href="https://github.com/mozilla/rust/pull/10578">is now
supported</a>. There were also a
<a href="https://github.com/mozilla/rust/pull/10631">bunch of fixes</a> on real win64.</li>
<li>The parser gives a <a href="https://github.com/mozilla/rust/pull/10641">better error
message</a> when it encounters an
unclosed delimiter it didn&rsquo;t expect.</li>
<li>There is a <a href="https://github.com/mozilla/rust/pull/10475">better error
message</a> when a module name is
used as a type (the motivating example being <code>impl SomeTrait for some_module</code>).</li>
<li>JSON decoding <a href="https://github.com/mozilla/rust/pull/10625">now gives better
errors</a>.</li>
<li>Linker optimizations are <a href="https://github.com/mozilla/rust/pull/10620">now
used</a> on Linux.</li>
</ul>


<h2>New contributors</h2>

<p>Our first-time contributors this week are:</p>

<ul>
<li>Andreas Ots</li>
<li>Eric Biggers</li>
<li>Jannis Harder</li>
<li>Kiet Tran</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-11-26">weekly
meeting</a>
discussed bootstrap times, the <code>thread_local</code> PR, mutexes, and the GC. In
particular, it was decided that we should have nightlies.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This was a short week due to the US Thanksgiving holiday, but there were still
17 landed PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Hyunjune Kim and Sammy Kim landed some border style extensions in
<a href="http://github.com/mozilla/servo/pull/1322">#1276</a>.</li>
<li>Youngmin Yoo, Seonghyun Kim, and Jaemin Moon landed overflow:hidden in
<a href="http://github.com/mozilla/servo/pull/1298">#1298</a>.</li>
<li>Isabelle Carter landed changing the unrendered portion of content to use the
doc&rsquo;s background color in <a href="http://github.com/mozilla/servo/pull/1210">#1210</a>.</li>
<li>Patrick Walton has been experimenting with some very promising parallel
layout work, which he described in a
<a href="https://groups.google.com/forum/#!topic/mozilla.dev.servo/1nKmBvFewIs">message</a>
to the mailing list.</li>
</ul>


<h2>Meetings</h2>

<p>This week&rsquo;s <a href="https://github.com/mozilla/servo/wiki/Meeting-2013-11-25">meeting</a>
covered the poor situation with Nvidia support on Linux, fleshed out the string
interning plan during CSS selector parsing/matching, and went into some Servo
and Rust-related build issues.</p>

<h1>Announcements etc</h1>

<p>Do note that all the links are pulled directly from the
<a href="https://reddit.com/r/rust">subreddit</a>.</p>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1rf8rz/matrix_multiply_performance_in_rust/">Matrix Multiply Performance in Rust</a></li>
<li><a href="https://github.com/sebcrozet/nrays">nrays</a> &ndash; a 3d/4d raytracer</li>
<li><a href="https://air.mozilla.org/sprocketnes-practical-systems-programming-in-rust/">SprocketNES: Practical Systems Programming in
Rust</a>.
Contrary to the title, this is actually a recording of the presentations at
the Bay Area meetup.</li>
<li><a href="https://github.com/uutils/coreutils">uutils</a> &ndash; an attempt at writing
universal (as in cross-platform) CLI utils in Rust</li>
<li><a href="https://github.com/cmr/lets-build-a-compiler">lbac</a> &ndash; a Rust port of Jack
Crenshaw&rsquo;s &ldquo;Let&rsquo;s Build a Compiler&rdquo;</li>
</ul>

]]></content>
  </entry>
  
</feed>
