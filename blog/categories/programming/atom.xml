<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Rust 'n Stuffs]]></title>
  <link href="http://cmr.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2014-02-24T01:53:20-05:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/23/this-week-in-rust/"/>
    <updated>2014-02-23T16:09:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/23/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This is the busiest week in This Week in Rust&rsquo;s history, <a href="http://buildbot.rust-lang.org/bors/bors.html">and the pull request
queue isn&rsquo;t getting any
shorter</a>. This is a mixed
blessing: tons of work is getting done, but it takes forever to get merged.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>89 pull requests were merged this week. This is the most pull requests merged
in a week, ever. 10 1.0 issues were closed this week, and 0 opened.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Unique vector patterns (matching on a <code>~[]</code>) <a href="https://github.com/mozilla/rust/pull/12244">has been removed from the
language</a>. One can still match
against a slice.</li>
<li><code>std::unstable</code> <a href="https://github.com/mozilla/rust/pull/12311">has been
dismantled</a>. Even as we march
towards 1.0 stability, I will still consider changed to any public interface
breaking.</li>
<li><code>Bitwise::population_count</code> <a href="https://github.com/mozilla/rust/pull/12331">has been
renamed</a> to
<code>Bitwise::count_ones</code>.</li>
<li><code>TaskBuilder</code> <a href="https://github.com/mozilla/rust/pull/12232">has seen some
cleanup</a> to actually use the
emerging &ldquo;builder&rdquo; pattern.</li>
<li>As part of <code>std::num</code>s <a href="https://github.com/mozilla/rust/issues/10387">continued
revamp</a>, <a href="https://github.com/mozilla/rust/pull/12321">the <code>Real</code> trait has
been dismantled</a> in favor of the
<code>Float</code> trait.</li>
<li>Another issue with imports <a href="https://github.com/mozilla/rust/pull/12245">has been
fixed</a>. In particular, when
importing an item where there are two items with the name, one private and one
public, the private one was accidentally imported too. This shouldn&rsquo;t affect
any code, as it&rsquo;s a fairly convoluted case.</li>
<li>UTF-16 handling <a href="https://github.com/mozilla/rust/pull/12317">has been
refactored</a> to match the standard
string APIs.</li>
<li><code>extra::test</code> <a href="https://github.com/mozilla/rust/pull/12343">has been
liberated</a> into a <code>libtest</code>.</li>
<li><code>extra::time</code> <a href="https://github.com/mozilla/rust/pull/12411">has been
liberated</a> into a <code>libtime</code>.</li>
<li><code>EnumSet</code> <a href="https://github.com/mozilla/rust/pull/12415">has been moved</a> into
<code>libcollections</code>.</li>
<li>The <code>Integer</code> trait <a href="https://github.com/mozilla/rust/pull/12326">has
migrated</a> to <code>libnum</code>.</li>
<li><code>std::hash</code> <a href="https://github.com/mozilla/rust/pull/11863">has been rewritten and
redesigned</a>.</li>
<li><code>std::trie</code> and <code>std::hashmap</code> <a href="https://github.com/mozilla/rust/pull/12428">have been
moved</a> into <code>libcollections</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Pull request 12345 was opened. In the spirit of significant arbitrary
numbers, <a href="https://github.com/mozilla/rust/pull/12345">it is absolutely
menial</a>.</li>
<li><code>rustdoc</code> <a href="https://github.com/mozilla/rust/pull/12298">will now test code blocks by
default</a>, not requiring a &ldquo;rust&rdquo;
annotation.</li>
<li>Unix domain sockets <a href="https://github.com/mozilla/rust/pull/12103">are now
implemented</a> in <code>libnative</code>.</li>
<li><code>MutexArc</code> <a href="https://github.com/mozilla/rust/pull/12336">no longer has a <code>Freeze</code>
bound</a>.</li>
<li>rustdoc has seen <a href="https://github.com/mozilla/rust/pull/12339">a bunch of minor
fixes</a>.</li>
<li>More noteworthy, there is now <a href="https://github.com/mozilla/rust/pull/12416">syntax
highlighting</a> in rustdoc output!</li>
<li>The <code>unnecessary_parens</code> lint <a href="https://github.com/mozilla/rust/pull/12366">now looks at
assignments</a> for extraneous
parenthesis.</li>
<li>A bug with infinitely recursing macro errors <a href="https://github.com/mozilla/rust/pull/12370">has been
fixed</a>.</li>
<li><code>std::str::is_utf8</code> <a href="https://github.com/mozilla/rust/pull/12314">has been internally
refactored</a> to use 100% safe code,
as well as get a bit of a speed boost.</li>
<li><code>format!</code> <a href="https://github.com/mozilla/rust/pull/12349">now handles temporaries
better</a>.</li>
<li>If you find yourself working with libsyntax, <a href="https://github.com/mozilla/rust/pull/12387">there is now a <code>-Z</code>
option</a> for dumping the AST as
JSON. This can be useful when trying to figure out what code corresponds to
what structure or enum variant.</li>
<li>Using channels outside of the runtime <a href="https://github.com/mozilla/rust/pull/12397">has been
fixed</a>.</li>
<li>Generic Drop implementations with trait bounds <a href="https://github.com/mozilla/rust/pull/12403">has been
fixed</a>. Yay!</li>
<li>Integer formatting <a href="https://github.com/mozilla/rust/pull/12382">has been
rewritten</a>. It&rsquo;s now cleaner, does
less allocation, and is 3-6x faster in many cases.</li>
<li><code>std::io::stdin</code> <a href="https://github.com/mozilla/rust/pull/12422">is now buffered by
default</a>.</li>
<li>All language items <a href="https://github.com/mozilla/rust/pull/11603">must now be
reachable</a>. Previously this caused
a linker error.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Axel Viala</li>
<li>Craig MacKenzie</li>
<li>Douglas Young</li>
<li>Dylan Braithwaite</li>
<li>Ehsanul Hoque</li>
<li>Sterling Greene</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-18">weekly
meeting</a>
discussed the Hash changes, debug assertions, and commit log administrivia.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 15 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Sankha Narayan Guria made drawing a single line much more efficient in
<a href="https://github.com/mozilla/servo/pull/1709">#1709</a></li>
<li>Lars Bergstrom removed the last of the <code>@mut</code>s not in script in
<a href="https://github.com/mozilla/servo/pull/1712">#1712</a></li>
<li>Junyoung Cho fixed up a bug where we were removing <code>&amp;nbsp;</code>s in
<a href="https://github.com/mozilla/servo/issues/1727">#1727</a></li>
<li>Youngmin Yoo added support for the <code>&lt;object&gt;</code> element in
<a href="https://github.com/mozilla/servo/pull/1664">#1664</a></li>
<li>Keegan McAllister made use of the border box more consistent in layout
in <a href="https://github.com/mozilla/servo/pull/1699">#1699</a></li>
<li>Peiyong Lin fixed up the naming of some of our flow methods in
<a href="https://github.com/mozilla/servo/pull/1693">#1693</a></li>
<li>Simon Sapin refactored the <code>cascade</code> methods in
<a href="https://github.com/mozilla/servo/pull/1706">#1706</a></li>
<li>Adam Sinnett corrected the parent type names of Text, Comment, and PI
types in <a href="https://github.com/mozilla/servo/pull/1702">#1702</a></li>
<li>Patrick Walton added some inlining that sped up flow contruction even
more in <a href="https://github.com/mozilla/servo/pull/1602">#1602</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Peiyong Lin (lpy)</li>
<li>Adam Sinnett (quandrum)</li>
</ul>


<h2>Meetings</h2>

<p>We did not have a meeting this week because of President&rsquo;s Day in the US.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/drbawb/rust-story"><code>rust-story</code></a>, a Rust port of the
&ldquo;Reconstructing Cave Story&rdquo; video series</li>
<li><a href="http://www.reddit.com/r/rust/comments/1y69r0/rlanerustgamedevkit/"><code>rust-gamedev-kit</code></a>,
a collection of libraries for gamdev</li>
<li><a href="http://www.reddit.com/r/rust/comments/1yfdzh/the_periodic_table_of_rust_types/">Periodic Table of Rust
Types</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ykop6/so_i_wrote_a_dominion_simulator_in_rust_though/">A Dominion simulator, in
Rust</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-February/008763.html">Travis CI is building pull
requests</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1yr2uz/tetris_game_in_rust/">A terminal tetris game, in
Rust</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/15/this-week-in-rust/"/>
    <updated>2014-02-15T23:20:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>86 pull requests were merged this week. This ties for week with most merged
pull requests. <a href="http://cmr.github.io/blog/2013/09/23/this-week-in-rust/">A week in September 2013 is the other record
holder</a>. To cope with
the massively inflated queue, there were two roll-ups (not counted).</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>extern mod</code> <a href="https://github.com/mozilla/rust/pull/12017">is now written</a>
<code>extern crate</code>.</li>
<li>The big codegen compiler flags pull request I warned about last week <a href="https://github.com/mozilla/rust/pull/12084">indeed
landed</a>. Many <code>-Z</code> options are now
under <code>-C</code>, and a lot of previously-bare flags (such as <code>--linker</code>) are now
also under <code>-C</code>.</li>
<li><code>std::util</code> <a href="https://github.com/mozilla/rust/pull/11956">has been removed</a>.
<code>swap</code> and <code>replace</code> now live in <code>std::mem</code>.</li>
<li><code>do</code> is once again <a href="https://github.com/mozilla/rust/pull/12170">a reserved
word</a>.</li>
<li><code>extra::rational</code>, <code>extra::bigint</code>, and <code>extra::complex</code> <a href="https://github.com/mozilla/rust/pull/12154">have been
moved</a> into <code>libnum</code> as part of
the libextra dissolution.</li>
<li>The borrow checker&rsquo;s treatment of closures <a href="https://github.com/mozilla/rust/pull/12158">has been
revamped</a>. It fixes all known
soundness issues with closures. Unfortunately, it also breaks some programs
that used to compile.</li>
<li>Channels <a href="https://github.com/mozilla/rust/pull/11578">have been rewritten</a>
to use the internally-upgradable design <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007924.html">that was hashed out on the
list</a>.
Rather than having a separate <code>SharedChan</code>, <code>Chan</code> is now cloneable.</li>
<li>The <code>Seek</code> API <a href="https://github.com/mozilla/rust/pull/12204">has changed a
bit</a>.</li>
<li>The breaking changes in the <a href="https://github.com/mozilla/rust/pull/12248">first
rollup</a> are the removal of
<code>ptr::offset</code>, <code>ptr::mut_offset</code>, <code>ptr::is_null</code>, and <code>ptr::is_not_null</code> as
free functions and the movement of <code>extra::hex</code> and <code>extra::base64</code> to
<code>libserialize</code>.</li>
<li><code>std::num::Orderable</code> <a href="https://github.com/mozilla/rust/pull/12061">has been
removed</a>.</li>
<li><code>std::ptr</code> <a href="https://github.com/mozilla/rust/pull/12282">saw some more
cleanup</a>, most notably every
function ending in <code>_ptr</code> has had that suffix removed. <code>to_unsafe_ptr</code> and
<code>to_mut_unsafe_ptr</code> have also been removed.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Process arguments and environment variables <a href="https://github.com/mozilla/rust/pull/12283">now use the
<code>from_utf8_lossy</code> function</a> that
was introduced last week, rather than failing on invalid utf8. Additionally,
there are now <code>args_as_bytes</code> and <code>env_as_bytes</code> functions to get arguments
and the environment raw.</li>
<li>The makefiles <a href="https://github.com/mozilla/rust/pull/12274">have been
refactored</a>, and there is now a
<code>make help</code> and <code>make tips</code> for hints on how to use the build system.</li>
<li>In yet another multi-thousand-line patch by eddyb, <a href="https://github.com/mozilla/rust/pull/12162"><code>ast_map::Path</code> no
longer requires cloning</a>, due to
clever devilry.</li>
<li>green task spawning <a href="https://github.com/mozilla/rust/pull/12172">was sped up by almost
5x</a>.</li>
<li>We now <a href="https://github.com/mozilla/rust/pull/12027">bundle and use
compiler-rt</a> for intrinsics rather
than using the system libgcc. We still depend on libgcc for unwinding,</li>
<li>The pidigits benchmark was made 20x faster <a href="https://github.com/alexcrichton/rust/commit/7dc187afd8a19dad05dbf1a689e6b6f400f7bc0a">by optimizing
bigint</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Bruno de Oliveira Abinader</li>
<li>Eduard Bopp</li>
<li>Edward Wang</li>
<li>Jake Kerr</li>
<li>Liigo Zhuang</li>
<li>Matthijs van der Vleuten</li>
<li>Peiyong Lin</li>
<li>Tobias Bucher</li>
<li>WebeWizard</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-11">weekly
meeting</a>
discussed struct construction sugar, what to allow in statics, the crate
keyword, a <code>finally</code> macro, and implicit trait bounds.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 18 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Bruno Abinader landed several DOM fixes, including
<a href="https://github.com/mozilla/servo/pull/1648">#1648</a> and
<a href="https://github.com/mozilla/servo/pull/1646">#1646</a></li>
<li>Hyun June Kim landed initial <code>:hover</code> support in
<a href="https://github.com/mozilla/servo/pull/1633">#1633</a></li>
<li>Keegan McAllister restored task failure handling in
<a href="https://github.com/mozilla/servo/pull/1691">#1691</a></li>
<li>Rui renamed the .rc files to .rs in the main Servo repository in
<a href="https://github.com/mozilla/servo/pull/1617">#1617</a></li>
<li>Simon Sapin made some updates to attribute selector namespaces in
<a href="https://github.com/mozilla/servo/pull/1653">#1653</a> and
<a href="https://github.com/mozilla/servo/pull/1661">#1661</a></li>
<li>Lars Bergstrom began the removal of non-script-crate <code>@mut</code>s in preparation
for a Rust upgrade in <a href="https://github.com/mozilla/servo/pull/1663">#1663</a></li>
<li>Austin King added some <code>window.console</code> support in
<a href="https://github.com/mozilla/servo/pull/1666">#1666</a></li>
<li>Marek Šuppa landed a fix to our contributing document in
<a href="https://github.com/mozilla/servo/pull/1649">#1649</a></li>
<li>Patrick Walton made extensive optimizations to style sharing in
<a href="https://github.com/mozilla/servo/pull/1644">#1644</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Austin King (ozten)</li>
<li>Marek Šuppa (mrshu)</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-10">meeting</a>, we
discussed our embedding plans, ACID2 status, improving the availability of
E-Easy issues, and doing a Rust upgrade (we are more than one month behind
Rust master).</p>

<h1>Announcements, etc</h1>

<p>There is simply too much happening in the community to keep track of! I
recommend browsing <a href="http://www.reddit.com/r/rust">the Rust subreddit</a> for
goings-on. Some notable ones:</p>

<ul>
<li><a href="http://pzol.github.io/getting_rusty/posts/20140203_hashmap/">Rust By Example:
HashMap</a></li>
<li><a href="https://gist.github.com/bvssvni/8970459">State machines using phantom
types</a></li>
<li><a href="http://golo-lang.org/">golo-lang.org</a>&rsquo;s homepage design <a href="http://adridu59.github.io/rust-www/">adapted to
Rust</a>. There is some discussion <a href="http://www.reddit.com/r/rust/comments/1xx3ll/rfc_gololangorg_ported_to_rust/">on
reddit</a>
about this.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/09/this-week-in-rust/"/>
    <updated>2014-02-09T22:15:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/09/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>There were a surprising number of breaking changes this week. The <a href="https://github.com/mozilla/rust/issues/8784">libextra
dissolution continues</a>. Condition
removal and the IO error overhaul also landed. <code>rustpkg</code> was also removed, and
rustc&rsquo;s CLI interface has changed.  Additionally, Rust gained another
full-time developer! A big hello to Nick Cameron, I look forward to seeing his
work.</p>

<p>It was also <a href="http://octoverse.github.com/">discovered</a> that we closed the
second largest number of issues of any repository on GitHub! We trailed behind
homebrew, which is almost cheating, because they use it to track issues on
over five thousand packages. Good job everyone!</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>72 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Some intrinsics <a href="https://github.com/mozilla/rust/pull/12124">have been
moved</a> into <code>std::mem</code>, in
preparations of the intrinsics no longer being publically exposed.</li>
<li>A soundness regression <a href="https://github.com/mozilla/rust/pull/12117">has been
fixed</a>.</li>
<li><code>char</code> <a href="https://github.com/mozilla/rust/pull/12086">now has range asserts</a>.
This may cause invalid uses of <code>char</code> (using invalid values) to break.</li>
<li>The various traits in <code>std::fmt</code> <a href="https://github.com/mozilla/rust/pull/12066">now use
<code>&amp;self</code></a>, rather than a separate
parameter with an argument of type <code>&amp;Self</code>.</li>
<li><code>@self</code> and <code>@Trait</code> (managed trait objects) <a href="https://github.com/mozilla/rust/pull/12030">have been
removed</a>.</li>
<li><code>rustpkg</code> <a href="https://github.com/mozilla/rust/pull/11987">has been removed</a>.</li>
<li><code>std::fmt::Default</code> <a href="https://github.com/mozilla/rust/pull/11948">has been
renamed</a> to <code>Show</code>.</li>
<li>IO errors <a href="https://github.com/mozilla/rust/pull/11946">have been completely
overhauled</a>, and no longer use
conditions. Alex wrote <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-February/008505.html">an
email</a>
to the mailing list summarizing the changes. Especially take note of the
<code>if_ok!</code> macro.</li>
<li>Conditions <a href="https://github.com/mozilla/rust/pull/12039">have been removed
entirely</a>. A detailed post-mortem
is available on the pull request.</li>
<li><code>rustc</code> has seen some work on its interface. The output flags <a href="https://github.com/mozilla/rust/pull/12020">have been
unified</a>, replacing <code>-c</code>,
<code>--emit-llvm</code>, <code>-S</code>, <code>--dylib</code>, <code>--rlib</code>, etc with two arguments: <code>--emit</code> and
<code>--crate-type</code>. There is <a href="https://github.com/mozilla/rust/pull/12084">another PR in the
queue</a> that replaces a bunch of
miscellaneous flags behind <code>-C</code>. It will likely land shortly, and is something
to be aware of.</li>
<li><code>NonCopyable</code> <a href="https://github.com/mozilla/rust/pull/12016">has been renamed</a>
to <code>NoPod</code> to be consistent with the rest of the &ldquo;marker types&rdquo;.</li>
<li><code>reserve</code> naming <a href="https://github.com/mozilla/rust/pull/11951">has been shuffled around
slightly</a>. <code>reserve</code> becomes
<code>reserve_exact</code> and <code>reserve_at_least</code> becomes <code>reserve</code>.</li>
<li><code>SendStr</code> <a href="https://github.com/mozilla/rust/pull/12098">has been removed</a> in
favor of a <code>MaybeOwned</code> type.</li>
</ul>


<p>As part of the libextra dissolution, the following crates have been
introduced:</p>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/12010"><code>libcollections</code></a>, which has
inherited <code>Bitv</code>, <code>BTree</code>, <code>Deque</code>, <code>DList</code>, <code>List</code>, <code>LruCache</code>,
<code>PriorityQueue</code>, <code>RingBuf</code>, <code>SmallIntMap</code>, <code>TreeMap</code>, and <code>TreeSet</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/12007"><code>libgetopts</code></a>, which has
inherited <code>extra::getopts</code>. Additionally, <code>getopts::groups</code> is now the <em>only</em>
interface. It has been moved up a level, into just <code>getopts</code>, and the old
functions have been removed.</li>
<li><a href="https://github.com/mozilla/rust/pull/11984"><code>libserialize</code></a>, which has
inherited <code>extra::serialize</code> and <code>extra::ebml</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/11912"><code>libuuid</code></a>, which has inherited
<code>extra::uuid</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/12012"><code>libsemver</code></a>, which has
inherited <code>extra::semver</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/11945"><code>libterm</code></a>, which has inherited
<code>extra::term</code> and <code>extra::terminfo</code>.</li>
</ul>


<p>All crates are still documented, and there is a list with links at
<a href="http://static.rust-lang.org/doc/master/index.html">http://static.rust-lang.org/doc/master/index.html</a>.</p>

<h2>Other Changes</h2>

<ul>
<li>A <code>black_box</code> function <a href="https://github.com/mozilla/rust/pull/12105">has been added to
<code>extra::test</code></a>, and the <code>iter</code>
method on BenchHarness can now return values. As
<a href="https://github.com/mozilla/rust/pull/12119">documented</a> (<a href="http://static.rust-lang.org/doc/master/guide-testing.html#benchmarks-and-the-optimizer">generated
version</a>),
these exist to make sure that LLVM will not optimize out benchmarks.</li>
<li>A <code>fourcc!</code> syntax extension <a href="https://github.com/mozilla/rust/pull/12034">has been
added</a>.</li>
<li>A <code>unimplemented!</code> macro <a href="https://github.com/mozilla/rust/pull/12090">has been
added</a>, used much the same as
<code>unreachable!()</code>.</li>
<li>The [runtime libraries <a href="https://github.com/mozilla/rust/pull/12073">have gained
examples</a>, and
<a href="http://static.rust-lang.org/doc/master/green/index.html">libgreen</a> now has an
explanation of how it is structured at a high level, specifically where
concurrency and parallelism come from.</li>
<li>A <code>from_utf8_lossy</code> function <a href="https://github.com/mozilla/rust/pull/12062">has been
added</a> that replaces invalid
codepoints with the unicode replacement character (�).</li>
<li>Network streams <a href="https://github.com/mozilla/rust/pull/11894">are now
cloneable</a>. This allows for
multiple tasks reading/writing a <code>TcpStream</code>.</li>
<li>A copy-on-write Arc container <a href="https://github.com/mozilla/rust/pull/11230">has been added to
libextra</a>, though it&rsquo;s now in
<code>libcontainers</code>.</li>
<li>SIMD types <a href="https://github.com/mozilla/rust/pull/11717">are now allowed in
generics</a>.</li>
<li>A new mutex type that plays well with the various runtimes <a href="https://github.com/mozilla/rust/pull/11866">has been
implemented</a>. It is in the same
ballpark as native, pthread mutexes.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Arcterus</li>
<li>Cole Mickens</li>
<li>Colin Sherratt</li>
<li>HeroesGrave</li>
<li>Ivan Enderlin</li>
<li>James Deng</li>
<li>João Souls</li>
<li>Marek Šuppa</li>
<li>Q.P.Liu</li>
<li>Yuri Kunde Schlesner</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-04">weekly
meeting</a>
discussed adding a <code>libprim</code>, operator overloading, and the 1.0 goals for
LLVM.</p>

<h1>Meetups</h1>

<ul>
<li>There will be a meetup <a href="http://www.eventbrite.fr/e/billets-rust-paris-meetup-10528169037">in
Paris</a>, on
February 25, from 18:30 to 23:30.</li>
<li><a href="http://www.meetup.com/Rust-Bay-Area/events/156288462/">Bay Area Rust</a> will
be meeting February 25, at 19:00 in San Francisco. David Renshaw will be
talking about Cap' Proto, Steven Fackler will be talking about exportable
macros, and Kevin Cantu about testing.</li>
</ul>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary
test cases for the Rust language.</p>

<p>This week, we landed 14 PRs, but there are a substantial number of very
close pending PRs that add major layout features to Servo (e.g., lists
markers, tables, initial pseudo-class and pseudo-element support).</p>

<h2>Notable additions</h2>

<ul>
<li>Bruno Abinader continued with his great DOM additions in
<a href="https://github.com/mozilla/servo/pull/1634">#1634</a> and
<a href="https://github.com/mozilla/servo/pull/1622">#1622</a> and
<a href="https://github.com/mozilla/servo/pull/1604">#1604</a></li>
<li>Patrick Kim fixed borders on inline boxes in
<a href="https://github.com/mozilla/servo/pull/1577">#1577</a> and landed
<code>position:relative</code> support in
<a href="https://github.com/mozilla/servo/pull/1613">#1613</a></li>
<li>Patrick Walton further improved layout performance in
<a href="https://github.com/mozilla/servo/pull/1630">#1630</a> and
<a href="https://github.com/mozilla/servo/pull/1615">#1615</a></li>
<li>Adrien Bustany fixed <code>insertBefore</code> in
<a href="https://github.com/mozilla/servo/pull/1621">#1621</a></li>
<li>Lars Bergstrom landed reftest stabilization fixes in
<a href="https://github.com/mozilla/servo/pull/1623">#1623</a> &ndash; we are almost ready to
gate landing commits on content and ref tests passing on Linux, once we get
more fonts <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=968375">installed</a>
on our Linux buildbots</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Adrien Bustany (abustany)</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-03">meeting</a>, we mainly
discussed display list construction with respect to layering and stacking
contexts.</p>

<p>Josh Matthews' talk on Servo at FOSDEM is available
<a href="http://mirrors.dotsrc.org/fosdem/2014/UD2218A/Saturday/Servo_building_a_parallel_web_browser.webm">here</a>.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1wvxcn/lazily_initialized_statics/">Lazily initialized
statics</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1wypbz/rust_gains_a_new_fulltime_developer_nick_cameron/">Rust gains a new full-time developer, Nick
Cameron</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1wz7ws/handling_io_errors/">Handling I/O
Errors</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x0zeu/adler32_and_crc32/">Pure-Rust Adler32 and
CRC32</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x1tvo/closures_and_the_borrow_checker/">Closures and the borrow
checker</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x3ooy/lzw_compression_algorithm/">Pure-Rust LZW Compression
Algorithm</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x67wq/rust_by_example_default_arguments_named_params/">Rust by Example: Default arguments,
etc</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xaum0/standalone_rust_app/">Standalone rust
app</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xfjo7/ide_support/">IDE support?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xdlou/playing_with_the_new_rust_io_error_handling/">Playing with the new Rust I/O error
handling</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xdudv/another_failed_attempt_at_parser_combinators/">Another failed attempt at parser
combinators</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xck76/a_case_for_reflection_in_rust/">A case for reflection in
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xa8uy/a_persistent_map_implementation_like_in_clojure/">A persistent map implementation, like in Clojure and Scala, with
performance
numbers</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/01/this-week-in-rust/"/>
    <updated>2014-02-01T18:45:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/01/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This was a good week, with default type parameters, <code>do</code> removal, <code>@[]</code>
removal, and some code bloat reduction.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>61 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>do</code> <a href="https://github.com/mozilla/rust/pull/11868">has been removed</a>. Replace
<code>do spawn { ... }</code> with <code>spawn(proc() { ... })</code>.</li>
<li><code>libextra</code> <a href="https://github.com/mozilla/rust/pull/11787">has exploded</a>. <a href="https://github.com/mozilla/rust/pull/11867">It
exploded some more</a>. It will
continue to explode until it no longer exists.</li>
<li><code>#[simd]</code> <a href="https://github.com/mozilla/rust/pull/11738">has been feature
gated</a>.</li>
<li>We <a href="https://github.com/mozilla/rust/pull/11706">now generate static
libraries</a> by default, rather than
dynamic libraries.</li>
<li><code>@[]</code> and <code>@str</code> <a href="https://github.com/mozilla/rust/pull/11974">have been removed from the
language</a>. All that is left is
<code>@T</code>!</li>
<li>Various methods on vectors <a href="https://github.com/mozilla/rust/pull/11944">now return
Options</a>, to be in line with the
rest of everything else.</li>
<li><code>next_power_of_two_opt</code> <a href="https://github.com/mozilla/rust/pull/11930">has been renamed
to</a> <code>checked_next_power_of_two</code>.
Additionally, the various functions for division in <code>std::uint</code> were removed.</li>
<li><code>#[no_send]</code> etc <a href="https://github.com/mozilla/rust/pull/11768">have been removed in favor of marker
types</a>. Additionally, variance of
types and lifetimes can explicitly be annotated with these marker types. They
are zero-sized and have no runtime impact.</li>
<li><code>std::borrow</code> <a href="https://github.com/mozilla/rust/pull/11895">has been
removed</a>.</li>
<li><code>Times</code> <a href="https://github.com/mozilla/rust/pull/11672">has finally been
removed</a>. Good riddance.</li>
<li>The various <code>CopyableVector</code>-like types have <a href="https://github.com/mozilla/rust/pull/11893">been
renamed</a> to
<code>CloneableVector</code> etc.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>There are now lints for <a href="https://github.com/mozilla/rust/pull/11754">unused
values</a>. Types annotated with
<code>#[must_use]</code> will now warn when (surprise) their results are not used.</li>
<li>debuginfo <a href="https://github.com/mozilla/rust/pull/11864">should now be fixed on OS
X</a>, due to us now explicitly
setting the DWARF version.</li>
<li><code>fp-elim</code> <a href="https://github.com/mozilla/rust/pull/11879">has been re-disabled, but only if debuginfo generation is
disabled</a>.</li>
<li>Errors from <code>#[deriving(...)]</code> have
<a href="https://github.com/mozilla/rust/pull/11826">seen</a> some
<a href="https://github.com/mozilla/rust/pull/11834">work</a>.</li>
<li>The evil environment pointers <a href="https://github.com/mozilla/rust/pull/11595">has been removed from bare
functions</a>, as well as <code>self</code> now
being a mostly-normal argument, to the compiler. This was a huge effort (88
changed files with 1,436 additions and 2,138 deletions) by Eduard Burtescu,
and is awesome!</li>
<li>Also from Eduard is <a href="https://github.com/mozilla/rust/pull/11217">default type
parameters</a>! They are currently
behind a feature flag, but allow you to say, for example, <code>struct Foo&lt;T =
uint&gt;</code> and use <code>Foo</code> as a bare type.</li>
<li>The tydesc <a href="https://github.com/mozilla/rust/pull/11909">is used in less
places</a> to help fend off code
bloat.</li>
<li>The occasional infinite recursion in some recursive types <a href="https://github.com/mozilla/rust/pull/11839">has been
fixed</a>.</li>
<li>Take glue <a href="https://github.com/mozilla/rust/pull/11723">has been removed from
tydescs</a>, also to fend off code
bloat.</li>
<li><code>fail!()</code> <a href="https://github.com/mozilla/rust/pull/11841">also generates less code
now</a>, to fend off bloat. In
particular, <code>fn main() { fail!() }</code> now compiles 2-3x faster due to generating
less code.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>JeremyLetang</li>
<li>Johannes Muenzel</li>
<li>Keshav Kini</li>
<li>Michael Darakananda</li>
<li>Nathaniel Herman</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-28">weekly
meeting</a>
discussed default type parameters, the unused result lint, minor changes to
the attribute syntax, how to deal with I/O splitting, and the visit glue.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 32 PRs, significantly above our usual PR landing rate!</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton landed a huge number of PRs that significantly improved our
performance and parallelism
<a href="https://github.com/mozilla/servo/pull/1600">#1600</a>,
<a href="https://github.com/mozilla/servo/pull/1564">#1564</a>,
<a href="https://github.com/mozilla/servo/pull/1567">#1567</a>,
<a href="https://github.com/mozilla/servo/pull/1589">#1589</a>,
<a href="https://github.com/mozilla/servo/pull/1566">#1566</a>
<a href="https://github.com/mozilla/servo/pull/1574">#1574</a>,
<a href="https://github.com/mozilla/servo/pull/1571">#1571</a>,
<a href="https://github.com/mozilla/servo/pull/1559">#1559</a>, etc.</li>
<li>Rui (xiongmao86) fixed a linking issue in our Makefiles in
<a href="https://github.com/mozilla/servo/pull/1603">#1603</a>.</li>
<li>Isabelle Carter landed multiple display list support in
<a href="https://github.com/mozilla/servo/pull/1579">#1579</a>.</li>
<li>Lars Bergstrom finally re-enabled ref tests in
<a href="https://github.com/mozilla/servo/pull/1565">#1565</a> and started a quest to
improve test reliability in
<a href="https://github.com/mozilla/servo/pull/1597">#1597</a> and
<a href="https://github.com/mozilla/servo/pull/1570">#1570</a>.</li>
<li>Bruno Abinader pushed on more DOM features in
<a href="https://github.com/mozilla/servo/pull/1583">#1583</a> and
<a href="https://github.com/mozilla/servo/pull/1580">#1580</a>.</li>
<li>Clark Gaebel (wowus) enabled a limit on the number of redirects Servo
follows in <a href="https://github.com/mozilla/servo/pull/1562">#1562</a>.</li>
<li>Tetsuharu Ohzeki cleaned up Node&rsquo;s <code>remove</code> and <code>insert</code> members
<a href="https://github.com/mozilla/servo/pull/1582">#1582</a>.</li>
<li>Deokjin Kim implemented <code>whitespace:pre</code> in
<a href="https://github.com/mozilla/servo/pull/1547">#1547</a>.</li>
<li>Patrick Kim landed border support for inline flows in
<a href="https://github.com/mozilla/servo/pull/1546">#1546</a>.</li>
<li>Simon Sapin used his CSS wizardry to redo a performance tweak we made so
that it&rsquo;s actually spec-compliant in
<a href="https://github.com/mozilla/servo/pull/1560">#1560</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Clark Gaebel (wowus)</li>
<li>Rui (xiongmao86)</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-27">meeting</a>, we
discussed moving the build of fontconfig on Linux into Servo to avoid
situations where the system version is old and not threadsafe, what&rsquo;s blocking
the JSManaged conversion (which is required for our next Rust upgrade), and
the status of ref and content tests.</p>

<p>Josh Matthews is at FOSDEM this weekend, giving a
<a href="http://www.joshmatthews.net/fosdemservo/">talk</a> on Servo. Look for video on
air.mozilla.org shortly!</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1wqjsf/more_xxhash_benchmarks/">An xxHash implementation in
Rust</a>,
as well as some benchmarks comparing to gcc and clang.</li>
<li><a href="http://hydrocodedesign.com/2014/01/31/llvm-with-rust/">Using LLVM From Within
Rust</a></li>
<li><a href="http://vimeo.com/85253071">Felix&rsquo;s CodeMesh presentation</a></li>
<li><a href="https://docs.google.com/a/octayn.net/spreadsheet/ccc?key=0AlWBWplsaTZvdGdSdEVzZW1BeDA5dm0zM2FFeW0ySEE&amp;usp=drive_web#gid=0">A 1.0 roadmap
spreadsheet</a></li>
<li><a href="https://github.com/kballard/rust-lua">rust-lua</a>, safe bindings to Lua 5.1</li>
<li><a href="http://www.infoq.com/interviews/klock-rust?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row1#.Uupx3qddN-w.reddit">InfoQ interview with
Felix</a></li>
<li><a href="http://blog.safaribooksonline.com/2014/01/30/parameters-bounds-rust/">Parameters and Bounds in
Rust</a></li>
<li><a href="http://blog.safaribooksonline.com/2014/01/28/network-communication-serialization-rust/">Network Communication and Serialization in
Rust</a></li>
<li><a href="https://air.mozilla.org/rust-meetup-january-2014/">Recording of the Bay Area Rust January
meetup</a>, wherein Brian
talks about 1.0, Niko talks about DST, Kevin talks about rust-lua, and I talk
about evangelism.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008224.html">Deprecating
rustpkg</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parametric Polymorphism Declaration Syntax in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/01/polymorphic-declaration-syntax-in-rust/"/>
    <updated>2014-02-01T17:06:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/01/polymorphic-declaration-syntax-in-rust</id>
    <content type="html"><![CDATA[<h1>Summary</h1>

<p>Change the following syntax:</p>

<p><code>
struct Foo&lt;T, U&gt; { ... }
impl&lt;T, U&gt; Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
fn foo&lt;T, U&gt;(...) { ... }
</code></p>

<p>to:</p>

<p><code>
forall&lt;T, U&gt; struct Foo { ... }
forall&lt;T, U&gt; impl Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
forall&lt;T, U&gt; fn foo(...) { ... }
</code></p>

<!-- more -->


<h1>The Problem</h1>

<p>The immediate, and most pragmatic, problem is that in today&rsquo;s Rust one cannot
easily search for implementations of a trait. Why? <code>grep 'impl Clone'</code> is
itself not sufficient, since many types have parametric polymorphism. Now I
need to come up with some sort of regex that can handle this. An easy
first-attempt is <code>grep 'impl(&lt;.*?&gt;)? Clone'</code> but that is quite inconvenient to
type and remember. (Here I ignore the issue of tooling, as I do not find the
argument of &ldquo;But a tool can do it!&rdquo; valid in language design.)</p>

<p>A deeper, more pedagogical problem, is the mismatch between how <code>struct
Foo&lt;...&gt; { ... }</code> is read and how it is actually treated. The straightforward,
left-to-right reading says &ldquo;There is a struct Foo which, given the types &hellip;
has the members &hellip;&rdquo;. This might lead one to believe that <code>Foo</code> is a single
type, but it is not. <code>Foo&lt;int&gt;</code> (that is, type <code>Foo</code> instantiated with type
<code>int</code>) is not the same type as <code>Foo&lt;unit&gt;</code> (that is, type <code>Foo</code> instantiated
with type <code>uint</code>). Of course, with a small amount of experience or a very
simple explanation, that becomes obvious.</p>

<p>Something less obvious is the treatment of functions. What does <code>fn
foo&lt;...&gt;(...) { ... }</code> say? &ldquo;There is a function foo which, given types &hellip;
and arguments &hellip;, does the following computation: &hellip;&rdquo; is not very adequate.
It leads one to believe there is a <em>single</em> function <code>foo</code>, whereas there is
actually a single <code>foo</code> for every substitution of type parameters! This also
holds for implementations (both of traits and of inherent methods).</p>

<p>Another minor problem is that nicely formatting long lists of type parameters
or type parameters with many bounds is difficult.</p>

<h1>Proposed Solution</h1>

<p>Introduce a new keyword, <code>forall</code>. This choice of keyword reads very well and
will not conflict with any identifiers in code which follows the <a href="https://github.com/mozilla/rust/wiki/Note-style-guide">style
guide</a>.</p>

<p>Change the following declarations from</p>

<p><code>
struct Foo&lt;T, U&gt; { ... }
impl&lt;T, U&gt; Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
fn foo&lt;T, U&gt;(...) { ... }
</code></p>

<p>to:</p>

<p><code>
forall&lt;T, U&gt; struct Foo { ... }
forall&lt;T, U&gt; impl Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
forall&lt;T, U&gt; fn foo(...) { ... }
</code></p>

<p>These read very well. &ldquo;for all types T and U, there is a struct Foo &hellip;&rdquo;, &ldquo;for
all types T and U, there is a function foo &hellip;&rdquo;, etc. These reflect that there
are in fact multiple functions <code>foo</code> and structs <code>Foo</code> and implementations of
<code>Trait</code>, due to monomorphization. It also allows for grepping for &ldquo;impl
Trait&rdquo;.</p>
]]></content>
  </entry>
  
</feed>
