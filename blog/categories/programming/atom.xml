<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Rust 'n Stuffs]]></title>
  <link href="http://cmr.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2014-01-30T00:48:53-05:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/26/this-week-in-rust/"/>
    <updated>2014-01-26T19:00:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/26/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>74 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Struct fields <a href="https://github.com/mozilla/rust/pull/11777">now inherit the privacy of the struct
itself</a>.</li>
<li>A bug in instantiability checking (determining whether a value of a given
type could ever be constructed) <a href="https://github.com/mozilla/rust/pull/11661">has been
fixed</a>.</li>
<li><code>Zero</code> and <code>One</code> <a href="https://github.com/mozilla/rust/pull/11664">have been tightened
up</a>, and fewer types implement
them now.</li>
<li><a href="https://github.com/mozilla/rust/pull/11129">A lot of things have changed</a>
regarding functions that fail or return Options. Almost everything that used
to fail now returns an Option instead.</li>
<li>Many incorrect usages of types from <code>std::libc</code> <a href="https://github.com/mozilla/rust/pull/10943">now use Rust
types</a>. This might introduce an
extra <code>as</code> or few in code using these (relatively obscure) interfaces.</li>
<li><code>invert</code> on <code>DoubleEndedIterator</code> <a href="https://github.com/mozilla/rust/pull/11686">has been
renamed</a> to <code>rev</code>.</li>
<li>The numeric constants <a href="https://github.com/mozilla/rust/pull/11790">have been
uppercased</a>.</li>
<li>Some privacy in std and extra <a href="https://github.com/mozilla/rust/pull/11808">has been shuffled
around</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Most macros are <a href="https://github.com/mozilla/rust/pull/11774">no longer injected as a hard-coded
string</a> and in fact live in
libstd.</li>
<li>Using <code>-Z no-landing-pads</code> <a href="https://github.com/mozilla/rust/pull/11653">actually disables landing pad
generation</a>. It was accidentally
broken.</li>
<li>The FFI documentation <a href="https://github.com/mozilla/rust/pull/11486">now includes a section on
callbacks</a>.</li>
<li>A lint for unnecessary parens on control flow conditions etc <a href="https://github.com/mozilla/rust/pull/11663">has been
added</a>.</li>
<li>Support for ARM&rsquo;s thumb instructions <a href="https://github.com/mozilla/rust/pull/11700">has been
added</a>.</li>
<li>libnative <a href="https://github.com/mozilla/rust/pull/11294">now implements
timers</a>.</li>
<li>There is now <a href="https://github.com/mozilla/rust/pull/11611">exponential notation for float
formatting</a>.</li>
<li><code>Vec&lt;T&gt;</code> <a href="https://github.com/mozilla/rust/pull/11682">has been added</a>, which
is intended to eventually replace <code>~[T]</code>.</li>
<li>Borrow checker errors <a href="https://github.com/mozilla/rust/pull/11718">now have better
spans</a> and should be more
understandable.</li>
<li>It is now possible to <a href="https://github.com/mozilla/rust/pull/11744">opt out of using
rpaths</a>.</li>
<li>libnative <a href="https://github.com/mozilla/rust/pull/11732">now implements
<code>get_host_addresses</code></a>.</li>
<li>A new synchronization primitive, Barrier, <a href="https://github.com/mozilla/rust/pull/11725">has been
added</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Andre Arko</li>
<li>Aydin Kim</li>
<li>Ben Harris</li>
<li>Ben Noordhuis</li>
<li>Chris Wong</li>
<li>Daniel MacDougall</li>
<li>Hong Chulju</li>
<li>Jake Greenfield</li>
<li>Matthias Einwag</li>
<li>Philippe Delrieu</li>
<li>Salem Talha</li>
<li>Sean Chalmers</li>
<li>Trent Ogren</li>
<li>Virgile Andreani</li>
<li>comex</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-21">weekly
meeting</a>
discussed a bunch of open pull requests, but nothing too groudbreaking.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 19 PRs and had a Servo workweek in the Mozilla San
Francisco office from Tuesday through Friday (Monday was a US federal
holiday).</p>

<h2>Notable additions</h2>

<ul>
<li>Bruno Abinader implemented Document::createHTMLDocument in
<a href="https://github.com/mozilla/servo/pull/1523">#1523</a>.</li>
<li>Patrick Walton implemented parallel layout for two of our three layout
passes in <a href="https://github.com/mozilla/servo/pull/1493">#1493</a>.</li>
<li>Patrick Kim fixed computation of image box sizes in
<a href="https://github.com/mozilla/servo/pull/1520">#1520</a> and text-decoration in
<a href="https://github.com/mozilla/servo/pull/1506">#1506</a>.</li>
<li>Deokjin Kim landed the <code>white-space:pre</code> property in
<a href="https://github.com/mozilla/servo/pull/1507">#1507</a>.</li>
<li>Aydin Kim and Lars Bergstrom landed fixes for Servo on Android.</li>
<li>Teodor Szente fixed up a type signature in
<a href="https://github.com/mozilla/servo/pull/1541">#1541</a>.</li>
<li>Lars Bergstrom changed ref tests so that they now emit a PNG showing the
image-diff between the baseline and incorrect rendering in
<a href="https://github.com/mozilla/servo/pull/1544">#1544</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Teodor Szente</li>
</ul>


<h2>Meetings</h2>

<p>There was no separate Servo meeting, but during the workweek we discussed
details in our designs for
<a href="https://etherpad.mozilla.org/Servo-workweek-layers">layers</a>, <a href="https://etherpad.mozilla.org/Servo-workweek-generated-content">generated
content</a>,
<a href="https://etherpad.mozilla.org/Servo-workweek-tables">tables</a>,
<a href="https://etherpad.mozilla.org/Servo-workweek-pixels">HiDPI/pixels</a>, and
<a href="https://etherpad.mozilla.org/Servo-workweek-displaylist">DisplayList
creation</a>.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008214.html">Rust contribution
ideas</a></li>
<li><a href="https://github.com/SiegeLord/RustAlgebloat">RustAlgebloat</a>, a linear
algebra library</li>
<li><a href="http://glaebhoerl.tumblr.com/rust_closure_types">Table of Potential Closure
Types</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008088.html">rust-ci
updates</a>,
categorization and documentation uploading</li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/7848">Channel API
proposal</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/18/this-week-in-rust/"/>
    <updated>2014-01-18T20:21:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/18/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This was a big week. rvalue lifetimes and external syntax extensions landed,
as well as a bunch of codegen optimization.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>69 pull requests were merged this week. As of writing,
<a href="http://buildbot.rust-lang.org/bors/bors.html">bors</a> has 14 approved pull
requests waiting.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>std::num</code>&rsquo;s ongoing overhaul continues. It&rsquo;s going to be drastically
simplified, and not try to be a general-purpose numeric library.
<a href="https://github.com/bjz/num-rs">num-rs</a> is intended to provide some base
algebraic types. <a href="https://github.com/mozilla/rust/pull/11504">#11504</a> removes
gamma/bessel and does some cleanup of cmath.
<a href="https://github.com/mozilla/rust/pull/11548">#11548</a> merges Bitwise and
BitCount and removes Bounded and Bitwise from the prelude.
<a href="https://github.com/mozilla/rust/pull/11622">#11622</a> simplifies Primitive.</li>
<li>Destructuring <code>@</code> patterns are <a href="https://github.com/mozilla/rust/pull/11305">no longer
supported</a>.</li>
<li>The return type of <code>Chan::try_recv</code> has been extended to <a href="https://github.com/mozilla/rust/pull/11112">indicate why it
did not return a value</a>. That is,
whether there was legitimately no value, or if the other end had hung up.</li>
<li>Disk-relative paths on Windows <a href="https://github.com/mozilla/rust/pull/11579">are now properly
generated</a> when joining two paths.</li>
<li>FromBase64 and FromHex <a href="https://github.com/mozilla/rust/pull/11597">now use error
enums</a>.</li>
<li><code>std::io</code> <a href="https://github.com/mozilla/rust/pull/11598">has been shuffled around a
bit</a>.</li>
<li>(Almost?) all iterator types <a href="https://github.com/mozilla/rust/pull/11001">have been
renamed</a>.</li>
<li>unsafe functions can <a href="https://github.com/mozilla/rust/pull/11605">no longer be coerced to
closures</a>.</li>
<li>Unnecessary (useless) visibility modifiers on <code>use</code> and <code>extern mod</code> <a href="https://github.com/mozilla/rust/pull/11607">are
now forbidden</a>.</li>
<li>Building on last week&rsquo;s per-task stdout/stderr, <a href="https://github.com/mozilla/rust/pull/11620">rustc&rsquo;s error reporting has
been cleaned up significantly</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Externally loadable syntax extensions <a href="https://github.com/mozilla/rust/pull/11151">have
landed</a>! We can now write
syntax extensions outside of the compiler, and export macros.</li>
<li>The &ldquo;rvalue lifetime&rdquo; issue has seen some <a href="https://github.com/mozilla/rust/pull/11585">significant work put into
it</a>. Notably, <code>for x in [1, 2, 3,
4].iter() { .. }</code> should now work, among many other papercut annoyances with
rvalues.</li>
<li>Error messages involving inferred integer types <a href="https://github.com/mozilla/rust/pull/11513">are now much more
sane</a>. Rather than <code>&lt;V0&gt;</code> or
<code>&lt;VI1&gt;</code>, it now prints <code>&lt;generic integer #0&gt;</code> etc.</li>
<li>Accidentally including a semicolon on the last line of a function <a href="https://github.com/mozilla/rust/pull/11482">now has a
better error message</a>, if the
types line up.</li>
<li>Some bugs with trait object coercion <a href="https://github.com/mozilla/rust/pull/11525">have been
fixed</a>.</li>
<li>The runtime <a href="https://github.com/mozilla/rust/pull/11501">now has its own
documentation</a>, viewable
<a href="http://static.rust-lang.org/doc/master/guide-runtime.html">here</a>.</li>
<li>rustdoc&rsquo;s search is now <a href="https://github.com/mozilla/rust/pull/11438">more
forgiving</a> on the input it
accepts.</li>
<li>Inserting into tries has been optimized significantly, <a href="https://github.com/mozilla/rust/pull/11546">with no unsafe
code</a>. Its iterator has <a href="https://github.com/mozilla/rust/pull/11497">also been
optimized</a>, albeit with unsafe
code.</li>
<li><a href="https://github.com/mozilla/rust/pull/11535">The reference-counting headers have been
removed</a>. The associated
&ldquo;managed-unique&rdquo; concept <a href="https://github.com/mozilla/rust/pull/11565">has also been
removed</a>.</li>
<li>The recent OS X 10.9 breakage <a href="https://github.com/mozilla/rust/pull/11604">should be
fixed</a>, as we will no longer use
<code>ar s</code> on that platform.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Clinton Ryan</li>
<li>Derek Guenther</li>
<li>Lucy</li>
<li>Petter Remen</li>
<li>Shamir Khodzha</li>
<li>Yehuda Katz</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-14">weekly
meeting</a>
discussed associated function resolution, changes to our calling convention
(specifically the fate of the ubiquitous environment pointer), how we want to
handle feature freeze, static items with destructors, and documentation on
primitives.</p>

<h1>Quotes of the Week</h1>

<p><blockquote><p>who says you can&rsquo;t make money selling a compiler? You can, as long as you<br/>convince people it&rsquo;s a video game</p><footer><strong>tjc on the Rust-the-game/Rust-the-language confusion</strong></footer></blockquote></p>

<p><blockquote><p>who needs pure functional when you have pure cool?</p><footer><strong>eddyb</strong></footer></blockquote></p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary
test cases for the Rust language.</p>

<p>This week, we landed 22 PRs. There will be a Servo workweek in the
Mozilla San Francisco office next week, Tuesday through Friday.</p>

<h2>Notable additions</h2>

<ul>
<li>Jack Moffitt landed the huge Rust upgrade
<a href="https://github.com/mozilla/servo/pull/1473">#1473</a>, bringing us very close to
the 0.9 release. Hooray!</li>
<li>Lars Bergstrom got NVidia-on-Linux working in
<a href="https://github.com/mozilla/servo/pull/1487">#1487</a> and fixed the content test
reliability in <a href="https://github.com/mozilla/servo/pull/1500">#1500</a>.</li>
<li>Tetsuharu Ohzeki implemented <code>removeAttribute</code> on Element in
<a href="https://github.com/mozilla/servo/pull/1448">#1448</a>.</li>
<li>jgraham landed innerHTML support
<a href="https://github.com/mozilla/servo/pull/1450">#1450</a>.</li>
<li>Bruno Abinader implemented several fixes related to DOMImplementation:
<a href="https://github.com/mozilla/servo/pull/1497">#1497</a>,
<a href="https://github.com/mozilla/servo/pull/1488">#1488</a>.</li>
<li>Corey Richardson fixed up an error case in startup on Linux in
<a href="https://github.com/mozilla/servo/pull/1502">#1502</a>.</li>
<li>Isabelle Carter landed the initial work for handling <code>position:fixed</code> in
<a href="https://github.com/mozilla/servo/pull/1440">#1440</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Corey Richardson</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-13">meeting</a>, we
discussed the need to clean up our test harnesses, the removal of <code>@</code> in
support of the next Rust upgrade, and the workweek..</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/DaGenix/rust-crypto/pull/21">The first pure-Rust AES
implementation</a>. According to
enix in IRC, this is also the first bit slicing implementation in a high level
language (ie, not assembly or a port of assembly).</li>
<li><a href="https://github.com/nickdesaulniers/rust-re2">rust-re2</a>, re2 bindings</li>
<li><a href="http://words.steveklabnik.com/a-30-minute-introduction-to-rust">A 30 Minute Introduction to
Rust</a></li>
<li><a href="https://github.com/shilgapira/ObjCrust">ObjCrust</a>, building an iOS static
library with Rust.A</li>
<li><a href="http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/">The Periodic Table of Rust
Types</a></li>
<li><a href="https://github.com/dnaq/sodiumoxide">Sodium Oxide</a>, NaCl bindings, updated
to 0.9</li>
<li><a href="http://dwrensha.github.io/capnproto-rust/2014/01/15/benchmark-update.html">capnproto-rust benchmark
update</a></li>
<li><a href="https://github.com/sfackler/rust-phf">rust-phf</a>, compile-time hash maps. It
also serves as a demonstration of loadable syntax extensions!</li>
<li><a href="http://www.reddit.com/r/rust/comments/1v9rgp/rust_has_dowhile_loops/">Rust has do-while
loops</a>,
a dirty hack no one should use.</li>
<li><a href="http://paulkoerbitz.de/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">Understanding Pointers, Ownership, and Lifetimes in
Rust</a></li>
<li><a href="http://hydrocodedesign.com/2014/01/17/jit-just-in-time-compiler-rust/">A Just-in-time Compiler (Written) In
Rust</a></li>
<li><a href="https://github.com/alexcrichton/jba/tree/rust">jba</a>, a GameBoy emulator
written in Rust.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The State of Rust 0.9]]></title>
    <link href="http://cmr.github.io/blog/2014/01/12/the-state-of-rust-0-dot-9/"/>
    <updated>2014-01-12T21:13:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/12/the-state-of-rust-0-dot-9</id>
    <content type="html"><![CDATA[<p><a href="http://www.rust-lang.org/">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is my post-mortem of the past 3 months, the
current status of Rust, and its future.</p>

<!-- more -->


<h1>Compiler</h1>

<p>The compiler saw a fair bit of work this release cycle. Some polish has gone
into <code>mut</code> in patterns. For example, <code>let (mut x, y) = foo();</code> now works as
expected. We now have &ldquo;feature gates&rdquo;, or feature flags, that let us mark
certain features as either deprecated or experimental and subject to change.
<code>@mut</code> has been removed. Slice representation has been optimized (we now store
number of elements, not number of bytes). Soundness bugs have been fixed, and
some bugs in our name resolution have been patched up. We have a dead code
warning, stability annotations, crate introspection, and lots more.</p>

<p>On top of all that, we also have support for static linking and LTO. Compiler
performance has further improved. From the 112ms compiling <code>fn main() { }</code> in
0.8, we now do 91ms with static linking (the default) and 68ms for dynamic
linking (<code>-Z prefer-dynamic</code>). Our debuginfo is in a much better state. The
entire codebase (compiler + standard library + tools) compiles with it, and
<a href="https://github.com/mozilla/servo/">Servo</a> compiles with it by default.</p>

<h1>Runtime</h1>

<p>The runtime has seen tons of work this release. <code>std::io</code> has been swapped
over to the new runtime, which is written entirely in Rust. We now support
both 1:1 and M:N threading models, their respective runtimes supplied by
&ldquo;libnative&rdquo; and &ldquo;libgreen&rdquo;. libgreen (the &ldquo;old new runtime&rdquo;) has seen some
performance improvements. Chris Morgan reports that the scalability of his
<a href="https://github.com/chris-morgan/rust-http/">rust-http</a> benchmarks has
improved from 1.25x to 1.75x from 1 to 8 concurrent request handlers. On my
machine, using libnative gives an impressive performance boost, pushing us
ahead of go&rsquo;s performance (graph below). libnative has yet to see any optimization work.
David Renshaw reports roughly a 2x performance increase on his <a href="http://dwrensha.github.io/capnproto-rust/2013/11/16/benchmark.html">capn proto
benchmark</a>
when using libnative for I/O.</p>

<p><noscript></p>

<pre><code>&lt;img src="https://docs.google.com/a/octayn.net/spreadsheet/oimg?key=0ArjzeYh7LqL2dENRREdRbDljajR4LWt1RlozM2YyY0E&amp;oid=1&amp;zx=xnqmqanhavt" /&gt;
&lt;p&gt;(This would be interactive if you had JavaScript enabled)&lt;/p&gt;
</code></pre>

<p></noscript></p>

<script type="text/javascript" src="http://cmr.github.io//ajax.googleapis.com/ajax/static/modules/gviz/1.0/chart.js"> {"dataSourceUrl":"//docs.google.com/a/octayn.net/spreadsheet/tq?key=0ArjzeYh7LqL2dENRREdRbDljajR4LWt1RlozM2YyY0E&transpose=0&headers=1&range=A1%3AE6&gid=0&pub=1","options":{"titleTextStyle":{"bold":true,"color":"#000","fontSize":16},"series":{"0":{"errorBars":{"errorType":"none","magnitude":10}}},"animation":{"duration":500},"width":600,"hAxis":{"title":"Concurrency (\"threads\")","useFormatFromData":true,"minValue":null,"viewWindowMode":null,"viewWindow":null,"maxValue":null},"vAxes":[{"useFormatFromData":true,"title":"Requests / second","minorGridlines":{"count":"4"},"minValue":null,"gridlines":{"count":"5"},"logScale":false,"viewWindow":{"max":null,"min":null},"maxValue":null},{"useFormatFromData":true,"minValue":null,"logScale":false,"viewWindow":{"max":null,"min":null},"maxValue":null}],"booleanRole":"certainty","title":"rust-http comparison benchmark","height":371,"domainAxis":{"direction":1},"legend":"right","focusTarget":"series","useFirstColumnAsDomain":true,"isStacked":false,"tooltip":{"trigger":"none"}},"state":{},"view":{"columns":[{"calc":"stringify","type":"string","sourceColumn":0},1,2,3,4]},"isDefaultVisualization":false,"chartType":"ColumnChart","chartName":"Chart 1"} </script>


<p>You can run the benchmarks yourself. <code>cd comparisons; python run.py</code>. You&rsquo;ll
need to build rust-http first (<code>make</code>), and have go, nodejs, and ab (apache
bench) installed.</p>

<h1>Documentation</h1>

<p>Our documentation hasn&rsquo;t been in the best state in the past. It still isn&rsquo;t
where it should be, but <a href="http://static.rust-lang.org/doc/master/index.html">they have been
reorganized</a>, on top of
seeing the usual work. We&rsquo;re in the process of moving all of the documentation
from the wiki onto that site, to make it easier to find and search. Steve
Klabnik gave a <a href="https://air.mozilla.org/rust-meetup-december-2013/">critical but very constructive
presentation</a> at the Bay
Area meetup about what we are doing wrong and how we can improve. At the same
meetup, Chris Morgan talked about the technologies we use in our documentation
stack. In the long run, the consensus seems to be that reStructuredText and
Sphinx are they way forward. Thanks to the rustdoc rewrite, it will be able to
have first-class status as a documentation backend.</p>

<h1>The Future</h1>

<p>For 0.10, we have <a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/">Dynamically Sized Types
(DST)</a> to
look forward to, as well as the removal of <code>@</code> pointers. <code>box</code>, aka &ldquo;placement
new&rdquo;, along with smart pointer sugar (overloadable dereferencing/borrowing),
should also be in by then. We may also see an actual garbage collector.</p>

<h1>Is Rust Ready Yet?</h1>

<p>Nope. It still has some work to do. 1.0 is estimated before the end of 2014,
though that may slip depending on how things land. An early estimate puts the
release over the summer! We still need a robust package manager. We now have
<a href="http://rust-ci.org/">rust-ci</a>, which makes it easy to keep code up to date,
and know if a library is up to date.</p>

<p>The breaking changes, especially language changes, are slowing down, besides
bug fixes. The standard library is also starting to shake itself out, though
it still has a lot of work before they will be stable. There are currently two
known uses of Rust in production: <a href="http://www.tilde.io/">Tilde</a> is using it in
<a href="https://www.skylight.io/">Skylight</a>, and <a href="http://opendns.com">OpenDNS</a> is
using it for <a href="http://labs.umbrella.com/2013/10/04/zeromq-helping-us-block-malicious-domains/">real-time data
processing</a>.</p>

<p>It has been a good release, and the next will be even better. Want to get
involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.
Want to follow development? I post a <a href="http://cmr.github.io/blog/categories/this-week-in-rust/">weekly
newsletter</a>
summarizing the important changes. There is also a
<a href="http://reddit.com/r/rust">subreddit</a>. Here&rsquo;s to an awesome 0.10!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/11/this-week-in-rust/"/>
    <updated>2014-01-11T16:23:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/11/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>0.9 was released this week, bringing with it a restructuring of our
documentation and the usual influx of attention.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>57 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Float literals are now <a href="https://github.com/mozilla/rust/pull/11480">more
strict</a>. Octal and hex float
literals are no longer allowed.</li>
<li>A nasty soundness bug <a href="http://www.reddit.com/r/rust/comments/1uxbgm/moving_ownership_via_borrowed_reference/">reported on
reddit</a>
<a href="https://github.com/mozilla/rust/pull/11465">has been fixed</a>.</li>
<li><code>print</code> and <code>println</code> <a href="https://github.com/mozilla/rust/pull/11416">have been removed from the
prelude</a>. Use the <code>print!</code> and
<code>println!</code> macros instead.</li>
<li><code>Rc</code> <a href="https://github.com/mozilla/rust/pull/10926/files">now supports weak
pointers</a>, and it no longer
requires the wrapped type to be Freeze or Send. That is, it no longer
statically avoids cycles using the type system. It was found to be too
restrictive. The only constructor is now <code>Rc::new</code>.</li>
<li>The <code>eof</code> method on <code>Reader</code> <a href="https://github.com/mozilla/rust/pull/11376">has been
removed</a>, as only files really
know when they are at eof. It is now a method on the types it makes sense for
<a href="https://github.com/mozilla/rust/pull/11437">such as <code>MemReader</code> and
<code>BufReader</code></a>.</li>
<li><code>std::num</code> is seeing some simplification. <a href="https://github.com/mozilla/rust/pull/11412">Many traits have been merged into
<code>Real</code></a>.</li>
<li>Similarly, <a href="https://github.com/mozilla/rust/pull/11402"><code>ApproxEq</code> has been
removed</a>.</li>
<li>The <code>std::io::Decorator</code> trait <a href="https://github.com/mozilla/rust/pull/11394">has been
removed</a>.</li>
<li>A nasty resolve bug <a href="https://github.com/mozilla/rust/pull/11370">has been
fixed</a>. Importing a trait made it
available to all child modules; now it is only available in the module that
imported it, as it should be.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/10854">method renaming</a> has been
done to <code>Option</code>. <code>map_default</code> is now <code>map_or</code> and <code>mutate_default</code> is now
<code>mutate_or_set</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>A <a href="https://github.com/mozilla/rust/pull/11329">lint for unnecessary casts</a>
has been added. It is set to allow by default.</li>
<li><a href="https://github.com/mozilla/rust/pull/11342">Mutable iterators</a> have been
added to <code>std::trie</code>.</li>
<li>A bug in rustpkg preventing it from finding any static libraries, and
libnative, <a href="https://github.com/mozilla/rust/pull/11338">has been fixed</a>.</li>
<li><code>u64_from_be_bytes</code> <a href="https://github.com/mozilla/rust/pull/11448">has seen some
optimization</a>, it is 3-6x faster.</li>
<li><code>box</code> has been
<a href="https://github.com/mozilla/rust/pull/11055">kinda-implemented</a>. <code>box(GC)</code> and
<code>box(HEAP)</code> now work.</li>
<li>Typed arenas <a href="https://github.com/mozilla/rust/pull/11358">have been added</a>.
They&rsquo;re really fast!</li>
<li><code>stderr</code>/<code>stdout</code> is now
<a href="https://github.com/mozilla/rust/pull/11353">per-task</a>, which will allow
capturing or redirecting a task&rsquo;s output.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Andrew Chin</li>
<li>Clinton Ryan</li>
<li>Derek Chiang</li>
<li>Mick Koch</li>
<li>Nick Cameron</li>
<li>Niels langager Ellegaard</li>
<li>Nif Ward</li>
<li>Raphael Catolino</li>
<li>Rich Lane</li>
<li>Dzmitry Malyshau</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-07">weekly
meeting</a>
discussed Windows XP support, bounded channels, the Rc changes, using guard
pages, loadable syntax extensions, and functions that fail.</p>

<h1>Quotes of the Week</h1>

<p>&ldquo;[I] find it easy to get lost in this file.&rdquo; &ndash;
<a href="https://github.com/mozilla/rust/pull/11472/files#r8810362">kud1ing</a> on
<code>libc.rs</code>
&ndash; &ldquo;A language is more than just semantics, syntax, and an implementation &ndash;
it&rsquo;s about an ecosystem and a community. Without that it dies.&rdquo; &ndash;
<a href="https://botbot.me/mozilla/rust-internals/msg/9689869/">bjz</a></p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>The Servo tree has been mostly frozen for a large part of this week, as the
nearly month-long Rust upgrade is finally getting close and we wanted to avoid
additional rebases. We did land 7 PRs, many with associated fixes, however.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Kim fixed anonymous boxes and images disappearing during line
breaking in <a href="https://github.com/mozilla/servo/pull/1461">#1461</a> and
<a href="https://github.com/mozilla/servo/pull/1463">#1463</a>.</li>
<li>Patrick Walton fixed a race issue with window sizes and script code in
<a href="https://github.com/mozilla/servo/pull/1409">#1409</a>.</li>
<li>Jaeman Park landed CSS parsing and selector matching for pseudo element
:before and :after in <a href="https://github.com/mozilla/servo/pull/1464">#1464</a>.</li>
<li>Bruno Abinder made some DOM additions in
<a href="https://github.com/mozilla/servo/pull/1466">#1466</a> and
<a href="https://github.com/mozilla/servo/pull/1472">#1472</a>.</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-06">meeting</a>, we
discussed the upcoming workweek, the Rust upgrade, ARM buildbots for Rust and
Servo, and some research we&rsquo;re doing into the breakdown of page load.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.meetup.com/Rust-Bay-Area/events/153909222/">Bay Area Rust Meetup:
1/28/2014</a></li>
<li><a href="http://www.youtube.com/watch?v=gfCtbGiHcg0">The Rust language: memory, ownership and
lifetimes</a>,
Niko&rsquo;s presentation at Linux.conf.au</li>
<li><a href="http://www.reddit.com/r/rust/comments/1uy7rt/an_appeal_for_correct_capable_futureproof_math_in/">An appeal for correct, capable, future-proof math in nascent programming
languages</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1v10ac/thehydroimpulserustwebsite/">An in-progress redesign of the
website</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1v104e/combining_rusthttp_with_routerecognizerrs_to/">Combining rust-http with route-recognizer.rs to create routable
HTTP</a></li>
<li><a href="https://github.com/mneumann/rust-toml">A TOML configuration file parser</a></li>
<li><a href="http://llvm.lyngvig.org/Articles/Mapping-High-Level-Constructs-to-LLVM-IR">Mapping High-Level Constructs to LLVM
IR</a>,
a peek at what drives the underbelly of the compiler</li>
<li><a href="https://github.com/mozilla/rust/pull/11399">Add garbage collector to
<code>std::gc</code></a></li>
<li><a href="https://github.com/HeroesGrave/rust-workspace">rust-workspace</a>, a simple
shell to make maintaining Rust projects easier</li>
<li><a href="http://www.reddit.com/r/rust/comments/1usupv/semantic_code_browser_for_rust/">Semantic code browser for
Rust</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/01/09/rvalue-lifetimes-in-rust/">Rvalue Lifetimes in
Rust</a></li>
<li><a href="http://steveklabnik.github.io/nobody_knows_rust/#/">Nobody Knows Rust &ndash; Steve Klabnik&rsquo;s slides</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007753.html">0.9 Release
Announcement</a></li>
<li><a href="https://github.com/cmr/rust-logo-3d/blob/master/rlogo.stl">A 3d-printable Rust
logo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Old Things]]></title>
    <link href="http://cmr.github.io/blog/2014/01/06/reading-old-things/"/>
    <updated>2014-01-06T19:00:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/06/reading-old-things</id>
    <content type="html"><![CDATA[<p>I&rsquo;m learning Haskell. I&rsquo;m doing this for many reasons, but the most important
is to expand my knowledge and form a more principled understanding of
languages. So, I&rsquo;m reading a <a href="http://www.stanford.edu/class/cs242/readings/backus.pdf">paper</a>. It&rsquo;s a very good paper, but the
thing most striking about it is its age. 1977! My father was five. It occurred
to me that I read a lot of old things. I grab interesting books from book
sales, yard sales, thrift shops, and the &ldquo;Transfer Station &amp; Recycling Center&rdquo;
(aka the dump). Most of the time they&rsquo;re garbage, but I sometimes find true
gems. It&rsquo;s how I discovered Plato&rsquo;s <em>The Republic</em>, among other things. The
best part about reading older books is that they often strip away decades of
intellectual cruft that can accumulate around a subject, be it jargon or just
gross mutation of ideas.  Especially reading some foundational papers, or
books that were written when a subject was still young and exciting, a very
good historical perspective can be developed. I often find a conceptual
clarity that most new books simply don&rsquo;t give.</p>

<p>On the other hand, I&rsquo;ve yet to find old code that was truly worth reading. Old
code is frequently buggy, poorly written, or just plain unfinished. No code
remains dormant for too long. The only exception I can think of is TeX.</p>

<p>Observation bias? Perhaps. It could be that that&rsquo;s the only reason these books
have survived so long. Try reading some older books and papers. <a href="mailto:corey@octayn.net">Let me know
how it goes</a>. Have some suggestions for great books
and papers, old or others? I&rsquo;d like to hear those too.</p>
]]></content>
  </entry>
  
</feed>
