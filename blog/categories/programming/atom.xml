<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Ramblin's]]></title>
  <link href="http://cmr.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2013-07-05T11:36:09-04:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The State of Rust 0.7]]></title>
    <link href="http://cmr.github.io/blog/2013/07/05/the-state-of-rust/"/>
    <updated>2013-07-05T09:51:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/07/05/the-state-of-rust</id>
    <content type="html"><![CDATA[<p>Given the influx of newcomers from the 0.7 release, I thought it&rsquo;d be a good
idea to summarize the condition of Rust, its libraries, and its documentation.
bstrie said it best I think, &ldquo;basically, any question of the form &lsquo;is there a
reason for this stupid and terrible thing&rsquo; is &lsquo;no, sorry, we&rsquo;re working on
it&rsquo;&nbsp;&rdquo;.</p>

<!-- more -->


<h1>Iterators</h1>

<p>External iterators are a main feature of the 0.7 release, and there is ongoing
work to remove all of the library features that use internal iterators. Most
of them are gone, and there are few uses of internal iterators. However, they
are clunky to use. The <code>for</code> loop semantics are going to change from internal
iteration to external iteration, but they are still internal iteration right
now, which means the <code>advance</code> adaptor is necessary for most uses of
iterators. Additionally, the <code>iter()</code> helper function is necessary to actually
return an iterator. This will be obviated by an <code>Iterable</code> trait that many
things will hopefully implement. Due to
<a href="https://github.com/mozilla/rust/issues/5898">5898</a>, many methods are oddly
named or have an underscore appended (ie, <code>transform</code> instead of <code>map</code>,
<code>position_</code> instead of <code>position</code>).</p>

<h1>IO</h1>

<p>IO has been a bit of a losing proposition since at least 0.2. The interface is
very primitive and inefficient. It requires using <code>@Trait</code> objects (<code>@Reader</code>
/ <code>@Writer</code>). It&rsquo;s also very undocumented. But the situation isn&rsquo;t going to
improve much because all of that code is getting torn out when brson/the
interns finish their work on the new runtime. On the plus side, we&rsquo;ll have
shiny new IO when they&rsquo;re done! If you want to contribute, there&rsquo;s plenty of
work to be done in this area:</p>

<ul>
<li><a href="https://github.com/mozilla/rust/issues/6169">issue 6169</a></li>
<li><a href="https://github.com/mozilla/rust/issues/6850">issue 6850</a></li>
<li><a href="https://github.com/mozilla/rust/issues/4419">issue 4419</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-May/004305.html">brson&rsquo;s status report for June</a></li>
</ul>


<h1>Compiler</h1>

<p>The compiler is still buggy and inefficient. Lots of things work, but lots of
things don&rsquo;t. There&rsquo;s still some resolve bugs (the one mentioned above, as
well as some others, and perpetually poor error messages), default methods
don&rsquo;t work, debuginfo is incomplete, the compiler has quadratic codegen when
using <code>match</code>, so on and so forth. There&rsquo;s a lot of work to be done here but
it&rsquo;s not easy. I&rsquo;m writing a series about the compiler that should help new
contributors get started and grok how it all fits together. The only thing
making Rust usable right now is LLVM&rsquo;s fantastic optimization. Our no-opt
builds run slower than our opt builds under Valgrind. Ponder that for a
minute.</p>

<h1><code>rustpkg</code></h1>

<p>rustpkg is still heavily in-progress and unfinished. It&rsquo;s usable, but not
everything is implemented, and the documentation is incomplete. It&rsquo;s rather
unintuitive to use right now, but it does work! Read the
<a href="https://github.com/mozilla/rust/blob/master/doc/rustpkg.md">manual</a> carefully
if you want to use it.</p>

<h1>Documentation</h1>

<p>Documentation is poor. <code>rustdoc</code> is really bad, which doesn&rsquo;t help. I&rsquo;m
working on a new rustdoc (<a href="http://rustlog.octayn.net">I log my progress
here</a>), but it won&rsquo;t be ready for some weeks. Lots
of things are undocumented or near impossible to find because of how bad
<code>rustdoc</code> is. The tutorials need lots of work, and a guided tour of the
libraries would be nice, as well as a &ldquo;Rust By Example,&rdquo; showing how to
accomplish common goals. These aren&rsquo;t really hard to do, it&rsquo;s just that nobody
has done them yet.</p>

<h1>Libraries</h1>

<p>There are few robust libraries or bindings to libraries, for anything, besides
what is in std/extra. There&rsquo;s the stuff servo uses (glfw, skia, sdl), and an
opengl binding somewhere, but beyond that, you&rsquo;re on your own. The
<a href="https://github.com/crabtw/rust-bindgen">rust-bindgen</a> tool can help with
wrapping a C library. There is no GUI library available yet, no real
networking. It&rsquo;s easy to wrap a C library, you just need to be careful with
your <code>unsafe</code> blocks. Once again, these things aren&rsquo;t hard, they just haven&rsquo;t
been done yet.</p>

<h1>The future</h1>

<p>Basically everything is heavily WIP, but it&rsquo;s constantly improving. We always
need more contributors, ask in IRC if you&rsquo;re interested. Rust 0.7 is pre-alpha
quality, IMO. It would be silly to use Rust for something important, but don&rsquo;t
let that stop you from trying to do something ambitious. If you feel Rust is
still too young to get involved, but you want to track its progress, I write
<a href="http://cmr.github.io/blog/categories/this-week-in-rust/">This Week in Rust</a>,
which is an easy way to track our progress. 1.0 is tentatively planned for
first-quarter 2014, last I heard, and I don&rsquo;t think that is out of reach. 1.0
corresponds to &ldquo;maturity #2&rdquo; at the absolute minimum (the maturiy levels are
listed <a href="https://github.com/mozilla/rust/issues/milestones">as milestones</a>).</p>

<p>But don&rsquo;t be discouraged. It was far worse before! Rust is in a good position,
it&rsquo;s just not quite all there yet. This post may seem pessimistic, but the
progress Rust has made is astonishing. Here&rsquo;s to a wonderful 0.8!</p>

<h1>Some links</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/">Rust subreddit</a></li>
<li><a href="https://mail.mozilla.org/listinfo/rust-dev">Mailing list</a></li>
<li><a href="http://blog.gmane.org/gmane.comp.lang.rust.devel">Mailing list archives</a></li>
<li><a href="http://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust">IRC
Channel</a>
(it&rsquo;s <code>#rust</code> on irc.mozilla.org)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/06/29/this-week-in-rust/"/>
    <updated>2013-06-29T12:26:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/29/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the fourth issue of <em>This Week in Rust</em>, a weekly overview of Rust and its community.</p>

<p><code>0.7</code> is being cut soon (today, I think). There are preliminary release notes <a href="https://github.com/mozilla/rust/blob/master/RELEASES.txt">on
GitHub</a>. The tree has been quite calm, with regards to
breakage. Cycle time is still high, but at least when things land they don&rsquo;t break master.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>Issue churn this week was -1. Yay! Issue churn this month was -47. 61 people pushed 1,080 commits, changing 2,117 files
and adding a total of 53347 lines.  The top 10 committers were pcwalton, brson, dbaupp, strcat, bblum, nmatsakis,
acricto, Blei, me (cmr), and aatch.</p>

<p>Much of the work this week was cleanup or rebases of older PRs that just hadn&rsquo;t made it in yet.</p>

<h2>Notable additions, bugfixes, and cleanup</h2>

<ul>
<li>Eridius has finished (I think!) the last bit of UNIX <a href="https://github.com/mozilla/rust/pull/7436">terminal support</a>,
adding fallback and smarter detection. It should work in 8-color terminals now too.</li>
<li>pcwalton <a href="https://github.com/mozilla/rust/pull/7451">rewrote each_path</a>, with the goal of future performance
enhancements.</li>
<li>tjc has done a <a href="https://github.com/mozilla/rust/pull/7397">bunch</a> of
<a href="https://github.com/mozilla/rust/pull/7403">rustpkg</a> work.</li>
<li>aatch did some <a href="https://github.com/mozilla/rust/pull/7272">trans cleanup</a>.</li>
<li>gifnksm added <a href="https://github.com/mozilla/rust/pull/7414"><code>max_by</code> and <code>min_by</code></a> methods to <code>IteratorUtil</code> for getting
the largest/smallest value in an iterator given a score function.</li>
<li>brson got a fix that <a href="https://github.com/mozilla/rust/pull/7111">releases large stacks</a> after they are used to lower
memory usage.</li>
<li>mw has a bunch of <a href="https://github.com/mozilla/rust/pull/7432">debuginfo</a> work, as well as <a href="https://github.com/mozilla/rust/pull/7255">docs and
cleanup</a>.</li>
<li>Blei did an <a href="https://github.com/mozilla/rust/pull/7254">intrinsic overhaul</a>.</li>
<li>acrichto implemented <a href="https://github.com/mozilla/rust/pull/7291"><code>static mut</code></a>, for globals. Using them requires
unsafe code.</li>
<li>DaGenix <a href="https://github.com/mozilla/rust/pull/7207">cleaned up and extended</a> the SHA code.</li>
<li>acrichto renamed <code>.rc</code> files to <code>.rs</code>. <code>.rc</code> is deprecated and functionally equivalent to <code>.rs</code>, all new code should
use it. He also <a href="https://github.com/mozilla/rust/pull/7371">added</a> a <code>warnings</code> lint attribute for enabling/disabling
warnings in bulk.</li>
<li>indutny added <a href="https://github.com/mozilla/rust/pull/7257"><code>mman</code> (including <code>mmap</code>)</a> FFI.</li>
<li>dbaupp found a <a href="https://github.com/mozilla/rust/pull/7297">curious performance win</a> by changing some ordering around,
while also enabling conditionally defined macros and macro expansion to items with <code>#[cfg]</code> attributes.</li>
<li>Luqman <a href="https://github.com/mozilla/rust/pull/7410">fixed by-value self</a>.</li>
<li>acrichto expanded the <code>deriving(ToStr)</code> code to use <code>ToStr</code> on fields rather than using <code>fmt!("%?", x)</code>.</li>
<li>Blei <a href="https://github.com/mozilla/rust/pull/7214">fixed a lot of problems</a> with owned trait objects (<code>~Trait</code>).</li>
<li>sully has <a href="https://github.com/mozilla/rust/pull/7471">landed some default method fixes</a></li>
</ul>


<h2>Breaking Changes</h2>

<ul>
<li>As usual, <a href="https://github.com/mozilla/rust/pull/7274">a</a> <a href="https://github.com/mozilla/rust/pull/7334">bunch</a>
<a href="https://github.com/mozilla/rust/pull/7373">of</a> <a href="https://github.com/mozilla/rust/pull/7319">iterator</a> work.</li>
<li>pcwalton renamed Owned to Send and Const to Freeze, better reflecting their actual semantics.</li>
<li>He also disallowed <code>mut</code> from distributing over bindings. For example, the following code no longer works: <code>let mut
(a, b) = (c, d)</code>.</li>
<li>dbaupp <a href="https://github.com/mozilla/rust/pull/7430">converted</a> many vector functions to methods. He has a <a href="https://github.com/mozilla/rust/pull/7487">second
part</a> in line.</li>
<li>Luqman renamed the <code>finalize</code> method in the <code>Drop</code> trait to <code>drop</code>.</li>
</ul>


<h2>Other changes</h2>

<p>bblum did some trait/fn/closure bounds
<a href="https://github.com/mozilla/rust/pull/7314">here</a> and
<a href="https://github.com/mozilla/rust/pull/7354">here</a>, but I don&rsquo;t really
understand what they do or their significance. He said:</p>

<p><blockquote><p>it changes the way traits/closures and captured data fulfill kind bounds, so<br/>you can restrict or loosen the requirements instead of having the fixed<br/>defaults of &ldquo;can only capture Send things in ~fn/~Trait&rdquo;</p></p><p><p>one example is that you can add the extra requirement of Freeze, so you can<br/>put existential data inside of ARCs</p></p><p><p>see <a href="https://github.com/mozilla/rust/blob/master/src/test/run-pass/trait-bounds-in-arc.rs">https://github.com/mozilla/rust/blob/master/src/test/run-pass/trait-bounds-in-arc.rs</a></p></p><p><p><a href="http://smallcultfollowing.com/babysteps/blog/2013/06/11/data-parallelism-in-rust/">http://smallcultfollowing.com/babysteps/blog/2013/06/11/data-parallelism-in-rust/</a><br/>is another, more complicated but less contrived, example for how they would be<br/>useful</p></blockquote></p>

<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-25">Tuesday meeting</a>
mainly discussed <code>@mut</code> and iterators, as well as some minor 0.7 releng stuff.
I suggest reading the <code>@mut</code> discussion yourself, but essentially it revolves
around it not quite fitting into the language, and that it could be easily
punted to a library. The iterator discussion was not notable.</p>

<h1>Discussion + Blog posts</h1>

<ul>
<li><a href="http://static.rust-lang.org/doc/tutorial-container.html">New container/iterator tutorial</a></li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/4528">&ldquo;Language support for external iterators&rdquo;</a></li>
<li><a href="http://spin.atomicobject.com/2013/06/25/rust-language/">&ldquo;Rust gets a lot of things right&rdquo;</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ha3yi/planning_a_project_in_rust/">&ldquo;Planning a project in rust?&rdquo;</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004572.html">&ldquo;Memory layout of types&rdquo;</a></li>
<li><a href="http://michaelwoerister.github.io/2013/06/28/Status-Update-2.html">mw&rsquo;s second status report</a></li>
</ul>


<h1>External projects</h1>

<ul>
<li>QuickCheck for Rust.

<ul>
<li><a href="https://github.com/blake2-ppc/qc.rs">GitHub</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1h0217/mockup_of_quickcheck/">Reddit discussion</a></li>
</ul>
</li>
<li>RustGnuplot (<a href="https://github.com/SiegeLord/RustGnuplot">GitHub</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I got started hacking rustc, and how you can too!]]></title>
    <link href="http://cmr.github.io/blog/2013/06/23/how-i-got-started-with-rust/"/>
    <updated>2013-06-23T08:06:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/23/how-i-got-started-with-rust</id>
    <content type="html"><![CDATA[<p><em>This is the first part of a planned series about <code>rustc</code>, the Rust compiler</em></p>

<p>I remember first hearing about Rust during the summer of 2011. In fact, I
remember the exact moment. I was at MIT, doing their Junction program. It was
during a seminar about semiconductors. I remember browsing through the source on github,
getting lost, and going home.</p>

<!-- more -->


<p>Fast forward to two months ago. A <a href="http://tech.slashdot.org/story/13/04/03/1646234/mozilla-and-samsung-collaborating-to-bring-new-browser-engine-to-android">slashdot post</a> appears, bringing Rust
back to the forefront of my consciousness. By this point I&rsquo;d actually gained
some programming chops, gotten a job, etc. I read through the Wikipedia
article, though &ldquo;hey, this looks like it has potential,&rdquo; and forgot about it.</p>

<p>Fast forward a week or two. The <a href="http://www.matasano.com/articles/crypto-challenges/">matasano crypto challenges</a> were linked
on HN. &ldquo;Our friend Maciej says these challenges are a good way to learn a new
language, so maybe now&rsquo;s the time to pick up Clojure or Rust.&rdquo; And pick up
Rust I did. Rust was a pretty easy language to get started with, with my
predominantly Python, C, and Lua background. Especially for the crypto
challenges, which start off fairly basic.</p>

<h1>First, some warnings:</h1>

<p>Rust is pre-alpha software. Backwards incompatible changes happen <em>weekly</em>,
either in the libraries, or in the language.  It&rsquo;s probably best to not write
any &ldquo;serious&rdquo; code in Rust right now, unless you plan on fixing it every few
weeks to keep up with the language. The nice part about contributing code to
the compiler is that when someone changes the language or a library, it is
their job to fix the code that uses it.</p>

<p>Make sure to use the <code>master</code> branch, and <strong>use the doc links under &ldquo;Trunk&rdquo;.
It will save you pain.</strong> Nothing is worse than accidentally using the 0.6
documentation and finding that a method has been renamed or removed, and
getting confused when the build fails halfway through.</p>

<p><strong>The Rust compiler is poorly written.</strong> This is an artifact of being written
in Rust, which, as stated, changes rapidly. Some code is very old, and uses
very old idioms, or doesn&rsquo;t use newer language features that would be cleaner
and easier to read. If you notice this, try and fix it! If you notice it, that
means you already more-or-less know what needs to be done to clean it up a
bit. If the change is very invasive, it&rsquo;s probably best to open an issue and
let an experienced dev deal with it. An example of a cleanup is <a href="https://github.com/mozilla/rust/pull/7315">pull request
7315</a>, which cleaned up indentation
and replaced some <code>if</code>s with <code>match</code>es.</p>

<p>Do not, repeat, <em>not</em>, use the <code>rustc</code> code as a source of &ldquo;how to write
Rust.&rdquo; Almost all of it is bad code. I don&rsquo;t even know where to tell you to
look to find consistently good code.  The upside is that generally reviewers
will catch suboptimal code, and suggest improvements.  <a href="https://github.com/mozilla/rust/pull/7207">This pull request, for
example</a>, used some old Rust
idioms, which the reviewers suggested fixes for. So feel free to get
elbow-deep in code without worrying <em>too</em> much about whether the code you&rsquo;re
writing is good or bad. General guidelines: avoid <code>@</code> always, avoid <code>~</code>
usually, use <code>Option</code> and <code>Result</code>, handle errors. That will guide you
straight most of the time, and by the time you know when to ignore those, you
probably already know what good Rust code is.</p>

<h1>Getting started</h1>

<p>The first thing I did was, of course, go to the <a href="http://www.rust-lang.org/">home page</a>. I read the
feature summary (which seemed mostly unchanged from when I first saw it.
Indeed, looking in the wayback machine, it is mostly unchanged). I read the
example, and clicked <a href="http://static.rust-lang.org/doc/tutorial.html">&ldquo;tutorial&rdquo;</a> over on the left. I built the compiler
while doing this. There are instructions for building Rust over at <a href="https://github.com/mozilla/rust/wiki/Note-getting-started-developing-Rust">the wiki</a>.
It&rsquo;s a lot easier to get started if you&rsquo;re using Linux or Mac, though not
impossible on Windows (just a bit more setup and waiting).</p>

<p>The tutorial left me confused and alone, and I&rsquo;m sure it did the same to
you. But it gave me enough information that I could write a base64 encode and
decoder, although I constantly referenced the tutorial. By this point I had
moved on to the second matasano challenge, and I found my first compiler bug:
<a href="https://github.com/mozilla/rust/pull/6072">really poor error messages</a>. Of course I had to fix this! Error
messages are easy, right?</p>

<p>Yes and no. With a codebase as large and complex as a compiler, there are many
layers of stuff you need to pick apart to figure out the cause and fix of an
issue. In my case, it was easy, just grep for the error message. The fix,
however, was more complex. I had to figure out how to turn a &ldquo;span&rdquo; (the
compiler&rsquo;s way of matching up an AST node with a chunk of source code) in a
string. Often you&rsquo;ll need to go digging through other files to figure out what
you can do, what data structures there are, etc.</p>

<p><strong>Rust makes this easy!</strong> There are no IDEs or any fancy tools, but Rust
source is insanely <code>grep</code>able. You see a method call like
<code>parser.parse_ident(...)</code>, you just need to grep for <code>fn parse_ident</code>.
Of course, actually understanding what the method does is a whole new can of
worms&hellip;</p>

<h1>Picking an issue to fix</h1>

<p>I think the best way to pick an issue to fix is to fix a bug you encounter
yourself. Ask in IRC about it, often someone will be online that either knows
about it and can point you in the right direction, or at the very least help
reproduce, debug, and sift through the issue trcker.</p>

<p>There is the <a href="https://github.com/mozilla/rust/issues?labels=E-easy"><code>E-easy</code></a>
label on certain issues. This are issues that shouldn&rsquo;t take too much trickery
to get done, though they might take some time to get &ldquo;acclimated&rdquo; to the
codebase. <code>E-easy</code> doesn&rsquo;t mean fast, it means easy. It might be tedius or
take non-trivial amounts of effort, but it shouldn&rsquo;t require overarching
design issues or a lot of knowledge about rust or rust internals.</p>

<p>Documentation always needs writing. Open a random file from libstd or
libextra, look for functions, structs, enums, and traits that aren&rsquo;t
documented. You&rsquo;ll get to see a bunch of Rust code, probably using features
you wouldn&rsquo;t otherwise see writing &ldquo;normal&rdquo; code.</p>

<h1>After you fix it</h1>

<p>Once you fix the issue, open a pull request. See <a href="https://help.github.com/articles/using-pull-requests">GitHub&rsquo;s
help</a> for how to do
this. If you get stuck or need additional help, jump onto IRC
(<a href="http://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust">webchat</a>)
and ask. Someone will have to review your changes, ask &ldquo;r?
$link_to_pull_request&rdquo; in IRC to expedite the process.</p>

<p>Feel free to ping me (cmr) on IRC if you have any questions or problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/06/22/this-week-in-rust/"/>
    <updated>2013-06-22T05:21:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/22/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the third issue of <em>This Week in Rust</em>, a weekly overview
of Rust and its community.</p>

<p>It has come to my attention that Github does not categorize some
merged-by-bors pull requests as &ldquo;merged&rdquo; and instead categorizes it as
&ldquo;closed&rdquo;. This skews the numbers and also the PRs that I looked through for
inclusion into twir. I&rsquo;ll no longer be including issue churn/PR numbers, and I
hope I didn&rsquo;t miss any import PRs in the last two issues.</p>

<!-- more -->


<h1>What&rsquo;s cooking in incoming?</h1>

<p>The last of the tree breakage has been cleaned up. The mysterious stack
corruption was traced down by Blei to occur in jemalloc. It has been disabled
until the real cause of the error is found. A bunch more buildbot
configurations have been turned on for auto, to fend off more breakage. The
tree is open, and aatch got out a new snapshot!</p>

<p>Most of the work this week is cleanup and preparation for 0.7, but since the
tree has been closed (and the extra auto buildbots lengthen the time it takes
for a PR to be tested for the day it has been open), not much has landed these
past few days, but a bunch happened earlier this week.</p>

<h2>Notable additions, bugfixes, and cleanup</h2>

<ul>
<li>doener made compiles faster by emitting less useless copies and allocations
in <a href="https://github.com/mozilla/rust/pull/7259">7259</a></li>
<li>aatch landed <a href="https://github.com/mozilla/rust/pull/7124">part 1</a> and <a href="https://github.com/mozilla/rust/pull/7182">part
2</a> of his huge trans refactor
effort, which make trans faster and less terrible.</li>
<li>sully got <a href="https://github.com/mozilla/rust/pull/7203">default methods</a>
less broken</li>
<li>yichoi landed a <a href="https://github.com/mozilla/rust/pull/7128">bunch</a> of
Android fixes.</li>
<li>vadimcn has <a href="https://github.com/mozilla/rust/pull/7134">fixed debuginfo</a>,
which is super amazing. This makes it a lot easier for the GSoC student (mw)
to get started.</li>
<li>doener has <a href="https://github.com/mozilla/rust/pull/7186">fixed</a> some
pathological behavior in how codegen creates cleanup blocks. This makes the
IR better, reducing compile time, and also allowing better optimization,
reducing binary size.</li>
</ul>


<p><blockquote><p>They reduce compile times by about 10% in total.</p><footer><strong>@dotdash <a href="https://github.com/mozilla/rust/pull/7259">https://github.com/mozilla/rust/pull/7259</a></strong></footer></blockquote></p>

<p><blockquote><p>Reduces the size of librustc by about 5% and the time required to build<br/>it by about 10%.</p><footer><strong>@dotdash <a href="https://github.com/mozilla/rust/pull/7186">https://github.com/mozilla/rust/pull/7186</a></strong></footer></blockquote></p>

<p><blockquote><p>The resulting code for rustc is about 13% faster (measured up to and<br/>including the &ldquo;trans&rdquo; pass) and the resulting librustc is about 5%<br/>smaller.</p><footer><strong>@dotdash <a href="https://github.com/mozilla/rust/pull/7154">https://github.com/mozilla/rust/pull/7154</a></strong></footer></blockquote></p>

<h2>Breaking changes</h2>

<p>strcat <a href="https://github.com/mozilla/rust/pull/7263">continues</a>
<a href="https://github.com/mozilla/rust/pull/7162">work</a> with iterators. The changes
that landed are vector cleanups. Probably most importantly, the <code>each</code> and
<code>eachi</code> methods are being removed. The <code>eachi</code> removal landed but the <code>each</code>
one broke bors, so it&rsquo;s currently in limbo (<strong>UPDATE</strong> 6/23/2013: it landed).
The current replacement is:</p>

<p><code>
// each
for your_vec.iter().advance |element| {
  ...
}
// eachi
for your_vec.iter().enumerate().advance |(i, element)| {
  ...
}
</code></p>

<p>Once the rest of the iterator work is hashed out and lands, it will just be</p>

<p><code>
// each
for your_vec |element| {
  ...
}
// eachi
for your_vec.enumerate() |(i, element)| {
  ...
}
</code></p>

<p>although the syntax might be slightly different (<code>for element in your_vec</code> is
my favorite proposal).</p>

<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-18">Tuesday
meeting&rsquo;s</a>
main topics were once fn&rsquo;s and how namespaces work. For once fn&rsquo;s, graydon
says &ldquo;I&rsquo;m concerned with adding new features and I want to see if we can live
without it, I understand it is common,&rdquo; not yet making a decision to include
them in the language.</p>

<h1>Meetups</h1>

<ul>
<li>tjc&rsquo;s pre-talk and talk, &ldquo;Rust: A Friendly Introduction&rdquo; went very well. The
<a href="http://catamorphism.org/Writing/Rust-Tutorial-tjc.pdf">slides</a> are up, and
a recording is coming soon (hopefuly). tjc says the slides aren&rsquo;t as
understanable without the audio of the talk.</li>
<li>nmatsakis has expressed willingness/interest in a Boston meetup sometime. If
you&rsquo;re interested, contact him on IRC or the ML.</li>
</ul>


<h1>Notable discourse and external projects</h1>

<ul>
<li><a href="http://maniagnosis.crsr.net/2013/06/mmap-and-rust-foreign-function-interface.html">mmap and the Rust FFI</a>
(indutny is working on mman bindings in libc, for the record. will mention
in next week&rsquo;s twir when it lands)</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004480.html">code generation and rustc speed</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1gs93k/rust_for_game_development/">Rust for game development?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1grj61/feed_us_some_low_hanging_fruit/">Feed us some low hanging fruit!</a></li>
<li><a href="http://aatch.github.io/blog/2013/06/19/paying-technical-debt-in-rustc/">Paying Technical Debt in rustc</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1gpbcs/what_issues_in_rust_today_effect_you_most/">What issues in Rust today effect (sic) you most?</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004520.html">rustdoc rewrite and redesign</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1gmac5/linux_rustbench_a_tool_for_profiling_memory_usage/">rust-bench: a tool for profiling memory usage</a></li>
</ul>


<h1>Other announcements</h1>

<ul>
<li>Michael Woerister (mw), the GSoC student working on debug info, has begun
work. His <a href="http://michaelwoerister.github.io/">project log</a> will be updated
weekly. I&rsquo;m looking forward to a much better debug experience.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week In Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/06/15/this-week-in-rust/"/>
    <updated>2013-06-15T22:00:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the second issue of <em>This Week In Rust</em>, a weekly overview
of Rust and its community. I&rsquo;ll be covering what&rsquo;s cooking in incoming,
meeting summaries, meetups, and anything else pertinent.</p>

<p>I&rsquo;ve decided to stop using real names and use irc/github names, simply because
that is how I, and most everyone, interacts in the community.</p>

<!-- more -->


<h1>What&rsquo;s cooking in incoming?</h1>

<p>There&rsquo;s been a lot of breakage on incoming this week, with jemalloc breaking
32bit cross-compilation as well as random segfaults and stack corruption of
unknown cause.  Some heroics by the core devs have got it mostly cleaned up,
though the tree is still rather chaotic. Meanwhile a handful of performance
improvements have landed, and achricto rewrote <code>rusti</code>.</p>

<p>There were 17 pull requests merged this week. Total issue churn (excludes pull
requests) this week was +2 (this excludes the 38 pull requests that were
closed when incoming was killed).</p>

<h2><code>incoming</code> branch annihilated</h2>

<p>Goodbye <code>incoming</code>, hello <code>master</code>! This change, long in coming, unfortunately
closed all open PRs. Start doing your development against <code>master</code> rather than
incoming.</p>

<h2>Notable additions, bugfixes, and cleanups</h2>

<p>There&rsquo;s a concerted effort to remove duplicate freestanding functions where
possible.</p>

<ul>
<li>In <a href="https://github.com/mozilla/rust/pull/6986">6986</a> bjz and jensnockert have cleaned up the numeric code some
more, adding methods for existing things like <code>sin</code>, as well as adding a
bunch of interpolation stuff.</li>
<li>steven_is_false added prototype dynamic library loading support in
<a href="https://github.com/mozilla/rust/pull/7027">7027</a>, which should remove a lot of pain for people looking for
easy dynamic loading. It currently doesn&rsquo;t work on Windows, so if you can
sling Windows code, help would be appreciated!</li>
<li>In <a href="https://github.com/mozilla/rust/pull/7029">7029</a> luqmana allows having multiple impl&rsquo;s add static methods,
which previously did not work.</li>
<li>Eridius stepped up to <a href="https://github.com/mozilla/rust/pull/7133">fix the terminfo code</a>, colors should be
arriving to more people soon.</li>
<li>SiegeLord <a href="https://github.com/mozilla/rust/pull/7077">improved the CSS</a> used by rustdoc with <em>huge</em> improvements.</li>
<li>sully has gotten default methods working for the most part, he is still
testing cross-crate edge casses.</li>
<li>vadimcn <a href="https://github.com/mozilla/rust/pull/7134">has fixed debuginfo</a>, and supposedly the GSoC intern is
getting started on improving it next week.</li>
<li>doener has got <a href="https://github.com/mozilla/rust/pull/7154">some nice</a> <a href="https://github.com/mozilla/rust/pull/7144">performance</a> PRs in place.</li>
<li>aatch is working on <a href="https://github.com/mozilla/rust/pull/7124">cleaning up trans</a>. Huge thanks to him!</li>
</ul>


<h2>Breaking changes</h2>

<ul>
<li>dbaupp and strcat continue their cleanup of the standard library, removing
the ad-hoc iterator functions where <code>std::iterator</code> can replace them.</li>
<li>All of the string functions that could be reasonably converted to methods
have been.</li>
<li>If you&rsquo;re working in the stdlib, acrichto has toggled most of the lint
settings to &ldquo;deny&rdquo; for std/extra, so watch out.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-11">Tuesday meeting</a> talked about bblum&rsquo;s <a href="https://github.com/mozilla/rust/wiki/Proposal-for-effects">Effect proposal</a>,
removing the master/incoming split, and &ldquo;alloc expressions&rdquo;, a replacement for
@-sigils.</p>

<p>The consensus on the effect proposal is that it needs investigation and
wouldn&rsquo;t be landing in 1.0.</p>

<p>Discussion about master/incoming mostly centered on &ldquo;master isn&rsquo;t always
green, how can we add better coverage to bors' tests?&rdquo; Consensus seems to be
that removing incoming would be beneficial, but enabling more OS and valgrind
coverage on bors would harmfully impact development speed.</p>

<p>The proposed syntax for alloc expressions is <code>new (provider) expr</code>, with <code>new
expr</code> becoming the replacement for the current <code>~expr</code>. This would allow
custom smart pointers. pcwalton ended the meeting with a huge cliff hanger</p>

<p><blockquote><p>I&rsquo;ve been meaning to talk a little bit today about simplifying the<br/>mut-borrowing story in regards to this, we may be able to effect a large<br/>simplification on the language</p></blockquote></p>

<p>Personally, I think <a href="https://gist.github.com/Kimundi/5744578">kimundi&rsquo;s proposal</a> has a lot of promise, and the
syntax is more pleasing to me. It wasn&rsquo;t brought up at the meeting, though.</p>

<h1>Meetups</h1>

<ul>
<li>The Mountain View meetup was a great success. 18 showed up. erickt is
planning for another SF Bay area meetup in July. If you want to give a
presentation, send him your proposal and how long you need to put it
together.</li>
<li>Tim Chevalier will be giving a talk titled &ldquo;Rust: A Friendly Introduction&rdquo;
on Monday, June 17, 6-9pm in Portland. See <a href="http://calagator.org/events/1250464376">Calagator</a> for more
details. This is a preview of a talk he will be giving at <a href="http://opensourcebridge.org/sessions/970">Open Source
Bridge</a>, also in Portland.</li>
</ul>


<h1>Notable discourse</h1>

<ul>
<li>Still more discussion about <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004364.html">iterators</a>, this time focusing around
<a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004465.html">changing the semantics</a> of the <code>for</code> loop.</li>
<li>Some discussion about <a href="http://www.reddit.com/r/rust/comments/1gag3t/list_comprehensions_in_rust_iterator/">list comprehensions</a>, including initial
proofs-of-concept.</li>
<li>Graydon explains hashing and versioning
<a href="https://botbot.me/mozilla/rust/msg/3792753/">https://botbot.me/mozilla/rust/msg/3792753/</a></li>
<li>Principal author of 0install evaluates rust among other languages as a
python replacement
<a href="http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/">http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/</a></li>
<li>Niko thinks about parallelism
<a href="http://smallcultfollowing.com/babysteps/blog/2013/06/11/data-parallelism-in-rust/">http://smallcultfollowing.com/babysteps/blog/2013/06/11/data-parallelism-in-rust/</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/06/11/on-the-connection-between-memory-management-and-data-race-freedom/">http://smallcultfollowing.com/babysteps/blog/2013/06/11/on-the-connection-between-memory-management-and-data-race-freedom/</a></li>
</ul>


<h1>Other announcements</h1>

<ul>
<li>bjz tells me lmath is <em>actually</em> fixed now, and is usable</li>
</ul>

]]></content>
  </entry>
  
</feed>
