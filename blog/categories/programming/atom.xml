<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Ramblin's]]></title>
  <link href="http://cmr.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2013-11-30T21:59:00-05:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/11/30/this-week-in-rust/"/>
    <updated>2013-11-30T15:56:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/11/30/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>, a weekly newsletter
summarizing Rust&rsquo;s progress and community activity. As always, if you have
something you&rsquo;d like to be featured, just <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">send me an
email</a>.</p>

<p>Last week was very slow, but this week more than makes up for it I think!
Static linking landed, and there&rsquo;s been some nice cleanup of error messages
and various APIs.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>59 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Names of methods creating iterators have <a href="https://github.com/mozilla/rust/pull/10622">changed
drastically</a> to remove the
<code>_iter</code> suffix. This reflects that iterators are a primary focus of APIs.
The PR description has all of the changes summarized.</li>
<li>We now have <a href="https://github.com/mozilla/rust/pull/10528">static linking
support</a>! It does, however,
involve some changes with how the <code>link</code> attribute works. The error messages
should guide you to the fixes.</li>
<li>In preparation for the placement new changes, the <code>Path</code> constructor has
been <a href="https://github.com/mozilla/rust/pull/10697">renamed from <code>new</code> to
<code>init</code></a>,.</li>
<li>Some overly-permissive borrow checking for <code>&amp;mut &amp;mut</code> <a href="https://github.com/mozilla/rust/pull/10519">has been
fixed</a>. This is fairly obscure,
most code shouldn&rsquo;t have hit it.</li>
<li>The parser is <a href="https://github.com/mozilla/rust/pull/10642">more strict</a>
about what it accepts as a doc comment. Now, only <code>///</code> and <code>/**</code>  are
counted as introducing doc comments (previously, <code>////</code> and <code>/***</code> would
also introduce a doc comment).</li>
<li><code>std::{uint, int}::{min, max}</code> <a href="https://github.com/mozilla/rust/pull/10719">have been
removed</a>. They were identical to
the functions in <code>std::cmp</code>, so use those instead.</li>
<li><code>extra::json</code> <a href="https://github.com/mozilla/rust/pull/10727">has been rid of @
boxes</a>, and now uses idiomatic
constructor names.</li>
<li>The <code>type_id</code> intrinsic <a href="https://github.com/mozilla/rust/pull/10722">now uses a language item as its return
value</a>.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/10662">cleanup</a> has been done to
<code>std::rt::thread</code>, which is an interface to native threads (rather than
tasks).</li>
<li><code>do</code> blocks are <a href="https://github.com/mozilla/rust/pull/10581">no longer
allowed</a> in non-<code>proc</code> contexts.
This means that <code>do</code> can not be used with a function whose last argument is
not a <code>proc</code>. A fairly large <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006999.html">thread on the mailing
list</a>
is ongoing about this change.</li>
<li><code>LittleLock</code> now <a href="https://github.com/mozilla/rust/pull/10660">uses RAII</a>.</li>
<li>C-like enums are <a href="https://github.com/mozilla/rust/pull/10652">now represented as an
integer</a> rather than a struct,
at the LLVM level. This affects ABI.</li>
<li>Linked failure <a href="https://github.com/mozilla/rust/pull/10603">has been
removed</a> from the runtime.</li>
<li><code>extra::term</code> <a href="https://github.com/mozilla/rust/pull/10637">no longer uses <code>@mut
Writer</code></a>, instead taking the
writer to use by value.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li><code>RefCell&lt;T&gt;</code>, previously known as <code>Mut&lt;T&gt;</code>, <a href="https://github.com/mozilla/rust/pull/10514">has finally
landed</a>, for all your dynamic
borrow checking needs.</li>
<li>A lint for unknown attributes <a href="https://github.com/mozilla/rust/pull/10316">has finally been
added</a>. The compiler will now
warn when it sees an attribute it doesn&rsquo;t recognize.</li>
<li>A lock-free <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.170.1097&amp;rep=rep1&amp;type=pdf">Chase-Lev
deque</a>
has <a href="https://github.com/mozilla/rust/pull/10678">been added to the runtime</a>.</li>
<li>The shootout-spectralnorm benchmark <a href="https://github.com/mozilla/rust/pull/10704">has been
resurrected</a>.</li>
<li>Unknown feature gates <a href="https://github.com/mozilla/rust/pull/10680">are now
linted</a>, rather than being a
hard failure.</li>
<li>The AST is <a href="https://github.com/mozilla/rust/pull/10693">now frozen</a>!</li>
<li><code>GenericPort</code> <a href="https://github.com/mozilla/rust/pull/10688">now has an
iterator</a> over the messages it
receives.</li>
<li><code>NodeId</code>, <code>CrateNum</code>, <code>Name</code>, and <code>Mrk</code> (types in libsyntax) <a href="https://github.com/mozilla/rust/pull/10670">have been
shrunk to 32 bits</a>.</li>
<li>The restriction on macros expanding to a single item <a href="https://github.com/mozilla/rust/pull/10649">has been
lifted</a>. This obviates the need
for macros hackily expanding to a module containing the desired items. Do
note that this only works when the macro is in &ldquo;item position&rdquo;, or where an
item is expected. There is an
<a href="https://github.com/mozilla/rust/issues/10681">issue</a> open for lifting this
restriction.</li>
<li>A <code>thread_local</code> attribute <a href="https://github.com/mozilla/rust/pull/10312">has been
added</a>, which exposes a
platform&rsquo;s native TLS, a la C11/C++11 <code>thread_local</code>.</li>
<li>Cross compilation to win64 (via mingw-w64) <a href="https://github.com/mozilla/rust/pull/10578">is now
supported</a>. There were also a
<a href="https://github.com/mozilla/rust/pull/10631">bunch of fixes</a> on real win64.</li>
<li>The parser gives a <a href="https://github.com/mozilla/rust/pull/10641">better error
message</a> when it encounters an
unclosed delimiter it didn&rsquo;t expect.</li>
<li>There is a <a href="https://github.com/mozilla/rust/pull/10475">better error
message</a> when a module name is
used as a type (the motivating example being <code>impl SomeTrait for some_module</code>).</li>
<li>JSON decoding <a href="https://github.com/mozilla/rust/pull/10625">now gives better
errors</a>.</li>
<li>Linker optimizations are <a href="https://github.com/mozilla/rust/pull/10620">now
used</a> on Linux.</li>
</ul>


<h2>New contributors</h2>

<p>Our first-time contributors this week are:</p>

<ul>
<li>Andreas Ots</li>
<li>Eric Biggers</li>
<li>Jannis Harder</li>
<li>Kiet Tran</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-11-26">weekly
meeting</a>
discussed bootstrap times, the <code>thread_local</code> PR, mutexes, and the GC. In
particular, it was decided that we should have nightlies.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This was a short week due to the US Thanksgiving holiday, but there were still
17 landed PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Hyunjune Kim and Sammy Kim landed some border style extensions in
<a href="http://github.com/mozilla/servo/pull/1322">#1276</a>.</li>
<li>Youngmin Yoo, Seonghyun Kim, and Jaemin Moon landed overflow:hidden in
<a href="http://github.com/mozilla/servo/pull/1298">#1298</a>.</li>
<li>Isabelle Carter landed changing the unrendered portion of content to use the
doc&rsquo;s background color in <a href="http://github.com/mozilla/servo/pull/1210">#1210</a>.</li>
<li>Patrick Walton has been experimenting with some very promising parallel
layout work, which he described in a
<a href="https://groups.google.com/forum/#!topic/mozilla.dev.servo/1nKmBvFewIs">message</a>
to the mailing list.</li>
</ul>


<h2>Meetings</h2>

<p>This week&rsquo;s <a href="https://github.com/mozilla/servo/wiki/Meeting-2013-11-25">meeting</a>
covered the poor situation with Nvidia support on Linux, fleshed out the string
interning plan during CSS selector parsing/matching, and went into some Servo
and Rust-related build issues.</p>

<h1>Announcements etc</h1>

<p>Do note that all the links are pulled directly from the
<a href="https://reddit.com/r/rust">subreddit</a>.</p>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1rf8rz/matrix_multiply_performance_in_rust/">Matrix Multiply Performance in Rust</a></li>
<li><a href="https://github.com/sebcrozet/nrays">nrays</a> &ndash; a 3d/4d raytracer</li>
<li><a href="https://air.mozilla.org/sprocketnes-practical-systems-programming-in-rust/">SprocketNES: Practical Systems Programming in
Rust</a>.
Contrary to the title, this is actually a recording of the presentations at
the Bay Area meetup.</li>
<li><a href="https://github.com/uutils/coreutils">uutils</a> &ndash; an attempt at writing
universal (as in cross-platform) CLI utils in Rust</li>
<li><a href="https://github.com/cmr/lets-build-a-compiler">lbac</a> &ndash; a Rust port of Jack
Crenshaw&rsquo;s &ldquo;Let&rsquo;s Build a Compiler&rdquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/11/23/this-week-in-rust/"/>
    <updated>2013-11-23T17:58:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/11/23/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>!</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>47 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Non-ASCII identifiers are <a href="https://github.com/mozilla/rust/pull/10605">feature
gated</a>, due to open questions
about how it should be done. They aren&rsquo;t being removed, just deferred to
post-1.0.</li>
<li>Some more closure reform has gone through. <code>~fn</code> has been removed, <a href="https://github.com/mozilla/rust/pull/10561">use
<code>proc</code> instead</a>. <code>&amp;fn</code> is <a href="https://github.com/mozilla/rust/pull/10568">also
short for this world</a>.</li>
<li><code>std::util::NonCopyable</code> had its dummy constructor
<a href="https://github.com/mozilla/rust/pull/10575">removed</a>.</li>
<li>All of the functions in rustrt <a href="https://github.com/mozilla/rust/pull/10440">have been prefixed with
<code>rust_</code></a>.</li>
<li>Items inside functions <a href="https://github.com/mozilla/rust/pull/10443">no longer accept privacy
modifiers</a>, since it is
meaningless.</li>
<li>Reachable <code>extern fn</code>s are <a href="https://github.com/mozilla/rust/pull/10539">no longer marked
internal</a>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>A <code>Gc&lt;T&gt;</code> stub <a href="https://github.com/mozilla/rust/pull/10576">has been added</a>.
New code should use this instead of <code>@T</code>.</li>
<li><code>..</code> is now <a href="https://github.com/mozilla/rust/pull/10366">the pattern to use</a>
when ignoring multiple elements in a pattern.</li>
<li>Stepping through <code>if</code> in a debugger <a href="https://github.com/mozilla/rust/pull/10552">should be much smoother
now</a>.</li>
<li><code>rustpkg -O</code> <a href="https://github.com/mozilla/rust/pull/10526">will now actually
optimize</a> the package it is
building.</li>
<li>Did you know we can make tags files for the Rust codebase? <code>make
TAGS.{vi,emacs}</code>! It no longer generates tags for <a href="https://github.com/mozilla/rust/pull/10508">all of LLVM and
libuv</a>, too.</li>
<li>The pidigits benchmark <a href="https://github.com/mozilla/rust/pull/10555">has been
resurrected</a>.</li>
<li>A native mutex type <a href="https://github.com/mozilla/rust/pull/10479">now
exists</a>, and it doesn&rsquo;t depend
on C++.</li>
<li>Some more derived methods are <a href="https://github.com/mozilla/rust/pull/10557">marked for
inlining</a>.</li>
<li>A bunch more <a href="https://github.com/mozilla/rust/pull/10495">native file IO</a>
was implemented, too.</li>
<li>We now have support for the <a href="https://github.com/mozilla/rust/pull/10527">win64 calling
convention</a>. Additionally, the
ABI of <code>extern fn</code>s is now actually used.</li>
<li>The tutorial <a href="https://github.com/mozilla/rust/pull/10589">now covers alternatives to
ownership</a> much better.</li>
<li>A lint for unsafe blocks <a href="https://github.com/mozilla/rust/pull/10599">has been
added</a>.</li>
<li>A minor bug with privacy <a href="https://github.com/mozilla/rust/pull/10583">has been
fixed</a>.</li>
</ul>


<h2>New Contributors</h2>

<p>Our first-time contributors this week are:</p>

<ul>
<li>Dave Hodder</li>
<li>Ian Daniher</li>
<li>Isaac Dupree</li>
<li>g3xzh</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-11-19">weekly
meeting</a>
discussed static linking, changing how <code>let _ = foo</code> is handled, task joining,
autoderef, and user-defined vector types.</p>

<h1>Announcements, etc</h1>

<ul>
<li>A <a href="http://adridu59.github.io/rust-tuts/">new
tutorial</a> project
has sprung up.</li>
</ul>


<h1>Servo</h1>

<p>Thanks to Lars Bergstrom for This Week in Servo! Servo is Rust&rsquo;s sister
project, and I think it&rsquo;s nice to be able to see a highlevel of its progress.
Maybe TWiS will graduate to a separate blog someday.</p>

<h2>This Week in Servo</h2>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language. Starting this week, TWiR will include a status
update from Servo.</p>

<p>There were 14 landed PRs this week.</p>

<h3>Notable additions</h3>

<ul>
<li>Patrick Walton rewrote flow construction so that we can make it incremental
and parallelizable in <a href="https://github.com/mozilla/servo/pull/1271">https://github.com/mozilla/servo/pull/1271</a></li>
<li>Ryan Choi added support for transparant PNG files in
<a href="https://github.com/mozilla/servo/pull/1288">https://github.com/mozilla/servo/pull/1288</a></li>
<li>Junyoung Cho added the ACID2 test file, which is one of the big focuses of
the team over the coming months, in
<a href="https://github.com/mozilla/servo/pull/1287">https://github.com/mozilla/servo/pull/1287</a></li>
<li>In his first Servo PR, Adenilson Cavalcanti contributed a help message for
the binary in <a href="https://github.com/mozilla/servo/pull/1277">https://github.com/mozilla/servo/pull/1277</a></li>
</ul>


<h3>Meetings</h3>

<p>Having spent the prior week at a workweek with Samsung in Korea (where there
were several presentations on both Rust and Servo!
<a href="https://github.com/mozilla/servo/wiki/Videos-and-presentations">https://github.com/mozilla/servo/wiki/Videos-and-presentations</a> ), the meeting
was pretty light this week. It mainly <a href="https://github.com/mozilla/servo/wiki/Meeting-2013-11-18">covered</a> getting more formal
tracking of the work required for ACID2 and prioritizing Windows support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/11/19/this-week-in-rust/"/>
    <updated>2013-11-19T01:42:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/11/19/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>46 PRs were merged this week.</p>

<h2>Breaking changes</h2>

<ul>
<li><code>std::rt::io</code> <a href="https://github.com/mozilla/rust/pull/10423">has moved on</a> to
become <code>std::io</code>. Yay!</li>
<li>The <code>#[fixed_stack_segment]</code> attribute <a href="https://github.com/mozilla/rust/pull/10407">has been
removed</a>.</li>
<li><code>as</code> casts to functions are <a href="https://github.com/mozilla/rust/pull/9788">no longer
allowed</a>.</li>
<li>The return value of the <code>io::process</code> is no longer an int, but <a href="https://github.com/mozilla/rust/pull/10109">an enum that
also represents termination by
signal</a>. It&rsquo;s also ostensibly
more portable: to check if a subprocess succeeded, just call <code>.success()</code> on
the return value.</li>
<li><code>std::cast::unsafe_copy</code> has <a href="https://github.com/mozilla/rust/pull/10497">has been
removed</a>. It is identical to
<code>std::ptr::read_ptr</code>.</li>
<li>Trailing <code>::</code> is <a href="https://github.com/mozilla/rust/pull/10420">no longer
allowed</a> in paths</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Vectors have <a href="https://github.com/mozilla/rust/pull/10417">more overflow
checking</a>. This was the cause
of a few mysterious segfaults.</li>
<li>Crate maps <a href="https://github.com/mozilla/rust/pull/10422">can now be generated for
libraries</a>, for when you want to
embed a Rust library in a non-Rust application.</li>
<li>Creation of buffered readers/writers <a href="https://github.com/mozilla/rust/pull/10424">has been optimized a
bit</a>.</li>
<li>If you use OS X, you&rsquo;ll be happy to see that the frivolous &ldquo;no debug symbols
in executable&rdquo; warning <a href="https://github.com/mozilla/rust/pull/10198">has been stomped
out</a>.</li>
<li>The missing-documentation lint is <a href="https://github.com/mozilla/rust/pull/10277">now more
accepting</a>, and won&rsquo;t warn about
private items.</li>
<li><code>BufWriter</code>, an implementation of Writer for already-existing buffers, <a href="https://github.com/mozilla/rust/pull/10451">is
now implemented</a>.</li>
<li>The native IO backend has seen <a href="https://github.com/mozilla/rust/pull/10457">a good
boost</a>; it will now be
seamlessly fallen back to when the libuv backend isn&rsquo;t available (you can
test this out by adding <code>#[no_uv];</code> to your crates).</li>
<li>A lint for numeric literals which overflow their type <a href="https://github.com/mozilla/rust/pull/10018">has been
implemented</a>.</li>
<li>A <code>Buffer</code> trait <a href="https://github.com/mozilla/rust/pull/10466">has been
added</a> to <code>std::io</code>, with
<code>read_line</code>, <code>read_until</code>, and <code>read_char</code>.</li>
<li>The error message when the trait&rsquo;s method declaration and the method
declaration in the implementation aren&rsquo;t the same <a href="https://github.com/mozilla/rust/pull/10509">now includes the trait
name</a>.</li>
<li>The libuv bindings were <a href="https://github.com/mozilla/rust/pull/10321">largely
rewritten</a> for performance, at
the sacrifice of some flexibility (which was of questionable value).</li>
<li><code>_</code>-prefixed variables <a href="https://github.com/mozilla/rust/pull/10518">no
longer</a> get an unused <code>mut</code>
warning.</li>
</ul>


<h2>New Contributors</h2>

<p>Our first-time contributors this week are:</p>

<ul>
<li>Jaemin Moon</li>
<li>Jay Anderson</li>
<li>Joe Schafer</li>
<li>Matthew Iselin</li>
<li>Zach Kamsler</li>
</ul>


<h1>Weekly Meeting</h1>

<p>There was no meeting this week, as a bunch of the core developers were in
South Korea for the Servo workweek with Samsung.</p>

<h2>Announcements etc</h2>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006686.html">(ML) Rethinking Linking in
Rust</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006550.html">(ML) The future of M:N
threading</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006714.html">(ML) Type system
thoughts</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006431.html">(ML)Changing
roles</a>,
Tim&rsquo;s &ldquo;going-away&rdquo; post. He did great work on rustpkg, and I hope he finds
time to continue to contribute to Rust.</li>
<li><a href="http://blog.theincredibleholk.org/blog/2013/11/18/booting-to-rust/">Booting to Rust (with
UEFI)</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/11/14/treating-vectors-like-any-other-container/">Treating Vectors Like Any Other
Container</a></li>
<li><a href="http://adrientetar.legtux.org/blog_fr.php?post=0">Moving forward with Rust
website</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[These Weeks in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/11/09/these-weeks-in-rust/"/>
    <updated>2013-11-09T05:21:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/11/09/these-weeks-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to a mega-<em>This Week in Rust</em>. I was swamped this past week with
schoolwork, so TWiR was put off. This week&rsquo;s combines the past two weeks of
progress. These past two weeks were fairly exciting in terms of language and
library progress. The next few weeks should be even more exciting.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>There were 108 PRs merged these past two weeks.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The very long-awaited <a href="https://github.com/mozilla/rust/pull/9613">enum discriminant size
patch</a> has landed. This will
affect FFI. Size of enum discriminant is now configurable via the <code>repr</code>
attribute, and will by default shrink to the smallest needed.</li>
<li>The extension traits for <code>Reader</code> and <code>Writer</code> have <a href="https://github.com/mozilla/rust/pull/10079">been transformed into
default methods on their respective
trait</a>.</li>
<li>Non-string literals are now
<a href="https://github.com/mozilla/rust/pull/10166">disallowed</a> in attributes.</li>
<li>Type parameters are now
<a href="https://github.com/mozilla/rust/pull/10189">forbidden</a> on inner statics
(statics inside functions).</li>
<li>The interface to flush stdout <a href="https://github.com/mozilla/rust/pull/10218">has
changed</a>. It was previously
unsound by allowing aliased <code>&amp;mut</code>.</li>
<li><code>Result</code>&rsquo;s API has changed <a href="https://github.com/mozilla/rust/pull/10119">quite a
bit</a>, to be more consistent with
<code>Option</code>, and hopefully simpler.</li>
<li>Linker arguments <a href="https://github.com/mozilla/rust/pull/10199">no longer</a>
propagate across crates. This means that if you link to a crate, its linker
arguments won&rsquo;t be automatically added when your crate is linked.</li>
<li>The memory intrinsics <a href="https://github.com/mozilla/rust/pull/10251">have been
simplified</a>. A single intrinsic
for <code>memcpy</code>/<code>memmove</code>/<code>memset</code> is now exposed, rather than one per
    platform.</li>
<li><code>#[link(name = "...")]</code> is now <a href="https://github.com/mozilla/rust/pull/10260">taken into
account</a> by rustc when creating
build artifacts.</li>
<li><code>std::rt::io::file</code> <a href="https://github.com/mozilla/rust/pull/10179">has been fleshed out and
tweaked</a>. In particular, it has
been renamed to <code>std::rt::io::fs</code>, many previously-free functions are now
associated functions on <code>std::rt::io::File</code>, and <code>FileInfo</code> has been renamed
to <code>FileStat</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Calling variadic functions with the C FFI <a href="https://github.com/mozilla/rust/pull/10064">is now
implemented</a>. This is a pretty
sweet change. The only thing missing in our C FFI now is unions.</li>
<li>We <a href="https://github.com/mozilla/rust/pull/10243">now have</a> octal numeric
literals, for all your esoteric numeric needs!</li>
<li>An <code>Any</code> type <a href="https://github.com/mozilla/rust/pull/9967">has been added</a>,
and it is now possible to retrieve the object a task failed with. Previously
tasks could only fail with a string, now they can fail with anything.</li>
<li>A <code>concat!</code> syntax extension <a href="https://github.com/mozilla/rust/pull/9740">has been
added</a> for compile-time string
concatenation.</li>
<li>Timers are <a href="https://github.com/mozilla/rust/pull/10083">now also ports</a>, and
the creator of a timer can cancel it.</li>
<li>As the first part of closure reform, <code>proc</code> is <a href="https://github.com/mozilla/rust/pull/10132">now sugar</a> for <code>~once
fn</code>, and <code>|A| -&gt; B</code> (and <code>fn(A) -&gt; B</code> for bare functions) <a href="https://github.com/mozilla/rust/pull/10187">are now
allowed</a> in types.</li>
<li>The section in the tutorial on vectors and strings <a href="https://github.com/mozilla/rust/pull/10354">has been
rewritten</a> for correctness with
modern Rust.</li>
<li>A bunch of C++ has been removed and rewritten. <a href="https://github.com/mozilla/rust/pull/10290">Thread
creation</a>, <a href="https://github.com/mozilla/rust/pull/10094">memory
regions</a> (used for debugging and
<code>@</code>-boxes, from what I can tell), and an <a href="https://github.com/mozilla/rust/pull/10163/files">unused
<code>array_list</code></a>.</li>
<li>Bounds check failures are <a href="https://github.com/mozilla/rust/pull/10113">now marked as a cold
path</a>, and a <code>cold</code> <a href="https://github.com/mozilla/rust/pull/10127">function
attribute</a> has been added.</li>
<li>The build system <a href="https://github.com/mozilla/rust/pull/10203">can cross-compile to iOS
now</a>, even though Rust doesn&rsquo;t
actually run on that platform (yet!).</li>
<li><code>std::rand</code> <a href="https://github.com/mozilla/rust/pull/10223">now implements the Gamma
distribution</a>.</li>
<li>Cross-crate destructor inlining <a href="https://github.com/mozilla/rust/pull/10242">now
works</a>.</li>
<li>A <code>type_id</code> intrinsic <a href="https://github.com/mozilla/rust/pull/10182">has been
added</a>.</li>
<li>Everything in the runtime that uses <code>libuv</code> has been <a href="https://github.com/mozilla/rust/pull/10058">split into its own
crate</a>. This means that the
runtime really is pluggable: you can implement your own event loop and so
forth.</li>
</ul>


<h2>New Contributors</h2>

<p>Welcome to our new contributors!</p>

<ul>
<li>Brian</li>
<li>Carol Willing</li>
<li>Dirkjan Bussink</li>
<li>Guillaume Pinot</li>
<li>Gyorgy Andrasek</li>
<li>Joshua Yanovski</li>
<li>Mat Carberry</li>
<li>Noufal Ibrahim</li>
<li>Robert Irelan</li>
<li>Tomas Sedovic</li>
<li>Jennifer Ward</li>
<li>Patrick Kim</li>
</ul>


<p>At .85 new contributors a day, we&rsquo;ll soon dwarf every other language in the
&ldquo;awesome volunteer&rdquo; category.</p>

<h1>Weekly Meetings</h1>

<p>Last week&rsquo;s
<a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-29">meeting</a>
discussed segmented stacks (spoiler: <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006314.html">they&rsquo;re not coming
back</a> )
and placement new (we want it, how do we want it?).</p>

<p>This week&rsquo;s
<a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-11-05">meeting</a>
discussed the future of libextra, more stack things, octal literals, vector
representation, and temporary (&ldquo;rvalue&rdquo;) lifetimes.</p>

<h1>Announcements etc</h1>

<ul>
<li><strong>Reminder from <del>the Ministry of Truth</del> ChrisMorgan</strong>: Rust is awesome.</li>
<li>Rust Skåne, <a href="http://www.foocafe.org/event/a-friendly-introduction-to-rust">has an event page
now</a>. It will
be December 3 at 17:30 in Foo Cafe.</li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/">Integermingled Parameter
Lists</a>,
and <a href="http://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/">take
2</a>.</li>
<li><a href="https://github.com/haxney/speculate">speculate</a> &ndash; a parallel speculative
execution library.</li>
<li><a href="https://github.com/luqmana/mcchat">mcchat</a> &ndash; a pure-Rust Minecraft chat
client.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More On Stack Safety]]></title>
    <link href="http://cmr.github.io/blog/2013/10/28/more-on-stack-safety/"/>
    <updated>2013-10-28T17:58:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/28/more-on-stack-safety</id>
    <content type="html"><![CDATA[<p>I got a lot of great feedback on my <a href="http://cmr.github.io/blog/2013/10/21/on-stack-safety/">previous
post</a>, and I&rsquo;ve done
some thinking and come up with what I think is a better proposal, and a solid
way forward.</p>

<!-- more -->


<ol>
<li>Teach the task API to allow spawning a task with a fixed stack size.</li>
<li>Add the ability to query stack size from LLVM. This lets us implement stack
guard zones precisely.</li>
<li>Add a way to use the result of #2 in a clean way. This is probably the
trickiest to get right.</li>
</ol>


<p>You&rsquo;ll note that this doesn&rsquo;t seem to support segmented stacks <em>or</em> omission
of stack safety! I&rsquo;m now of the opinion that segmented stacks have no future.
They currently only allow aborting on stack overflow, not unwinding, and their
only other benefit (the ability to &ldquo;grow&rdquo; the stack) is niche. If someone
really thinks growable stacks is desirable, and has valid, convincing
usecases, they should contact me by email or IRC.  Otherwise, the guarantees
they provide are the same as guard zones (abort on overflow).</p>

<p>Omission of stack safety seems missing. But, it isn&rsquo;t needed when using guard
zones! Since guard zones impose nothing on a function&rsquo;s generated code (ie,
there&rsquo;s no prelude that looks into TLS, no need for a <code>__morestack</code>), an
environment which can&rsquo;t provide guard zones simply does nothing special when
setting up a task&rsquo;s stack.</p>

<p>You&rsquo;ll also note that this ditches the static analysis I was so fond of. This
sort of analysis really belongs in a lint pass, rather than as a core part of
the safety feature. A crate can say <code>#[max_stack_size = "64K"];</code> or
<code>#[deny(unbounded_stack)]</code> if it wants static stack size checking (which
people
<a href="http://www.reddit.com/r/rust/comments/1owhwi/on_stack_safety/ccwke1l">seem</a>
<a href="http://www.reddit.com/r/rust/comments/1owhwi/on_stack_safety/ccwjhpn">to</a>
<a href="http://www.reddit.com/r/programming/comments/1owjmi/on_stack_safety_in_rust/ccwei0c">want</a>).</p>

<p>Requiring fixed-sized stacks seems like a step backwards, but I don&rsquo;t see a
better path forward. Solving this problem can be left to a less-rusty, perhaps
research, language.</p>
]]></content>
  </entry>
  
</feed>
