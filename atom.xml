<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ramblin's]]></title>
  <link href="http://cmr.github.io/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2013-07-21T17:24:32-04:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/07/21/this-week-in-rust/"/>
    <updated>2013-07-21T09:36:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/07/21/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the seventh issue of <em>This Week in Rust</em>, a weekly
overview of Rust and its community. Things are calming down quite a bit, in
that nothing extraordinarily exciting is happening. Lots of great work is
being done everywhere, and good progress is being made in both bugfixes and
cleanup. It has been a good week!</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>Issue churn this week was -15. A total of 59 PRs were merged.</p>

<h2>Breaking changes</h2>

<ul>
<li><strong><a href="https://github.com/mozilla/rust/pull/7684">The semantics of <code>range_rev</code> have
changed</a>. This will break your
code without warning.</strong> It is now, to use <a href="https://en.wikipedia.org/wiki/Interval_%28mathematics%29#Notations_for_intervals">interval
notation</a>,
<code>(hi, lo]</code> rather than <code>[hi, lo)</code>.</li>
<li><code>pub extern</code> and <code>priv extern</code> <a href="https://github.com/mozilla/rust/pull/7896">have been
removed</a> from the language. This
matches the previous similar change to <code>impl</code>. Place the visibility
qualifier (<code>pub</code>/<code>priv</code>) on each item in the <code>extern</code> block instead.</li>
<li><code>&amp;T</code> (besides <code>&amp;'static T</code>) is <a href="https://github.com/mozilla/rust/pull/7894">no longer allowed in
<code>@T</code></a>.</li>
<li>The <code>ThreadPerCore</code> spawn mode <a href="https://github.com/mozilla/rust/pull/7856">has been
removed</a>, as it doesn&rsquo;t make
sense with the new scheduler.</li>
<li>The <code>consume</code> methods of the hash containers <a href="https://github.com/mozilla/rust/pull/7833">has been replaced with an
external iterator</a>. The method
name is the same, though.</li>
<li>Moved values can <a href="https://github.com/mozilla/rust/pull/7849">no longer be captured
twice</a>. This was a blatant
soundness issue.</li>
<li>The <code>swap_unwrap</code> method of Option has been <a href="https://github.com/mozilla/rust/pull/7831">renamed to
<code>take_unwrap</code></a>.</li>
<li><code>debug!</code> statements <a href="https://github.com/mozilla/rust/pull/7822">generate no
code</a> unless you pass <code>--cfg
debug</code> to <code>rustc</code>. This should help keep code size down and make your
programs a (tiny bit) faster. Now you don&rsquo;t have to feel bad about having
<code>debug!</code> in hot code.</li>
<li>The <code>mutate_values</code> method of HashMap <a href="https://github.com/mozilla/rust/pull/7815">has been
removed</a>.</li>
</ul>


<h2>Notable library additions, bugfixes, and cleanup</h2>

<ul>
<li>An iterator adaptor was added that <a href="https://github.com/mozilla/rust/pull/7882">endlessly repeats the iterator it is
called on</a>.</li>
<li>Generated test runners <a href="https://github.com/mozilla/rust/pull/7840">now have a
<code>-h</code>/<code>--help</code></a> option.</li>
<li>Metric capturing + racheting <a href="https://github.com/mozilla/rust/pull/7829">has been
added</a> for benchmarks.</li>
<li><code>local_data</code> <a href="https://github.com/mozilla/rust/pull/7841">now has a
<code>get_mut</code></a> function.</li>
<li><code>extra::semver</code> <a href="https://github.com/mozilla/rust/pull/7726">has been updated to SemVer
2.0.0</a>.</li>
<li>Consuming iterators <a href="https://github.com/mozilla/rust/pull/7806">have been
added</a> for the hash structures.</li>
<li><code>extra::ringbuf</code> <a href="https://github.com/mozilla/rust/pull/7808">now implements
DoubleEndedIterator</a>.</li>
<li><code>Eq</code> <a href="https://github.com/mozilla/rust/pull/7799">now has a default implementation of
<code>ne</code></a>.</li>
<li><code>extra::term</code> <a href="https://github.com/mozilla/rust/pull/7716">now knows how to handle more
attributes</a>.</li>
<li>More containers <a href="https://github.com/mozilla/rust/pull/7788">implement
FromIter</a>. This means you can use
<code>.collect()</code> to gather the elements from an iterator into those containers.</li>
<li><a href="https://github.com/mozilla/rust/pull/7858">Task killing, failure, and exit code
propagation</a> in the new runtime
has been implemented.</li>
</ul>


<h2>Notable compiler additions, bugfixes, and cleanup</h2>

<ul>
<li><code>syntax::attr</code> <a href="https://github.com/mozilla/rust/pull/7902">has been
modernized</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7710">Tons of debuginfo work</a> from mw
this week!</li>
<li>Trait data structures <a href="https://github.com/mozilla/rust/pull/7886">have been cleaned
up</a>, as well as a default method
fix.</li>
<li>Intrinsics <a href="https://github.com/mozilla/rust/pull/7851">now have much better
codegen</a>.</li>
<li>A <code>no_implicit_prelude</code> attribute <a href="https://github.com/mozilla/rust/pull/7844">has been
added</a>, which prevents prelude
injection in the module heirarchy starting at the item which that attribute
is added to.</li>
<li>C-style enum variants are <a href="https://github.com/mozilla/rust/pull/7827">now
allowed</a> in <code>[T, ..n]</code>
expressions.</li>
<li>All language items are <a href="https://github.com/mozilla/rust/pull/7828">now
optional</a>. The compiler emits an
error if a language item is used but not provided.</li>
<li>The removal of <code>spanned&lt;T&gt;</code> <a href="https://github.com/mozilla/rust/pull/7826">has
begun</a>.</li>
<li>Headers <a href="https://github.com/mozilla/rust/pull/7816">have been removed</a> for
<code>~str</code> and <code>~[T]</code> where <code>T</code> is unmanaged.</li>
</ul>


<h2>Documentation, tools, and other stuff</h2>

<ul>
<li>rustpkg <a href="https://github.com/mozilla/rust/pull/7419">now works when you don&rsquo;t give it a package
ID</a>. It builds/installs/cleans
the package in the current directory, <em>iff</em> the current directory is in a
rustpkg workspace.</li>
<li><code>--quiet</code> is <a href="https://github.com/mozilla/rust/pull/7847">no longer passed</a>
to git during submodule operations, so you can see the progress of the huge
LLVM download.</li>
<li>Documentation of the <a href="https://github.com/mozilla/rust/pull/7823">lint-controlling
attributes</a> was added.</li>
<li>rustpkg <a href="https://github.com/mozilla/rust/pull/7681">now handles cloning from local git
repos</a>.</li>
<li>The GtkSourceView highlighting file <a href="https://github.com/mozilla/rust/pull/7795">was
improved</a>.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-16">Tuesday
meeting</a>
discussed nothing at all of importance.</p>

<h1>Discussion + Blog posts</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1imeac/guaranteeing_memory_safety_in_rust_niko_matsakis/">Discussion and slides from Niko&rsquo;s presentation at the Northeastern
University Programming Language
Seminar</a></li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/4829">A nightly Ubuntu
PPA</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1igvye/vision_for_rust_simd/">SIMD
discussion</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-July/004841.html">Rust on bare metal
ARM</a></li>
<li><a href="http://www.oscon.com/oscon2013/public/schedule/detail/28741">dherman&rsquo;s OSCON
presentation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/07/13/this-week-in-rust/"/>
    <updated>2013-07-13T16:07:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/07/13/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the sixth issue of <em>This Week in Rust</em>, a weekly overview
of Rust and its community.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>Issue churn this week was -17! A total of 63 PRs were merged this week, twice
as many as last week. Not bad!</p>

<h2>Breaking changes</h2>

<ul>
<li>The <a href="https://github.com/mozilla/rust/pull/7677">task local storage (TLS)
API</a> was cleaned up (there&rsquo;s
still <a href="https://github.com/mozilla/rust/pull/7751">one PR</a> in the queue that
finishes it up).</li>
<li><a href="https://github.com/mozilla/rust/pull/7652">DList was modernized</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7704"><code>extra::json</code> now uses <code>Iterator&lt;char&gt;</code> rather than a
<code>@Reader</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/7117">Various free-standing functions in f32 etc were
removed</a></li>
<li><a href="https://github.com/mozilla/rust/pull/7262">ref bindings in irrefutable patterns has been tightened
up</a>. This potentially fixes <em>and
breaks</em> code. It&rsquo;s breaking because the compiler now rejects incorrect
programs that it did not before.</li>
<li><a href="https://github.com/mozilla/rust/pull/7612">str no longer encodes invalid
utf-8</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7629"><code>extra::rope</code> was removed</a></li>
<li><a href="https://github.com/mozilla/rust/pull/7594"><code>extra::net_ip</code> and so on were
removed</a>. They were redundant
names for <code>extra::net::ip</code> and such</li>
<li><a href="https://github.com/mozilla/rust/pull/7570"><code>Iterator::size_hint</code>&rsquo;s lower bound is no longer an
Option</a></li>
</ul>


<h2>Notable compiler additions, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/7763">Unnecessary basic blocks were
removed</a>. This makes for much
easier to read unoptimized IR.</li>
<li><a href="https://github.com/mozilla/rust/pull/7734">Use of <code>*int</code>/<code>*uint</code> is now properly
warned</a> in FFI functions.</li>
<li><a href="https://github.com/mozilla/rust/pull/7725">More default method fixes</a>.</li>
<li>A <a href="https://github.com/mozilla/rust/pull/7717">needless copy</a> was removed
from immediate values (I&rsquo;m pretty sure LLVM optimized it away when
optimizations were on, not positive).</li>
<li>A <a href="https://github.com/mozilla/rust/pull/7706">lint for overqualified names</a>
was added.</li>
<li><a href="https://github.com/mozilla/rust/pull/7705">SIMD arithmetic</a> was
implemented.</li>
<li>A <a href="https://github.com/mozilla/rust/pull/7688">graph abstraction and CFG</a> was
introduced, to unify how the various pieces of the compiler use graphs.</li>
<li><a href="https://github.com/mozilla/rust/pull/7455">The maximum lifetime of stack
closures</a> is now constrained. Not
quite sure what that means, but it fixes a segfault.</li>
<li><a href="https://github.com/mozilla/rust/pull/7683">repr doesn&rsquo;t infinite loop</a> on
zero-sized structs (ie, unit structs).</li>
<li><a href="https://github.com/mozilla/rust/pull/7698">Type parameter pretty printing</a>
was fixed, it now prints the type name rather than <code>'a</code> and <code>'b</code> and
soforth.</li>
<li><a href="https://github.com/mozilla/rust/pull/7631"><code>mut</code> in default method arguments is now
allowed</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7645">IR for calls with immediate return
values</a> was improved.</li>
<li><a href="https://github.com/mozilla/rust/pull/7605">Exchange allocation headers (ie, the headers on <code>~T</code>) were
removed</a>. This was a heroic
effort by strcat and Luqman.</li>
<li><a href="https://github.com/mozilla/rust/pull/7456"><code>-Z trans-stats</code> now reports perf-function
statistics</a></li>
<li><a href="https://github.com/mozilla/rust/pull/7636">Scopes were decoupled from LLVM basic
blocks</a>, improving unoptimized
builds, and allowing more things in optimized builds to be inlined.</li>
<li><a href="https://github.com/mozilla/rust/pull/7585">An infinite loop when recursively including
modules</a> was fixed.</li>
<li>An <a href="https://github.com/mozilla/rust/pull/7557">ICE involving struct-like enum
variants</a> was fixed.</li>
<li>The buildsystem <a href="https://github.com/mozilla/rust/pull/7637">cleans up old
libraries</a> when it needs to.</li>
<li><a href="https://github.com/mozilla/rust/pull/7615">A bunch of managed boxes</a> were
removed from the AST.</li>
</ul>


<h2>Notable library additions, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/7775"><code>print!</code> and <code>println!</code> macros</a>
were added (though <a href="https://github.com/mozilla/rust/issues/7779">#7779</a>
renames them).</li>
<li><a href="https://github.com/mozilla/rust/pull/7765">Ord now uses default methods</a>,
allowing you to get default implementations for everything but <code>lt</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7730"><code>extra::Bitv</code> now takes <code>&amp;[bool]</code> rather than
<code>~[uint]</code></a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7728">x64 now uses large stacks (4 MiB) by
default</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7696"><code>is_utf8</code> is now 22% faster</a></li>
<li><a href="https://github.com/mozilla/rust/pull/7623">Metrics reporting and
ratcheting</a> was added to the test
harness.</li>
<li>A <a href="https://github.com/mozilla/rust/pull/7707">DoubleEndedIterator</a> was
added.</li>
<li>A <a href="https://github.com/mozilla/rust/pull/7691"><code>mut_split</code> method was added</a>
to partition a <code>&amp;mut [T]</code> into two pieces.</li>
<li>We <a href="https://github.com/mozilla/rust/pull/7631">now have pointer arithmetic</a>.</li>
<li>A <a href="https://github.com/mozilla/rust/pull/7265">month&rsquo;s work of runtime work</a>
landed.</li>
<li><a href="https://github.com/mozilla/rust/pull/7528">A safe, cross-platform <code>mmap</code>
wrapper</a> was added.</li>
<li><a href="https://github.com/mozilla/rust/pull/7614">SmallIntMap and SmallIntSet have external
iterators</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7608">JSON parsing got 93% faster</a></li>
<li><a href="https://github.com/mozilla/rust/pull/7562">Deque</a> got a good cleanup and
speedup.</li>
<li><a href="https://github.com/mozilla/rust/pull/7602">vec now implements <code>pop_opt</code> and <code>shift_opt</code>
methods</a>.</li>
<li>A <a href="https://github.com/mozilla/rust/pull/7604"><code>peek_</code> adaptor</a> was added,
which calls a closure on ever item before returning it. Mostly useful for
debugging your iterators.</li>
</ul>


<h2>Documentation etc</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/7742">vim</a>
<a href="https://github.com/mozilla/rust/pull/7665">improvements</a> landed.</li>
<li><a href="https://github.com/mozilla/rust/pull/7641"><code>po4a</code> support for translation</a>
was added.</li>
<li><a href="https://github.com/mozilla/rust/pull/7690"><code>libc::c_void</code> is better
documented</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7632">Man pages</a> for all the tools are
now included.</li>
<li>The <a href="https://github.com/mozilla/rust/pull/7736">iterator tutorial</a> was
extended.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-09">Tuesday
meeting</a> was
all about split stacks and FFI. It&rsquo;s complex and above my ability to
summarize, but from what I can tell no real consensus was made. But, it&rsquo;s the
best enumeration of all the various issues surrounding split stacks that I&rsquo;ve
seen.</p>

<h1>Discussion + Blog posts</h1>

<p>From now on I&rsquo;m going to just link to the reddit thread if there is one, as it
often has additional comments or insights.</p>

<ul>
<li><a href="https://gist.github.com/jmptable/5980297">A simple, self-contained example of using a shared
library</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1i3c15/experimental_actor_library_in_rust/">Experimental Actor
Library (reddit)</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1i30sw/herb_sutter_describes_rust_c_questions_and/">Herb Sutter describes Rust
(reddit)</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1i2y9e/philosophy_and_for_loops_more_from_go_and_rust/">Philosophy and &ldquo;for&rdquo; loops
(reddit)</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1hy6l9/meetingweekly20130709_split_stacks_ffi/">Reddit thread about the weekly
meeting</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1hxp2s/little_bzip2_binding_library_as_well_as_a_bigger/">BZIP2 bindings
(reddit)</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1hsqf5/proposal_for_an_additional_use_case_of_the_in/">Proposal for an additional use case of the &ldquo;in&rdquo; keyword besides for loops
(reddit)</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1i6ykh/technical_qa_on_servo/">Technical Q&amp;A on Servo
(reddit)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/07/06/this-week-in-rust/"/>
    <updated>2013-07-06T15:45:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/07/06/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the fifth issue of <em>This Week in Rust</em>, a weekly overview
of Rust and its community.</p>

<p><code>0.7</code> was released this week. Hello to the newcomers! I&rsquo;ve also decided to put
breaking changes first. Feel free to skip the rest, it&rsquo;s relatively
unimportant.</p>

<!-- more -->


<h1>Newcomers</h1>

<p>There&rsquo;s already a lot of traffic from Rust newbies, so you get your own
section! Welcome to Rust. I wrote <a href="http://cmr.github.io/blog/2013/07/05/the-state-of-rust/">The State of Rust
0.7</a> especially for
newcomers, so you should read that. Jump on IRC if you have any questions or
need help. We&rsquo;re a quite friendly bunch, and we usually don&rsquo;t bite.</p>

<h1>What&rsquo;s cooking on master?</h1>

<p>Issue churn this week was +12. 35 PRs were merged, total PR churn was -8.
There continues to be a lot more cleanup than breaking changes, which is
encouraging! As I understand it, graydon wants to focus this release cycle on
cleanup, rather than language features. Hopefully the compiler can get into a
much better state.</p>

<h2>Breaking changes</h2>

<ul>
<li>dbaupp <a href="https://github.com/mozilla/rust/pull/7487">continues</a> to
<a href="https://github.com/mozilla/rust/pull/7566">slaughter</a> the free functions in
<code>std::vec</code> where methods can replace them.</li>
<li>He also <a href="https://github.com/mozilla/rust/pull/7523">added a lint for lowercase
statics</a>, which is enabled by
default because of an astoundingly poor error message.</li>
<li>Seldaek <a href="https://github.com/mozilla/rust/pull/7474">moved a bunch of iter
stuff</a> to <code>extra</code>.</li>
</ul>


<h2>Notable compiler additions, bugfixes, and cleanup</h2>

<ul>
<li>doener <a href="https://github.com/mozilla/rust/pull/7452">removed an extra layer of
indirection</a> that method calls incurred.</li>
<li>Blei <a href="https://github.com/mozilla/rust/pull/7457">fixed a codegen problem</a>
with structs containing <code>f32</code> when used with FFI.</li>
<li>I <a href="https://github.com/mozilla/rust/pull/7468">propagated the great renaming</a>
throughout the rest of the codebase (besides compiletest, apparently).</li>
<li>acrichto <a href="https://github.com/mozilla/rust/pull/7465">rewrote some str code</a>
to avoid allocations.</li>
<li>strcat is <a href="https://github.com/mozilla/rust/pull/7495">removing</a> headers
from exchange allocs (see also
<a href="https://github.com/mozilla/rust/pull/7605">#7605</a> and
<a href="https://github.com/mozilla/rust/pull/7521">#7521</a>). They are entirely
unused, they just need to be removed and the fallout fixed throughout the
compiler.</li>
<li>yjh0502 <a href="https://github.com/mozilla/rust/pull/7443">fixed a bug</a> that
allowed duplicate struct fields (like <code>struct Foo {a: uint, a: uint}</code>)</li>
<li>acrichto <a href="https://github.com/mozilla/rust/pull/7409">turned on</a> LLVM
threading.</li>
<li>Luqman <a href="https://github.com/mozilla/rust/pull/7498">changed configure</a> to
require either wget <em>or</em> curl.</li>
<li>Dretch <a href="https://github.com/mozilla/rust/pull/7510">improved the error
message</a> for implementing unknown
traits to mention the trait name.</li>
<li>sankha93 <a href="https://github.com/mozilla/rust/pull/7531">improved the error
message</a> for trying to capture
environment in a plain <code>fn</code>.</li>
<li>bblum <a href="https://github.com/mozilla/rust/pull/7534">improved the error mssage</a>
for using a moved value, it now gives better suggestions than just <code>copy</code>.</li>
<li>sanxiyn <a href="https://github.com/mozilla/rust/pull/7543">fixed a bug</a> where
eligible newtype structs weren&rsquo;t marked as an immediate value (and thus not
passed in registers when they could have been).</li>
<li>Luqman <a href="https://github.com/mozilla/rust/pull/7547">paved the way</a> for 64-bit
windows support.</li>
<li>jensnockert <a href="https://github.com/mozilla/rust/pull/7194">added byte swapping
intrinsics</a> that specialize
per-platform, avoiding unnecessary operations.</li>
<li>jld <a href="https://github.com/mozilla/rust/pull/7554">removed an unused function</a></li>
<li>sully <a href="https://github.com/mozilla/rust/pull/7545">fixed more default method bugs</a>.</li>
</ul>


<h2>Notable library additions, bugfixes, and cleanup</h2>

<ul>
<li>sfackler <a href="https://github.com/mozilla/rust/pull/7549">fixed up some
documentation</a> related to the
drop/finalize renaming.</li>
<li>acrichto <a href="https://github.com/mozilla/rust/pull/7530">fixed a correctness
bug</a> in TreeMap&rsquo;s <code>Ord</code>
implementation.</li>
<li>sfackler <a href="https://github.com/mozilla/rust/pull/7513">much improved</a> and
genericized the base64 handling.</li>
<li>graydon did a <a href="https://github.com/mozilla/rust/pull/7518">bunch of cleanup</a>
in <code>extra::stats</code>.</li>
<li>Seldaek <a href="https://github.com/mozilla/rust/pull/7475">fixed a patological case with
<code>str::each_split_within</code></a>.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-02">Tuesday meeting</a>
featured more discussion about <code>@</code> and <code>@mut</code>, that was honestly over my head
(as most of the type system stuff is). If someone wants to write some more
here, feel free to email me (<a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#99;&#111;&#114;&#101;&#121;&#x2b;&#98;&#x6c;&#111;&#x67;&#x40;&#111;&#x63;&#x74;&#97;&#x79;&#110;&#46;&#x6e;&#x65;&#x74;">&#x63;&#111;&#114;&#101;&#x79;&#43;&#x62;&#108;&#x6f;&#x67;&#x40;&#x6f;&#x63;&#x74;&#x61;&#121;&#x6e;&#46;&#110;&#x65;&#x74;</a>) a paragraph or two. You
will get attribution, of course.</p>

<h1>Discussion + Blog posts</h1>

<ul>
<li><a href="http://cmr.github.io/blog/2013/07/05/the-state-of-rust/">The State of Rust 0.7</a></li>
<li><a href="http://forum.dlang.org/thread/kr2vpp$2jmf$1@digitalmars.com">&ldquo;Rust switches to external iteration&rdquo; (D forums)</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-July/004686.html">Segmented stacks</a></li>
<li><a href="http://huonw.github.io/isrustfastyet/mem/">Is Rust Slim Yet? (Is Rust Fast Yet v2)</a></li>
<li><a href="http://joshldavis.com/rust-design-patterns/">Rust Design Patterns</a></li>
<li><a href="http://joshldavis.com/2013/07/01/program-to-an-interface-fool/">Program to an Interface, Fool</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1hg88c/i_think_i_would_take_that_for_rust_when_its_done/">Would You Bet $100,000,000 on [Rust]?</a></li>
<li><a href="http://michaelwoerister.github.io/2013/06/28/Status-Update-3.html">mw&rsquo;s third status report</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The State of Rust 0.7]]></title>
    <link href="http://cmr.github.io/blog/2013/07/05/the-state-of-rust/"/>
    <updated>2013-07-05T09:51:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/07/05/the-state-of-rust</id>
    <content type="html"><![CDATA[<p>Given the influx of newcomers from the 0.7 release, I thought it&rsquo;d be a good
idea to summarize the condition of Rust, its libraries, and its documentation.
bstrie said it best I think, &ldquo;basically, any question of the form &lsquo;is there a
reason for this stupid and terrible thing&rsquo; is &lsquo;no, sorry, we&rsquo;re working on
it&rsquo;&nbsp;&rdquo;.</p>

<!-- more -->


<h1>Iterators</h1>

<p>External iterators are a main feature of the 0.7 release, and there is ongoing
work to remove all of the library features that use internal iterators. Most
of them are gone, and there are few uses of internal iterators. However, they
are clunky to use. The <code>for</code> loop semantics are going to change from internal
iteration to external iteration, but they are still internal iteration right
now, which means the <code>advance</code> adaptor is necessary for most uses of
iterators. Additionally, the <code>iter()</code> helper function is necessary to actually
return an iterator. This will be obviated by an <code>Iterable</code> trait that many
things will hopefully implement. Due to
<a href="https://github.com/mozilla/rust/issues/5898">5898</a>, many methods are oddly
named or have an underscore appended (ie, <code>transform</code> instead of <code>map</code>,
<code>position_</code> instead of <code>position</code>).</p>

<h1>IO</h1>

<p>IO has been a bit of a losing proposition since at least 0.2. The interface is
very primitive and inefficient. It requires using <code>@Trait</code> objects (<code>@Reader</code>
/ <code>@Writer</code>). It&rsquo;s also very undocumented. But the situation isn&rsquo;t going to
improve much because all of that code is getting torn out when brson/the
interns finish their work on the new runtime. On the plus side, we&rsquo;ll have
shiny new IO when they&rsquo;re done! If you want to contribute, there&rsquo;s plenty of
work to be done in this area:</p>

<ul>
<li><a href="https://github.com/mozilla/rust/issues/6169">issue 6169</a></li>
<li><a href="https://github.com/mozilla/rust/issues/6850">issue 6850</a></li>
<li><a href="https://github.com/mozilla/rust/issues/4419">issue 4419</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-May/004305.html">brson&rsquo;s status report for June</a></li>
</ul>


<h1>Compiler</h1>

<p>The compiler is still buggy and inefficient. Lots of things work, but lots of
things don&rsquo;t. There&rsquo;s still some resolve bugs (the one mentioned above, as
well as some others, and perpetually poor error messages), default methods
don&rsquo;t work, debuginfo is incomplete, the compiler has quadratic codegen when
using <code>match</code>, so on and so forth. There&rsquo;s a lot of work to be done here but
it&rsquo;s not easy. I&rsquo;m writing a series about the compiler that should help new
contributors get started and grok how it all fits together. The only thing
making Rust usable right now is LLVM&rsquo;s fantastic optimization. Our no-opt
builds run slower than our opt builds under Valgrind. Ponder that for a
minute.</p>

<h1><code>rustpkg</code></h1>

<p>rustpkg is still heavily in-progress and unfinished. It&rsquo;s usable, but not
everything is implemented, and the documentation is incomplete. It&rsquo;s rather
unintuitive to use right now, but it does work! Read the
<a href="https://github.com/mozilla/rust/blob/master/doc/rustpkg.md">manual</a> carefully
if you want to use it.</p>

<h1>Documentation</h1>

<p>Documentation is poor. <code>rustdoc</code> is really bad, which doesn&rsquo;t help. I&rsquo;m
working on a new rustdoc (<a href="http://rustlog.octayn.net">I log my progress
here</a>), but it won&rsquo;t be ready for some weeks. Lots
of things are undocumented or near impossible to find because of how bad
<code>rustdoc</code> is. The tutorials need lots of work, and a guided tour of the
libraries would be nice, as well as a &ldquo;Rust By Example,&rdquo; showing how to
accomplish common goals. These aren&rsquo;t really hard to do, it&rsquo;s just that nobody
has done them yet.</p>

<h1>Libraries</h1>

<p>There are few robust libraries or bindings to libraries, for anything, besides
what is in std/extra. There&rsquo;s the stuff servo uses (glfw, skia, sdl), and an
opengl binding somewhere, but beyond that, you&rsquo;re on your own. The
<a href="https://github.com/crabtw/rust-bindgen">rust-bindgen</a> tool can help with
wrapping a C library. There is no GUI library available yet, no real
networking. It&rsquo;s easy to wrap a C library, you just need to be careful with
your <code>unsafe</code> blocks. Once again, these things aren&rsquo;t hard, they just haven&rsquo;t
been done yet.</p>

<h1>The future</h1>

<p>Basically everything is heavily WIP, but it&rsquo;s constantly improving. We always
need more contributors, ask in IRC if you&rsquo;re interested. Rust 0.7 is pre-alpha
quality, IMO. It would be silly to use Rust for something important, but don&rsquo;t
let that stop you from trying to do something ambitious. If you feel Rust is
still too young to get involved, but you want to track its progress, I write
<a href="http://cmr.github.io/blog/categories/this-week-in-rust/">This Week in Rust</a>,
which is an easy way to track our progress. 1.0 is tentatively planned for
first-quarter 2014, last I heard, and I don&rsquo;t think that is out of reach. 1.0
corresponds to &ldquo;maturity #2&rdquo; at the absolute minimum (the maturiy levels are
listed <a href="https://github.com/mozilla/rust/issues/milestones">as milestones</a>).</p>

<p>But don&rsquo;t be discouraged. It was far worse before! Rust is in a good position,
it&rsquo;s just not quite all there yet. This post may seem pessimistic, but the
progress Rust has made is astonishing. Here&rsquo;s to a wonderful 0.8!</p>

<h1>Some links</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/">Rust subreddit</a></li>
<li><a href="https://mail.mozilla.org/listinfo/rust-dev">Mailing list</a></li>
<li><a href="http://blog.gmane.org/gmane.comp.lang.rust.devel">Mailing list archives</a></li>
<li><a href="http://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust">IRC
Channel</a>
(it&rsquo;s <code>#rust</code> on irc.mozilla.org)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Structure and organisation of rustc]]></title>
    <link href="http://cmr.github.io/blog/2013/06/30/structure-and-organisation-of-rustc/"/>
    <updated>2013-06-30T16:03:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/30/structure-and-organisation-of-rustc</id>
    <content type="html"><![CDATA[<p><em>This is the second part of a planned series about <code>rustc</code>, the Rust compiler</em></p>

<p><strong>Consider this a work in progress until you don&rsquo;t see this warning anymore</strong>
I&rsquo;ll be updating/adding/amending stuff, but I&rsquo;m publishing what I have in the
hope that it&rsquo;s useful in the interim.</p>

<p>This post is going to discuss the structure and organisation of <code>rustc</code>,
covering the major moving parts and how they interact. I&rsquo;ll start, of course,
where it starts, and ending, of course, where it ends.</p>

<!-- more -->


<p><code>rustc</code> is a fairly large, complex beast. Unless otherwise mentioned, all
paths are relative to <code>src/librustc</code>. I&rsquo;m going to refer to the &ldquo;code being
compiled&rdquo; as the &ldquo;compilend&rdquo; (similar to subtrahend, dividend, etc). I made
this word up, I don&rsquo;t know if there is a better word for it.</p>

<h2>Beginning</h2>

<p>The entry point, <code>run_compiler</code> in <code>rustc.rs</code>, does simple argument parsing
and calls into the driver, in <code>driver/driver.rs</code>, which coordinates the
various pieces of the compiler and the rest of the argument parsing. The key
data structure here is the <code>Session</code>, which you can find (along with a bunch
of other things like the option context) in <code>driver/session.rs</code>. Back to the
driver, the function <code>compile_rest</code> is where most of the magic happens. This
function runs all the various passes over the compilend. It starts with
parsing and macro expansion and moves onto various static analysis of the code
to make sure it is correct, finally generating LLVM IR (intermediate
representation), running LLVM optimizations, and linking the final binary.</p>

<h2>An interlude</h2>

<p>If you&rsquo;re not familiar with compilers, you might find this process a
labyrinthine fractal of complexity. Which it is, don&rsquo;t get me wrong. But the
various pieces of the rust compiler are fairly well separated, even if they
are complex. The basic structure of a compiler is operations on a tree data
structure representing the compilend called an AST or Abstract Syntax Tree. An
AST is the output of parsing, and everything in the compiler is transforms or
analysis of this tree. Once everything is done, it takes this AST and
translates it into LLVM IR. This is probably the most hairy part of the
compiler, and it lives in <code>middle/trans</code>. LLVM IR is a representation of code
that the LLVM library can operate on to optimize and generate native machine
code. LLVM does most of the heavy lifting that a traditional compiler would
need to do (optimization and codegen), so the rest of <code>rustc</code> is largely
dedicated to actually dealing with Rust programs.</p>

<h2>Parsing (&ldquo;front&rdquo;)</h2>

<p>Parsing and macro expansion happen in <code>src/libsyntax</code>, so all paths in this
section will be relative to that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/06/29/this-week-in-rust/"/>
    <updated>2013-06-29T12:26:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/29/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the fourth issue of <em>This Week in Rust</em>, a weekly overview of Rust and its community.</p>

<p><code>0.7</code> is being cut soon (today, I think). There are preliminary release notes <a href="https://github.com/mozilla/rust/blob/master/RELEASES.txt">on
GitHub</a>. The tree has been quite calm, with regards to
breakage. Cycle time is still high, but at least when things land they don&rsquo;t break master.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>Issue churn this week was -1. Yay! Issue churn this month was -47. 61 people pushed 1,080 commits, changing 2,117 files
and adding a total of 53347 lines.  The top 10 committers were pcwalton, brson, dbaupp, strcat, bblum, nmatsakis,
acricto, Blei, me (cmr), and aatch.</p>

<p>Much of the work this week was cleanup or rebases of older PRs that just hadn&rsquo;t made it in yet.</p>

<h2>Notable additions, bugfixes, and cleanup</h2>

<ul>
<li>Eridius has finished (I think!) the last bit of UNIX <a href="https://github.com/mozilla/rust/pull/7436">terminal support</a>,
adding fallback and smarter detection. It should work in 8-color terminals now too.</li>
<li>pcwalton <a href="https://github.com/mozilla/rust/pull/7451">rewrote each_path</a>, with the goal of future performance
enhancements.</li>
<li>tjc has done a <a href="https://github.com/mozilla/rust/pull/7397">bunch</a> of
<a href="https://github.com/mozilla/rust/pull/7403">rustpkg</a> work.</li>
<li>aatch did some <a href="https://github.com/mozilla/rust/pull/7272">trans cleanup</a>.</li>
<li>gifnksm added <a href="https://github.com/mozilla/rust/pull/7414"><code>max_by</code> and <code>min_by</code></a> methods to <code>IteratorUtil</code> for getting
the largest/smallest value in an iterator given a score function.</li>
<li>brson got a fix that <a href="https://github.com/mozilla/rust/pull/7111">releases large stacks</a> after they are used to lower
memory usage.</li>
<li>mw has a bunch of <a href="https://github.com/mozilla/rust/pull/7432">debuginfo</a> work, as well as <a href="https://github.com/mozilla/rust/pull/7255">docs and
cleanup</a>.</li>
<li>Blei did an <a href="https://github.com/mozilla/rust/pull/7254">intrinsic overhaul</a>.</li>
<li>acrichto implemented <a href="https://github.com/mozilla/rust/pull/7291"><code>static mut</code></a>, for globals. Using them requires
unsafe code.</li>
<li>DaGenix <a href="https://github.com/mozilla/rust/pull/7207">cleaned up and extended</a> the SHA code.</li>
<li>acrichto renamed <code>.rc</code> files to <code>.rs</code>. <code>.rc</code> is deprecated and functionally equivalent to <code>.rs</code>, all new code should
use it. He also <a href="https://github.com/mozilla/rust/pull/7371">added</a> a <code>warnings</code> lint attribute for enabling/disabling
warnings in bulk.</li>
<li>indutny added <a href="https://github.com/mozilla/rust/pull/7257"><code>mman</code> (including <code>mmap</code>)</a> FFI.</li>
<li>dbaupp found a <a href="https://github.com/mozilla/rust/pull/7297">curious performance win</a> by changing some ordering around,
while also enabling conditionally defined macros and macro expansion to items with <code>#[cfg]</code> attributes.</li>
<li>Luqman <a href="https://github.com/mozilla/rust/pull/7410">fixed by-value self</a>.</li>
<li>acrichto expanded the <code>deriving(ToStr)</code> code to use <code>ToStr</code> on fields rather than using <code>fmt!("%?", x)</code>.</li>
<li>Blei <a href="https://github.com/mozilla/rust/pull/7214">fixed a lot of problems</a> with owned trait objects (<code>~Trait</code>).</li>
<li>sully has <a href="https://github.com/mozilla/rust/pull/7471">landed some default method fixes</a></li>
</ul>


<h2>Breaking Changes</h2>

<ul>
<li>As usual, <a href="https://github.com/mozilla/rust/pull/7274">a</a> <a href="https://github.com/mozilla/rust/pull/7334">bunch</a>
<a href="https://github.com/mozilla/rust/pull/7373">of</a> <a href="https://github.com/mozilla/rust/pull/7319">iterator</a> work.</li>
<li>pcwalton renamed Owned to Send and Const to Freeze, better reflecting their actual semantics.</li>
<li>He also disallowed <code>mut</code> from distributing over bindings. For example, the following code no longer works: <code>let mut
(a, b) = (c, d)</code>.</li>
<li>dbaupp <a href="https://github.com/mozilla/rust/pull/7430">converted</a> many vector functions to methods. He has a <a href="https://github.com/mozilla/rust/pull/7487">second
part</a> in line.</li>
<li>Luqman renamed the <code>finalize</code> method in the <code>Drop</code> trait to <code>drop</code>.</li>
</ul>


<h2>Other changes</h2>

<p>bblum did some trait/fn/closure bounds
<a href="https://github.com/mozilla/rust/pull/7314">here</a> and
<a href="https://github.com/mozilla/rust/pull/7354">here</a>, but I don&rsquo;t really
understand what they do or their significance. He said:</p>

<blockquote><p>it changes the way traits/closures and captured data fulfill kind bounds, so<br/>you can restrict or loosen the requirements instead of having the fixed<br/>defaults of &#8220;can only capture Send things in ~fn/~Trait&#8221;</p><p>one example is that you can add the extra requirement of Freeze, so you can<br/>put existential data inside of ARCs</p><p>see https://github.com/mozilla/rust/blob/master/src/test/run-pass/trait-bounds-in-arc.rs</p><p>http://smallcultfollowing.com/babysteps/blog/2013/06/11/data-parallelism-in-rust/<br/>is another, more complicated but less contrived, example for how they would be<br/>useful</p></blockquote>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-25">Tuesday meeting</a>
mainly discussed <code>@mut</code> and iterators, as well as some minor 0.7 releng stuff.
I suggest reading the <code>@mut</code> discussion yourself, but essentially it revolves
around it not quite fitting into the language, and that it could be easily
punted to a library. The iterator discussion was not notable.</p>

<h1>Discussion + Blog posts</h1>

<ul>
<li><a href="http://static.rust-lang.org/doc/tutorial-container.html">New container/iterator tutorial</a></li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/4528">&ldquo;Language support for external iterators&rdquo;</a></li>
<li><a href="http://spin.atomicobject.com/2013/06/25/rust-language/">&ldquo;Rust gets a lot of things right&rdquo;</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ha3yi/planning_a_project_in_rust/">&ldquo;Planning a project in rust?&rdquo;</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004572.html">&ldquo;Memory layout of types&rdquo;</a></li>
<li><a href="http://michaelwoerister.github.io/2013/06/28/Status-Update-2.html">mw&rsquo;s second status report</a></li>
</ul>


<h1>External projects</h1>

<ul>
<li>QuickCheck for Rust.

<ul>
<li><a href="https://github.com/blake2-ppc/qc.rs">GitHub</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1h0217/mockup_of_quickcheck/">Reddit discussion</a></li>
</ul>
</li>
<li>RustGnuplot (<a href="https://github.com/SiegeLord/RustGnuplot">GitHub</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I got started hacking rustc, and how you can too!]]></title>
    <link href="http://cmr.github.io/blog/2013/06/23/how-i-got-started-with-rust/"/>
    <updated>2013-06-23T08:06:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/23/how-i-got-started-with-rust</id>
    <content type="html"><![CDATA[<p><em>This is the first part of a planned series about <code>rustc</code>, the Rust compiler</em></p>

<p>I remember first hearing about Rust during the summer of 2011. In fact, I
remember the exact moment. I was at MIT, doing their Junction program. It was
during a seminar about semiconductors. I remember browsing through the source on github,
getting lost, and going home.</p>

<!-- more -->


<p>Fast forward to two months ago. A <a href="http://tech.slashdot.org/story/13/04/03/1646234/mozilla-and-samsung-collaborating-to-bring-new-browser-engine-to-android">slashdot post</a> appears, bringing Rust
back to the forefront of my consciousness. By this point I&rsquo;d actually gained
some programming chops, gotten a job, etc. I read through the Wikipedia
article, though &ldquo;hey, this looks like it has potential,&rdquo; and forgot about it.</p>

<p>Fast forward a week or two. The <a href="http://www.matasano.com/articles/crypto-challenges/">matasano crypto challenges</a> were linked
on HN. &ldquo;Our friend Maciej says these challenges are a good way to learn a new
language, so maybe now&rsquo;s the time to pick up Clojure or Rust.&rdquo; And pick up
Rust I did. Rust was a pretty easy language to get started with, with my
predominantly Python, C, and Lua background. Especially for the crypto
challenges, which start off fairly basic.</p>

<h1>First, some warnings:</h1>

<p>Rust is pre-alpha software. Backwards incompatible changes happen <em>weekly</em>,
either in the libraries, or in the language.  It&rsquo;s probably best to not write
any &ldquo;serious&rdquo; code in Rust right now, unless you plan on fixing it every few
weeks to keep up with the language. The nice part about contributing code to
the compiler is that when someone changes the language or a library, it is
their job to fix the code that uses it.</p>

<p>Make sure to use the <code>master</code> branch, and <strong>use the doc links under &ldquo;Trunk&rdquo;.
It will save you pain.</strong> Nothing is worse than accidentally using the 0.6
documentation and finding that a method has been renamed or removed, and
getting confused when the build fails halfway through.</p>

<p><strong>The Rust compiler is poorly written.</strong> This is an artifact of being written
in Rust, which, as stated, changes rapidly. Some code is very old, and uses
very old idioms, or doesn&rsquo;t use newer language features that would be cleaner
and easier to read. If you notice this, try and fix it! If you notice it, that
means you already more-or-less know what needs to be done to clean it up a
bit. If the change is very invasive, it&rsquo;s probably best to open an issue and
let an experienced dev deal with it. An example of a cleanup is <a href="https://github.com/mozilla/rust/pull/7315">pull request
7315</a>, which cleaned up indentation
and replaced some <code>if</code>s with <code>match</code>es.</p>

<p>Do not, repeat, <em>not</em>, use the <code>rustc</code> code as a source of &ldquo;how to write
Rust.&rdquo; Almost all of it is bad code. I don&rsquo;t even know where to tell you to
look to find consistently good code.  The upside is that generally reviewers
will catch suboptimal code, and suggest improvements.  <a href="https://github.com/mozilla/rust/pull/7207">This pull request, for
example</a>, used some old Rust
idioms, which the reviewers suggested fixes for. So feel free to get
elbow-deep in code without worrying <em>too</em> much about whether the code you&rsquo;re
writing is good or bad. General guidelines: avoid <code>@</code> always, avoid <code>~</code>
usually, use <code>Option</code> and <code>Result</code>, handle errors. That will guide you
straight most of the time, and by the time you know when to ignore those, you
probably already know what good Rust code is.</p>

<h1>Getting started</h1>

<p>The first thing I did was, of course, go to the <a href="http://www.rust-lang.org/">home page</a>. I read the
feature summary (which seemed mostly unchanged from when I first saw it.
Indeed, looking in the wayback machine, it is mostly unchanged). I read the
example, and clicked <a href="http://static.rust-lang.org/doc/tutorial.html">&ldquo;tutorial&rdquo;</a> over on the left. I built the compiler
while doing this. There are instructions for building Rust over at <a href="https://github.com/mozilla/rust/wiki/Note-getting-started-developing-Rust">the wiki</a>.
It&rsquo;s a lot easier to get started if you&rsquo;re using Linux or Mac, though not
impossible on Windows (just a bit more setup and waiting).</p>

<p>The tutorial left me confused and alone, and I&rsquo;m sure it did the same to
you. But it gave me enough information that I could write a base64 encode and
decoder, although I constantly referenced the tutorial. By this point I had
moved on to the second matasano challenge, and I found my first compiler bug:
<a href="https://github.com/mozilla/rust/pull/6072">really poor error messages</a>. Of course I had to fix this! Error
messages are easy, right?</p>

<p>Yes and no. With a codebase as large and complex as a compiler, there are many
layers of stuff you need to pick apart to figure out the cause and fix of an
issue. In my case, it was easy, just grep for the error message. The fix,
however, was more complex. I had to figure out how to turn a &ldquo;span&rdquo; (the
compiler&rsquo;s way of matching up an AST node with a chunk of source code) in a
string. Often you&rsquo;ll need to go digging through other files to figure out what
you can do, what data structures there are, etc.</p>

<p><strong>Rust makes this easy!</strong> There are no IDEs or any fancy tools, but Rust
source is insanely <code>grep</code>able. You see a method call like
<code>parser.parse_ident(...)</code>, you just need to grep for <code>fn parse_ident</code>.
Of course, actually understanding what the method does is a whole new can of
worms&hellip;</p>

<h1>Picking an issue to fix</h1>

<p>I think the best way to pick an issue to fix is to fix a bug you encounter
yourself. Ask in IRC about it, often someone will be online that either knows
about it and can point you in the right direction, or at the very least help
reproduce, debug, and sift through the issue trcker.</p>

<p>There is the <a href="https://github.com/mozilla/rust/issues?labels=E-easy"><code>E-easy</code></a>
label on certain issues. This are issues that shouldn&rsquo;t take too much trickery
to get done, though they might take some time to get &ldquo;acclimated&rdquo; to the
codebase. <code>E-easy</code> doesn&rsquo;t mean fast, it means easy. It might be tedius or
take non-trivial amounts of effort, but it shouldn&rsquo;t require overarching
design issues or a lot of knowledge about rust or rust internals.</p>

<p>Documentation always needs writing. Open a random file from libstd or
libextra, look for functions, structs, enums, and traits that aren&rsquo;t
documented. You&rsquo;ll get to see a bunch of Rust code, probably using features
you wouldn&rsquo;t otherwise see writing &ldquo;normal&rdquo; code.</p>

<h1>After you fix it</h1>

<p>Once you fix the issue, open a pull request. See <a href="https://help.github.com/articles/using-pull-requests">GitHub&rsquo;s
help</a> for how to do
this. If you get stuck or need additional help, jump onto IRC
(<a href="http://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust">webchat</a>)
and ask. Someone will have to review your changes, ask &ldquo;r?
$link_to_pull_request&rdquo; in IRC to expedite the process.</p>

<p>Feel free to ping me (cmr) on IRC if you have any questions or problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/06/22/this-week-in-rust/"/>
    <updated>2013-06-22T05:21:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/22/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the third issue of <em>This Week in Rust</em>, a weekly overview
of Rust and its community.</p>

<p>It has come to my attention that Github does not categorize some
merged-by-bors pull requests as &ldquo;merged&rdquo; and instead categorizes it as
&ldquo;closed&rdquo;. This skews the numbers and also the PRs that I looked through for
inclusion into twir. I&rsquo;ll no longer be including issue churn/PR numbers, and I
hope I didn&rsquo;t miss any import PRs in the last two issues.</p>

<!-- more -->


<h1>What&rsquo;s cooking in incoming?</h1>

<p>The last of the tree breakage has been cleaned up. The mysterious stack
corruption was traced down by Blei to occur in jemalloc. It has been disabled
until the real cause of the error is found. A bunch more buildbot
configurations have been turned on for auto, to fend off more breakage. The
tree is open, and aatch got out a new snapshot!</p>

<p>Most of the work this week is cleanup and preparation for 0.7, but since the
tree has been closed (and the extra auto buildbots lengthen the time it takes
for a PR to be tested for the day it has been open), not much has landed these
past few days, but a bunch happened earlier this week.</p>

<h2>Notable additions, bugfixes, and cleanup</h2>

<ul>
<li>doener made compiles faster by emitting less useless copies and allocations
in <a href="https://github.com/mozilla/rust/pull/7259">7259</a></li>
<li>aatch landed <a href="https://github.com/mozilla/rust/pull/7124">part 1</a> and <a href="https://github.com/mozilla/rust/pull/7182">part
2</a> of his huge trans refactor
effort, which make trans faster and less terrible.</li>
<li>sully got <a href="https://github.com/mozilla/rust/pull/7203">default methods</a>
less broken</li>
<li>yichoi landed a <a href="https://github.com/mozilla/rust/pull/7128">bunch</a> of
Android fixes.</li>
<li>vadimcn has <a href="https://github.com/mozilla/rust/pull/7134">fixed debuginfo</a>,
which is super amazing. This makes it a lot easier for the GSoC student (mw)
to get started.</li>
<li>doener has <a href="https://github.com/mozilla/rust/pull/7186">fixed</a> some
pathological behavior in how codegen creates cleanup blocks. This makes the
IR better, reducing compile time, and also allowing better optimization,
reducing binary size.</li>
</ul>


<blockquote><p>They reduce compile times by about 10% in total.</p><footer><strong>@dotdash</strong> <cite><a href='https://github.com/mozilla/rust/pull/7259'>github.com/mozilla/rust/pull/&hellip;</a></cite></footer></blockquote>




<blockquote><p>Reduces the size of librustc by about 5% and the time required to build<br/>it by about 10%.</p><footer><strong>@dotdash</strong> <cite><a href='https://github.com/mozilla/rust/pull/7186'>github.com/mozilla/rust/pull/&hellip;</a></cite></footer></blockquote>




<blockquote><p>The resulting code for rustc is about 13% faster (measured up to and<br/>including the &#8220;trans&#8221; pass) and the resulting librustc is about 5%<br/>smaller.</p><footer><strong>@dotdash</strong> <cite><a href='https://github.com/mozilla/rust/pull/7154'>github.com/mozilla/rust/pull/&hellip;</a></cite></footer></blockquote>


<h2>Breaking changes</h2>

<p>strcat <a href="https://github.com/mozilla/rust/pull/7263">continues</a>
<a href="https://github.com/mozilla/rust/pull/7162">work</a> with iterators. The changes
that landed are vector cleanups. Probably most importantly, the <code>each</code> and
<code>eachi</code> methods are being removed. The <code>eachi</code> removal landed but the <code>each</code>
one broke bors, so it&rsquo;s currently in limbo (<strong>UPDATE</strong> 6/23/2013: it landed).
The current replacement is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// each
</span><span class='line'>for your_vec.iter().advance |element| {
</span><span class='line'>  ...
</span><span class='line'>}
</span><span class='line'>// eachi
</span><span class='line'>for your_vec.iter().enumerate().advance |(i, element)| {
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once the rest of the iterator work is hashed out and lands, it will just be</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// each
</span><span class='line'>for your_vec |element| {
</span><span class='line'>  ...
</span><span class='line'>}
</span><span class='line'>// eachi
</span><span class='line'>for your_vec.enumerate() |(i, element)| {
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>although the syntax might be slightly different (<code>for element in your_vec</code> is
my favorite proposal).</p>

<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-18">Tuesday
meeting&rsquo;s</a>
main topics were once fn&rsquo;s and how namespaces work. For once fn&rsquo;s, graydon
says &ldquo;I&rsquo;m concerned with adding new features and I want to see if we can live
without it, I understand it is common,&rdquo; not yet making a decision to include
them in the language.</p>

<h1>Meetups</h1>

<ul>
<li>tjc&rsquo;s pre-talk and talk, &ldquo;Rust: A Friendly Introduction&rdquo; went very well. The
<a href="http://catamorphism.org/Writing/Rust-Tutorial-tjc.pdf">slides</a> are up, and
a recording is coming soon (hopefuly). tjc says the slides aren&rsquo;t as
understanable without the audio of the talk.</li>
<li>nmatsakis has expressed willingness/interest in a Boston meetup sometime. If
you&rsquo;re interested, contact him on IRC or the ML.</li>
</ul>


<h1>Notable discourse and external projects</h1>

<ul>
<li><a href="http://maniagnosis.crsr.net/2013/06/mmap-and-rust-foreign-function-interface.html">mmap and the Rust FFI</a>
(indutny is working on mman bindings in libc, for the record. will mention
in next week&rsquo;s twir when it lands)</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004480.html">code generation and rustc speed</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1gs93k/rust_for_game_development/">Rust for game development?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1grj61/feed_us_some_low_hanging_fruit/">Feed us some low hanging fruit!</a></li>
<li><a href="http://aatch.github.io/blog/2013/06/19/paying-technical-debt-in-rustc/">Paying Technical Debt in rustc</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1gpbcs/what_issues_in_rust_today_effect_you_most/">What issues in Rust today effect (sic) you most?</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004520.html">rustdoc rewrite and redesign</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1gmac5/linux_rustbench_a_tool_for_profiling_memory_usage/">rust-bench: a tool for profiling memory usage</a></li>
</ul>


<h1>Other announcements</h1>

<ul>
<li>Michael Woerister (mw), the GSoC student working on debug info, has begun
work. His <a href="http://michaelwoerister.github.io/">project log</a> will be updated
weekly. I&rsquo;m looking forward to a much better debug experience.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week In Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/06/15/this-week-in-rust/"/>
    <updated>2013-06-15T22:00:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the second issue of <em>This Week In Rust</em>, a weekly overview
of Rust and its community. I&rsquo;ll be covering what&rsquo;s cooking in incoming,
meeting summaries, meetups, and anything else pertinent.</p>

<p>I&rsquo;ve decided to stop using real names and use irc/github names, simply because
that is how I, and most everyone, interacts in the community.</p>

<!-- more -->


<h1>What&rsquo;s cooking in incoming?</h1>

<p>There&rsquo;s been a lot of breakage on incoming this week, with jemalloc breaking
32bit cross-compilation as well as random segfaults and stack corruption of
unknown cause.  Some heroics by the core devs have got it mostly cleaned up,
though the tree is still rather chaotic. Meanwhile a handful of performance
improvements have landed, and achricto rewrote <code>rusti</code>.</p>

<p>There were 17 pull requests merged this week. Total issue churn (excludes pull
requests) this week was +2 (this excludes the 38 pull requests that were
closed when incoming was killed).</p>

<h2><code>incoming</code> branch annihilated</h2>

<p>Goodbye <code>incoming</code>, hello <code>master</code>! This change, long in coming, unfortunately
closed all open PRs. Start doing your development against <code>master</code> rather than
incoming.</p>

<h2>Notable additions, bugfixes, and cleanups</h2>

<p>There&rsquo;s a concerted effort to remove duplicate freestanding functions where
possible.</p>

<ul>
<li>In <a href="https://github.com/mozilla/rust/pull/6986">6986</a> bjz and jensnockert have cleaned up the numeric code some
more, adding methods for existing things like <code>sin</code>, as well as adding a
bunch of interpolation stuff.</li>
<li>steven_is_false added prototype dynamic library loading support in
<a href="https://github.com/mozilla/rust/pull/7027">7027</a>, which should remove a lot of pain for people looking for
easy dynamic loading. It currently doesn&rsquo;t work on Windows, so if you can
sling Windows code, help would be appreciated!</li>
<li>In <a href="https://github.com/mozilla/rust/pull/7029">7029</a> luqmana allows having multiple impl&rsquo;s add static methods,
which previously did not work.</li>
<li>Eridius stepped up to <a href="https://github.com/mozilla/rust/pull/7133">fix the terminfo code</a>, colors should be
arriving to more people soon.</li>
<li>SiegeLord <a href="https://github.com/mozilla/rust/pull/7077">improved the CSS</a> used by rustdoc with <em>huge</em> improvements.</li>
<li>sully has gotten default methods working for the most part, he is still
testing cross-crate edge casses.</li>
<li>vadimcn <a href="https://github.com/mozilla/rust/pull/7134">has fixed debuginfo</a>, and supposedly the GSoC intern is
getting started on improving it next week.</li>
<li>doener has got <a href="https://github.com/mozilla/rust/pull/7154">some nice</a> <a href="https://github.com/mozilla/rust/pull/7144">performance</a> PRs in place.</li>
<li>aatch is working on <a href="https://github.com/mozilla/rust/pull/7124">cleaning up trans</a>. Huge thanks to him!</li>
</ul>


<h2>Breaking changes</h2>

<ul>
<li>dbaupp and strcat continue their cleanup of the standard library, removing
the ad-hoc iterator functions where <code>std::iterator</code> can replace them.</li>
<li>All of the string functions that could be reasonably converted to methods
have been.</li>
<li>If you&rsquo;re working in the stdlib, acrichto has toggled most of the lint
settings to &ldquo;deny&rdquo; for std/extra, so watch out.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-11">Tuesday meeting</a> talked about bblum&rsquo;s <a href="https://github.com/mozilla/rust/wiki/Proposal-for-effects">Effect proposal</a>,
removing the master/incoming split, and &ldquo;alloc expressions&rdquo;, a replacement for
@-sigils.</p>

<p>The consensus on the effect proposal is that it needs investigation and
wouldn&rsquo;t be landing in 1.0.</p>

<p>Discussion about master/incoming mostly centered on &ldquo;master isn&rsquo;t always
green, how can we add better coverage to bors&#8217; tests?&rdquo; Consensus seems to be
that removing incoming would be beneficial, but enabling more OS and valgrind
coverage on bors would harmfully impact development speed.</p>

<p>The proposed syntax for alloc expressions is <code>new (provider) expr</code>, with <code>new
expr</code> becoming the replacement for the current <code>~expr</code>. This would allow
custom smart pointers. pcwalton ended the meeting with a huge cliff hanger</p>

<blockquote><p>I&#8217;ve been meaning to talk a little bit today about simplifying the<br/>mut-borrowing story in regards to this, we may be able to effect a large<br/>simplification on the language</p></blockquote>


<p>Personally, I think <a href="https://gist.github.com/Kimundi/5744578">kimundi&rsquo;s proposal</a> has a lot of promise, and the
syntax is more pleasing to me. It wasn&rsquo;t brought up at the meeting, though.</p>

<h1>Meetups</h1>

<ul>
<li>The Mountain View meetup was a great success. 18 showed up. erickt is
planning for another SF Bay area meetup in July. If you want to give a
presentation, send him your proposal and how long you need to put it
together.</li>
<li>Tim Chevalier will be giving a talk titled &ldquo;Rust: A Friendly Introduction&rdquo;
on Monday, June 17, 6-9pm in Portland. See <a href="http://calagator.org/events/1250464376">Calagator</a> for more
details. This is a preview of a talk he will be giving at <a href="http://opensourcebridge.org/sessions/970">Open Source
Bridge</a>, also in Portland.</li>
</ul>


<h1>Notable discourse</h1>

<ul>
<li>Still more discussion about <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004364.html">iterators</a>, this time focusing around
<a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004465.html">changing the semantics</a> of the <code>for</code> loop.</li>
<li>Some discussion about <a href="http://www.reddit.com/r/rust/comments/1gag3t/list_comprehensions_in_rust_iterator/">list comprehensions</a>, including initial
proofs-of-concept.</li>
<li>Graydon explains hashing and versioning
<a href="https://botbot.me/mozilla/rust/msg/3792753/">https://botbot.me/mozilla/rust/msg/3792753/</a></li>
<li>Principal author of 0install evaluates rust among other languages as a
python replacement
<a href="http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/">http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/</a></li>
<li>Niko thinks about parallelism
<a href="http://smallcultfollowing.com/babysteps/blog/2013/06/11/data-parallelism-in-rust/">http://smallcultfollowing.com/babysteps/blog/2013/06/11/data-parallelism-in-rust/</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/06/11/on-the-connection-between-memory-management-and-data-race-freedom/">http://smallcultfollowing.com/babysteps/blog/2013/06/11/on-the-connection-between-memory-management-and-data-race-freedom/</a></li>
</ul>


<h1>Other announcements</h1>

<ul>
<li>bjz tells me lmath is <em>actually</em> fixed now, and is usable</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Reflection]]></title>
    <link href="http://cmr.github.io/blog/2013/06/15/a-reflection/"/>
    <updated>2013-06-15T08:21:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/15/a-reflection</id>
    <content type="html"><![CDATA[<p>Today I graduated high school. It was quite a journey and I feel some
reflection is due.</p>

<!-- more -->


<h1>Regrets</h1>

<p>Randy Pausch said &ldquo;It is not the things we do in life that we regret on our
death bed. It is the things we do not.&rdquo; I agree with this. Fortunately, I have
few regrets about high school. I did not party, drink, or drug. I did not
participate in many clubs. I did not make many friends. I did, however, study,
almost constantly. Not for tests or anything academic, as my transcript shows
and my classmates can affirm, but my interests. I have learned more about my
passion, computers, than I ever thought existed when I first got started.</p>

<p>I have not been the most diligent student. Frequently I did not complete my
work. This was probably a bad decision, but I justified it with the (dubiously
attributed) Twain quote, &ldquo;Never let your schooling interfere with your
education,&rdquo; although it was initially laziness combined with depression. As
far back as 4th grade I&rsquo;ve been struggling to keep up with various assignments
(I recall being a few chapters behind in math homework. Mrs. Marrotte made me
stay after school every day until it was finished.) Later on, especially
7th-11th grade, it was hard to rile up motivation to do homework when I could
barely rile up motivation to continue being alive.</p>

<p>By the time I had gone through counseling and started an anti-depressant and
could function like a healthy human, I found I didn&rsquo;t have the skills to do
what needed to be done. I had not had practice or experience doing non-trivial
activities that I did not care about. I continue to struggle with this. It&rsquo;s
part procrastination too, which there&rsquo;s no excuse for. Another Randy Pausch
quote applies here: &ldquo;I&rsquo;ve always believed that if you took one tenth the
energy you put into complaining and applied it to solving the problem, you&rsquo;d
be surprised by how well things can work out.&rdquo;</p>

<p>But I don&rsquo;t regret not completing all of my work. Even if I did not finish and
pass in the homework, I did learn the content rather well. I wasn&rsquo;t content
not understanding something (except transcendentalism, but that is its own
story). I regret not making the most of my time in school. I could have been
much more engaged with the community of my peers. I&rsquo;m not sure that I actually
desire that difference, though. Time spent with my peers was instead spent
studying, programming, or playing video games. I graduate with 2 of my close
friends and a handful of good acquaintances (I use &ldquo;friend&rdquo; very reservedly).</p>

<p>I definitely regret not being more involved and dedicated to Destination
Imagination. It&rsquo;s a great program and I feel like I let down my teammates (and
probably frustrated the advisor). This also applies to science club and mock
trial, though to a lesser extent.</p>

<p>I really wish depression hadn&rsquo;t hit me like a train. It was manageable until
9th grade. From there it was a downward spiral of self-hatred, cutting, and
suicidal thoughts (and one attempt sophomore year). I know we are the sum of
our experience, and mine have made me stronger, but I would trade it in in a
heartbeat.</p>

<h1>Thanks</h1>

<p>Beyond teaching the standard curricula, I owe some teachers huge amounts of
thanks (roughly in chronological order):</p>

<ul>
<li>Mrs. Cook for encouraging me to be, as she phrased it, &ldquo;an odd duck.&rdquo; I was
very sad to see her leave after a single year at the school, she was a
good teacher.</li>
<li>Julia Zimmerman and Paul Kreiner (during Junction 2011 at MIT) for so many
reasons. They were constantly encouraging, even when my writing was
terrible. They taught me how appreciate science fiction and all forms of
writing, showing the science behind writing through linguistics.</li>
<li>Mrs. Stroshine for <em>really</em> teaching how to analyze and appreciate usage of
the English language, and also for putting up with me as I finished Junior
English my Senior Year. I procrastinated so much and was actually afraid of
you (although that construction was entirely in my head, you are a very nice
person). You are a fantastic teacher and I hope you enjoy your retirement.</li>
<li>Mr. Smith for his passion for history. It has definitely rubbed off on me,
especially your message that history isn&rsquo;t static, it is constantly open to
reinterpretation as more evidence is presented.</li>
<li>Mr. Fazio for his gentle encouragement and toleration of my (usually
advanced, sometimes off-topic) questions in the middle of his lessons, as
well as not giving up near the end of the year in Senior Math Topics. I did
actually learn in that class.</li>
<li>Dr. Kaplan for fostering a healthy skepticism in me. Your occasional
off-track discussions that you allowed (although never skipping a beat with
the curriculum) throughout our two years were always informative. These will
stick with me longer than how to balance redox reactions.</li>
<li>Ms. Gigliello for understanding me almost uncannily (supposedly her daughter
is just like me. Which is, of course, a good thing). The discussions you
(lightly moderated) during class never failed to engage me. Circle time is a
wonderful invention.</li>
<li>Mr. Dunn for letting me work in his room all the time and for his farewell
address. You are a great asset to the school, and your retirement has
definitely been earned.</li>
</ul>


<p>And finally</p>

<ul>
<li>Mr. Kuhn. You are possibly the best teacher I ever had, especially
considering some of the most important lessons you taught me were outside of
any class I was in. You always challenged me to think creatively and to
stretch beyond myself, but within my means. My biggest regret is not
spending more time with you this year (I felt awful for the DI fiasco, I was
embarrassed to even see you in the hall: an unfounded feeling I know).</li>
</ul>


<p>Not only have you taught me your respective curricula, you have <em>changed the
way I think</em>. Your influence, and my appreciation, can not be overstated. You
do not get paid nearly enough for what you do.</p>

<p>There are some non-teachers that get some love too:</p>

<ul>
<li>Joanne Walsh, who always gave me crap for being late to school. You are an
amazing, patient, kind person. It meant a lot to me to see you at
graduation. Thank you.</li>
<li>Roni Hoffmanm. You were my mom away from home and always made sure I was
behaving as a decent human should. During conversation you called yourself a
&ldquo;peon&rdquo; and a &ldquo;little person.&rdquo; Nothing could be further than the truth. You
are incredibly important and a great role model.</li>
</ul>


<p>I will not miss Monadnock, but I will miss the faculty. The quality of the
teachers is very high. The political changes happening around them are
unfortunate.</p>

<h1>The future</h1>

<p>I will be studying Computer Science at Clarkson University in the fall. I will
not squander my time there like I did my time in high school.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week In Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/06/07/this-week-in-rust/"/>
    <updated>2013-06-07T18:46:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/06/07/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the first issue of <em>This Week In Rust</em>, a weekly overview
of Rust and its community. I&rsquo;ll be covering what&rsquo;s cooking in incoming,
meeting summaries, meetups, and anything else pertinent. Any ideas, email them
to me, <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#99;&#x6f;&#114;&#101;&#x79;&#43;&#x72;&#x75;&#115;&#116;&#64;&#x6f;&#99;&#116;&#x61;&#121;&#x6e;&#46;&#x6e;&#x65;&#x74;">&#x63;&#111;&#114;&#101;&#x79;&#x2b;&#x72;&#117;&#115;&#x74;&#64;&#111;&#99;&#x74;&#x61;&#121;&#110;&#x2e;&#110;&#x65;&#x74;</a>.</p>

<p>The Rust interns arrived this week and have got cracking right away. Big hello
to Aaron Todd, Ben Blum, and Michael Sullivan! We can look forward to work all
over the place, especially in the RT and debug-info.</p>

<!-- more -->


<h1>What&rsquo;s cooking in incoming?</h1>

<p>There were 30 pull requests merged this week. A scattering of doc fixes and a
bunch of code cleanups and optimization work as usual. Total issue churn
(excludes pull requests) this week was +6.</p>

<h2>Notable additions, bugfixes, and cleanups</h2>

<ul>
<li>Ben Striegel added the <code>as_c_str</code> string function as a method as part of the
overall methodization covered by <a href="https://github.com/mozilla/rust/issues/6045">6045</a>.</li>
<li>James Miller landed a much better optimization pipeline in <a href="https://github.com/mozilla/rust/pull/6881">6881</a>,
fixing a bunch of nascent optimization problems, especially with inlining,
and also fixing an earlier (huge) regression (that he introduced,
admittedly).</li>
<li>James also fixed <a href="https://github.com/mozilla/rust/issues/6977">6977</a>, which allowed nonsensical expressions like <code>[0,
..-1]</code>. Whoops!</li>
<li>I introduced terminfo handling to <code>extra::term</code> in <a href="https://github.com/mozilla/rust/pull/6826">6826</a>, bringing
rustc&rsquo;s beautiful colors to a wider audience.  Unfortunately, it isn&rsquo;t
complete yet and, most notably, does not handle <code>xterm-256color</code> correctly
yet.</li>
<li>Daniel Micay landed jemalloc as the default allocator in the runtime,
leading to nice allocation performance boosts on all platforms, as well as
much improved multithreaded performance. It also has the benefit of
cross-platform tuning and instrumentation.</li>
</ul>


<h2>Breaking changes</h2>

<p>It would be silly not to mention these changes, even though they weren&rsquo;t
strictly this week:</p>

<ul>
<li><code>libcore</code> was renamed to <code>libstd</code> and <code>libstd</code> was renamed to <code>libextra</code>, to
better reflect their purpose. Confusingly, the code in rustc still uses the
old names. Something to watch out for!</li>
<li>All of the module reexports were removed from the prelude, so if you use,
for example, <code>io::foo</code>, <code>vec::foo</code>, etc, you will find yourself having to
add a lot of extra imports. <code>use std::*</code> to regain the old behavior,
more or less.</li>
<li>Patrick fixed the unsafe checker to safe code can no longer call unsafe
methods.</li>
</ul>


<p>This week:</p>

<ul>
<li><code>pub impl</code> was removed by Patrick Walton as part of <a href="https://github.com/mozilla/rust/pull/6944">6944</a>. What
this did was have all <code>fn</code>s in a <code>pub impl</code> be <code>pub</code> by default. Now, you
must explicitly specify <code>pub</code> on all <code>fn</code>s in the impl if you want them
public.</li>
<li>Also in <a href="https://github.com/mozilla/rust/pull/6944">6944</a>, Patrick removed the ability to have multiple
patterns appear in &ldquo;let&rdquo; declarations. For example: <code>let a = 4, b = 2;</code>
becomes <code>let (a, b) = (4, 2);</code></li>
<li>Daniel renamed the <code>Ptr</code> trait to <code>RawPtr</code> in <a href="https://github.com/mozilla/rust/pull/6913">6913</a></li>
<li>Daniel and Huon Wilson have been working on iterators a lot. In
<a href="https://github.com/mozilla/rust/pull/6999">6999</a>, they start removing the <code>vec::each_*</code> functions, as the new
iterator code in <code>std::iterator</code> is now mature enough for use.</li>
</ul>


<h1>Meetings</h1>

<p>There were two main meetings this week. Mostly discussion about DST, closures,
and the GC. Lots of issues and details remain to be worked out, I suspoect it
will still be a bit before anything final-looking comes up in a PR. See the
<a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-04">meeting</a> <a href="https://github.com/mozilla/rust/wiki/Meeting-2013-06-07">notes</a> for more details.</p>

<h1>Meetups</h1>

<ul>
<li>Erick Tryzelaar has a meetup planned in Mountain View on Wednesday, June 12,
at 7pm. See the <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004356.html">ML thread</a> for more details.</li>
<li>Tim Chevalier will be giving a talk titled &ldquo;Rust: A Friendly Introduction&rdquo;
on Monday, June 17, 6-9pm in Portland. See <a href="http://calagator.org/events/1250464376">Calagator</a> for more details.</li>
</ul>


<h1>Prominent blog posts and ML threads</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004364.html">https://mail.mozilla.org/pipermail/rust-dev/2013-June/004364.html</a></li>
<li><a href="http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures/">http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures/</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/">http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/">http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/</a></li>
<li><a href="http://pcwalton.github.io/blog/2013/06/02/removing-garbage-collection-from-the-rust-language/">http://pcwalton.github.io/blog/2013/06/02/removing-garbage-collection-from-the-rust-language/</a></li>
</ul>


<h1>Other announcements</h1>

<ul>
<li>10gen has some interns working on a MongoDB driver for Rust, which will be
very nice to have. Good luck to them!</li>
<li>Brendan Zabarauskas has fixed <code>lmath</code>. It now works on incoming. Yay!</li>
</ul>


<p>Brendan sent in a correction:</p>

<blockquote><p>Unfortunately whilst it builds on incoming, due to a bug you can&#8217;t use it in<br/>external crates. moonchrome and I am are working on fixing this but it will<br/>require us to remove the trait heirachy and use macros to generate each type<br/>(Vec3f, Vec3f32, &#8230; etc.) individually instead. Integer and Boolean vector<br/>types (present in GLSL) will also be removed.</p></blockquote>



]]></content>
  </entry>
  
</feed>
