<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rust 'n Stuffs]]></title>
  <link href="http://cmr.github.io/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2014-03-16T04:18:00-04:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/15/this-week-in-rust/"/>
    <updated>2014-03-15T23:33:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>66 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Some more string methods <a href="https://github.com/mozilla/rust/pull/12797">now return
Option</a>.</li>
<li>Matching on <code>~str</code> <a href="https://github.com/mozilla/rust/pull/12756">has been
removed</a>.</li>
<li>IO iterators <a href="https://github.com/mozilla/rust/pull/12414">now yield
IoResult</a>.</li>
<li>The channel types and constructor <a href="https://github.com/mozilla/rust/pull/12815">have been
renamed</a>. <code>Chan</code> is now <code>Sender</code>,
<code>Port</code> is now <code>Receiver</code>, and <code>Chan::new</code> is now <code>std::comm::channel</code>.</li>
<li><code>std::cmp::{min, max}</code> <a href="https://github.com/mozilla/rust/pull/12869">now require
TotalOrd</a>. For floats, use
<code>a.min(b)</code>.</li>
<li>The handling of <code>cfg(not(a, b))</code> <a href="https://github.com/mozilla/rust/pull/12893">has changed
slightly</a>.</li>
<li><code>libextra</code> <a href="https://github.com/mozilla/rust/pull/12896">has finally been
purged</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Another great PR from the illustrious ktt3ja, the compiler <a href="https://github.com/mozilla/rust/pull/12238">will now give
suggestions</a> on how to fix
lifetime woes. This is an awesome usability improvement.</li>
<li>There is a <a href="http://static.rust-lang.org/doc/master/guide-unsafe.html">new
guide</a> for &ldquo;low level and unsafe code&rdquo;.
<a href="https://github.com/mozilla/rust/pull/12887">PR</a>.</li>
<li>Partial type hints <a href="https://github.com/mozilla/rust/pull/12764">are now
implemented</a>, but not at the item
level (in function returns etc). This now lets one say <code>some_iter.collect::&lt;~[_]&gt;()</code>, which can very convenient.</li>
<li>There is now a lint for <a href="https://github.com/mozilla/rust/pull/12861">uses of
<code>~[T]</code></a>. It&rsquo;s very verbose.</li>
<li>Inline assembly <a href="https://github.com/mozilla/rust/pull/12798">now supports the <code>+</code>
modifier</a>.</li>
<li><code>char</code> <a href="https://github.com/mozilla/rust/pull/12561">now has simple case
folding</a>. That is, basic
locale-ignorant case conversion.</li>
<li>Support for basic backtracing <a href="https://github.com/mozilla/rust/pull/12602">has been
reimplemented</a>.</li>
<li><code>HashMap</code> <a href="https://github.com/mozilla/rust/pull/12081">has been
reimplemented</a> to use <a href="http://codecapsule.com/2013/11/11/robin-hood-hashing/">Robin Hood
hashing</a>. It&rsquo;s now much
more faster, and uses less space.</li>
<li>Implementations of <code>Deref</code> and <code>DerefMut</code> <a href="https://github.com/mozilla/rust/pull/12610">are now
considered</a> for automatic
dereferencing.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Adolfo Ochagav√≠a</li>
<li>Clark Gaebel</li>
<li>Peter Marheine</li>
<li>Piotr Czarnecki</li>
<li>Piotr Zolnierek</li>
<li>Robert Gawdzik</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-11">weekly
meeting</a>
discussed the new hashmap, destructuring the <code>self</code> argument, partial type
hints, coercion of returned values, as well as the requirements of unsafe
pointers and the continued existence of <code>*mut</code>.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>In the last two weeks, we landed 56 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton made fixes to ACID in
<a href="https://github.com/mozilla/servo/pull/1905">#1905</a></li>
<li>Along with about 20 other PRs, ms2ger brought WindowTimers up to date with
the spec in <a href="https://github.com/mozilla/servo/pull/1890">#1890</a></li>
<li>Pradeep Kumar implemented <code>position:absolute</code> in
<a href="https://github.com/mozilla/servo/pull/1681">#1681</a> and fixed up relative
positioning in <a href="https://github.com/mozilla/servo/pull/1808">#1808</a></li>
<li>Bill Yang fixed up our instructions for installation on Ubuntu Linux in
<a href="https://github.com/mozilla/servo/pull/1881">#1881</a></li>
<li>Bruno Abinader fixed up HTMLCollection in
<a href="https://github.com/mozilla/servo/pull/1838">#1838</a></li>
<li>Isabelle Carter ensured that children of <code>position:fixed</code> items make it into
the correct DisplayList in <a href="https://github.com/mozilla/servo/pull/1832">#1832</a></li>
<li>Manish Goregaokar made <code>getElementsByName</code> return a <code>NodeList</code> in
<a href="https://github.com/mozilla/servo/pull/1756">#1756</a></li>
<li>Keegan McAllister cleaned up our reftest harness and made them test both the
CPU and GPU rendering paths in
<a href="https://github.com/mozilla/servo/pull/1804">#1804</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Bill Yang (analyst74)</li>
<li>Manish Goregaokar (manishearth)</li>
</ul>


<h2>Meetings and Notes</h2>

<p>At this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-10">meeting</a>, we
discussed HTML parsing, embedding, writing modes, the ACID2 burndown, and the
Rust upgrade.</p>

<h1>RFCs</h1>

<p><a href="https://github.com/rust-lang/rfcs/blob/master/active/0001-rfc-process.md">We have a new RFC
process</a>!
Every week I&rsquo;ll list the new RFCs and RFCs that have been accepted.
Contributing to the discussions around these RFCs is the easiest way to drive
the design of Rust.</p>

<p>As an aside, I will no longer include any RFCs in the &ldquo;Announcements&rdquo; section
that are not sent to the RFC repository.</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/1">Private Fields by Default</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/3">Rearchitecting the attribute-usage lint</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/4">Unified Function Call Syntax</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/5">Virtual Structs</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/7">Add OsUnknown as a target operating system</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/8">Redesign Compiler Intrinsics</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/9">&ldquo;Fat Objects&rdquo; for DSTs</a>, an
alternative to &ldquo;Virtual Structs&rdquo;.</li>
</ul>


<h1>Project Updates</h1>

<p><a href="https://github.com/arjantop/rust-bencode">rust-bencode</a>, a pure Rust
implementation of Bencode encoding.
<a href="http://en.wikipedia.org/wiki/Bencode">Bencode</a> is used primarily in the
BitTorrent protocol. This implementation leverages the <code>serialize</code> crate for
automatic Encodable/Decodable implementation as well as custom, more flexible
FromBencode/ToBencode traits.</p>

<p><a href="https://gist.github.com/Kimundi/8782487">Lazily initialized statics v0.2</a>.
This makes safe use of statics for types which require runtime initialization
almost trivial. It utilizes the recent overloadable deref to do optional
initialization before returning the reference to the wrapped type. It&rsquo;s an
example that the right amount of abstractions, but syntactic (macros) and
semantic (operator overloading) can reduce boilerplate for a more pleasant
experience.</p>

<p><a href="https://github.com/phildawes/racer">Racer</a> &ndash; code completion for Rust. This
project is in its early stages, but can already do a fair bit of useful
completion. It is not using the parser (libsyntax) or compiler (librustc), so
it will likely always be inaccurate in some respect. Nevertheless, this may
prove to be an incredibly useful tool.</p>

<p><a href="https://github.com/BurntSushi/quickcheck">QuickCheck for Rust</a>. This has some
seriously great docs. QuickCheck, originally from Haskell, is a way of doing
property-based testing. You describe certain properties your code should have
and it generates random inputs, trying to find inputs that violate those
properties. This is a modern, featureful port of QuickCheck and hopefully gets
even more useful as time goes on.</p>

<p>The <a href="https://github.com/uutils/coreutils">coreutils port</a> is still alive and
making progress. 32 out of 119 programs are implemented. This is a great
project to contribute to if you want a relatively self-contained,
goal-oriented task. It&rsquo;s great practice both for learning Unix* (some of these
utilities are quirky or not-frequently-used) and Rust.</p>

<p>* Well, specifically GNU, which as we all know, <a href="https://en.wikipedia.org/wiki/GNU">ain&rsquo;t
Unix</a>.</p>

<h1>Other Announcements</h1>

<ul>
<li><a href="http://www.fastcolabs.com/3027664/under-the-hood-of-mozillas-new-multi-core-browser-and-the-open-source-language-that-powers-i">Under The Hood Of Mozilla&rsquo;s New Multi-Core Browser And The Open Source
Language That Powers
It</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20ct5c/march_meetup_live_stream_link_oss_parallel_layout/">Bay Area Rust, March 2014
Meetup</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20aj03/writing_an_os_in_rust_in_tiny_steps_steps_15/">Writing an OS in Rust in tiny
steps</a></li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/8878">&ldquo;Virtual fn&rdquo; is a bad
idea</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/11/this-week-in-rust/"/>
    <updated>2014-03-11T23:45:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/11/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This week was the Winter Workweek.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>66 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>Any</code> <a href="https://github.com/mozilla/rust/pull/12667">has been cleaned up</a>, and
in particular the <code>as_void_ptr</code> and <code>as_mut_void_ptr</code> methods are gone.</li>
<li>Patterns are <a href="https://github.com/mozilla/rust/pull/12715">no longer allowed in extern function
declarations</a>. Previously, they
either silently passed or ICEd.</li>
<li>Comparison traits <a href="https://github.com/mozilla/rust/pull/12520">have been
reworked</a>.</li>
<li>DeepClone <a href="https://github.com/mozilla/rust/pull/12706">has been removed</a>.</li>
<li>Compound assignment (eg, <code>+=</code>) <a href="https://github.com/mozilla/rust/pull/12733">is no longer
allowed</a> on potentially
uninitialized variables.</li>
<li><code>std::rand</code> <a href="https://github.com/mozilla/rust/pull/12650">has been moved into a
<code>librand</code></a>.</li>
<li>debuginfo flags <a href="https://github.com/mozilla/rust/pull/12714">have changed
slightly</a>, and more limited
debuginfo is supported again (only line number information).</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Dereferencing <a href="https://github.com/mozilla/rust/pull/12491">is now
overloadable</a>. This is another
part of the smart pointer changes. Code like <code>let x = *Rc::new(5);</code> is now
valid. There is a follow-up pull request that will automatically dereference
smart pointers where appropriate, to avoid expressions like
<code>foo.borrow().get().borrow_mut().get()</code>.</li>
<li>Hexadecimal floating point literals <a href="https://github.com/mozilla/rust/pull/12652">are now
available</a> through a syntax
extension.</li>
<li>Support for creating binary installer tarballs <a href="https://github.com/mozilla/rust/pull/12793">has
landed</a>.</li>
<li>Linker arguments <a href="https://github.com/mozilla/rust/pull/12688">are no longer
deduplicated</a>.</li>
<li>Weak linkage etc <a href="https://github.com/mozilla/rust/pull/12556">is now
possible</a> via a <code>linkage</code>
attribute.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Dmitry Promsky</li>
<li>Mike Boutin</li>
<li>Robert Gawdzik</li>
</ul>


<h1>Weekly Meeting</h1>

<p>There was no weekly meeting due to the workweek. There are <a href="https://github.com/mozilla/rust/wiki/Meeting-workweek-2014-03-03">notes and
minutes</a>,
however, and there will be many <a href="https://github.com/rust-lang/rfcs">RFCs</a> from
it.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/20143y/leveraging_tuples_to_make_a_statically_typed/">Leveraging tuples to make a statically-typed, concatenative
EDSL</a></li>
<li><a href="http://featherweightmusings.blogspot.com/2014/03/subtyping-and-coercion-in-rust.html">Subtyping and coercion in
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ztahv/rust_language_support_in_atom/">Rust support for the Atom
editor</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/02/this-week-in-rust/"/>
    <updated>2014-03-02T12:43:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/03/02/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>83 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>IterBytes and <code>std::to_bytes</code> <a href="https://github.com/mozilla/rust/pull/12492">have been
removed</a>. If you were depending on
them for anything non-<code>Hash</code> related, look into using <code>serialize</code> instead.</li>
<li><code>break</code> and <code>continue</code> <a href="https://github.com/mozilla/rust/pull/12338">are now hygienic in
macros</a>, with respect to labels.
Unfortunately there&rsquo;s a bug in it where <a href="https://github.com/mozilla/rust/issues/12512">loop labels hide variables of the
same name</a>.</li>
<li><code>extern fn</code> <a href="https://github.com/mozilla/rust/pull/12328">now always means <code>extern "C"
fn</code></a>, rather than being
context-dependent.</li>
<li><code>std::run</code> <a href="https://github.com/mozilla/rust/pull/12380">has been removed</a>,
and <code>std::io::process</code> improved to pick up the slack.</li>
<li><code>#[deriving(ToStr)]</code> <a href="https://github.com/mozilla/rust/pull/12412">has been
removed</a> in favor of
<code>#[deriving(Show)]</code>. <code>ToStr</code> is now implemented over all types which implement
<code>Show</code>, as <code>format!("{}" val)</code>.</li>
<li><code>flate</code> <a href="https://github.com/mozilla/rust/pull/12445">now returns a
<code>CVec&lt;u8&gt;</code></a> rather than a <code>~[u8]</code>,
for efficiency.</li>
<li><code>extra::json</code> <a href="https://github.com/mozilla/rust/pull/12453">has been
liberated</a> and now lives in
<code>libserialize</code>.</li>
<li><code>swap_remove</code> on vectors <a href="https://github.com/mozilla/rust/pull/12481">now returns an
<code>Option</code></a>.</li>
<li>A curious bug where bindings in match weren&rsquo;t treated as assignment <a href="https://github.com/mozilla/rust/pull/12508">has
been fixed</a>. See the associated
bug report for examples which this will break.</li>
<li>Some useless reexports <a href="https://github.com/mozilla/rust/pull/12485">have been
removed</a> from the prelude.</li>
<li>The <code>Bool</code> trait <a href="https://github.com/mozilla/rust/pull/12473">has been
removed</a>.</li>
<li>A bug where operator overloads were over-zealous <a href="https://github.com/mozilla/rust/pull/12493">has been
fixed</a>.</li>
<li>Statics are <a href="https://github.com/mozilla/rust/pull/11979">no longer allowed to contain anything with
destructors</a>. The exact rules are
laid out quite nicely in the PR.</li>
<li><code>collections:List</code> <a href="https://github.com/mozilla/rust/pull/12348">has been refactored to use
iterators</a>.</li>
<li><code>HashMap</code> <a href="https://github.com/mozilla/rust/pull/12544">is now generic over
hashers</a>.</li>
<li><code>assert_eq!</code> <a href="https://github.com/mozilla/rust/pull/12626">now uses <code>{}</code> instead of <code>{:?}</code> for the error
message</a>.</li>
<li>Type parameter overrides <a href="https://github.com/mozilla/rust/pull/12525">are now feature
gated</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Invalid crate handling <a href="https://github.com/mozilla/rust/pull/12645">is now more
graceful</a>.</li>
<li><code>std::io::stdout()</code> and <code>stderr()</code> <a href="https://github.com/mozilla/rust/pull/12630">are buffered by default
now</a>.</li>
<li>Improper operator overloads <a href="https://github.com/mozilla/rust/pull/12638">are no longer an
ICE</a>.</li>
<li>There&rsquo;s now a warning for <a href="https://github.com/mozilla/rust/pull/12595">publicly exposing private types in function
signatures</a>.</li>
<li><code>libnative</code>&rsquo;s Windows file handling <a href="https://github.com/mozilla/rust/pull/12584">has been
rewritten</a> and now actually works.
rustc uses libnative by default now.</li>
<li>Generated binary size <a href="https://github.com/mozilla/rust/pull/12616">has been brought down a
bit</a>. There is much more room for
improvement.</li>
<li>&ldquo;Strict Version Hashes&rdquo; <a href="https://github.com/mozilla/rust/pull/12533">have been
introduced</a>. This is a purely
internal change. The hash is of the crate&rsquo;s public ABI and rustc checks this
when linking crates together, to avoid problems such as &ldquo;def id drift&rdquo;.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Daniel Fagnan</li>
<li>Felix Crux</li>
<li>Gary M. Josack</li>
<li>George Papanikolaou</li>
<li>Jag Talon</li>
<li>Johannes L√∂thberg</li>
<li>Micka√´l Delahaye</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-25">weekly
meeting</a>
discussed TotalEq/TotalOrd, weak extern functions, channel naming, and a brief
discussion on <code>use</code> paths being absolute.</p>

<p>It was announced that a Sam Wright has been contracted to work on the
tutorial, and the Michael Woerister has been contracted to work on debug info.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 27 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Josh Matthews landed the massive changes to remove <code>@mut</code> from the DOM types
in preparation for a Rust upgrade in
<a href="https://github.com/mozilla/servo/pull/1735">#1735</a>
<a href="https://github.com/mozilla/servo/pull/1591">#1591</a> and
<a href="https://github.com/mozilla/servo/pull/1755">#1755</a>.</li>
<li>Tetsuharu Ohzeki refactored our commandline options out of the rendering
crate and into a more reasonable place in
<a href="https://github.com/mozilla/servo/pull/1738">#1738</a>.</li>
<li>Ms2ger simplified our Document implementation in
<a href="https://github.com/mozilla/servo/pull/1739">#1739</a>.</li>
<li>Patrick Walton removed the need to explicitly create leaf sets during
parallel layout in <a href="https://github.com/mozilla/servo/pull/1700">#1700</a>.</li>
<li>Harrison Gentry cleaned up some type names in
<a href="https://github.com/mozilla/servo/pull/1781">#1781</a>.</li>
<li>Keegan McAllister moved fontconfig in-tree on Linux in order to get a
thread-safe implementation in
<a href="https://github.com/mozilla/servo/pull/1780">#1780</a>.</li>
<li>Saurabh Anand made the DOM parser pass in the correct content types in
<a href="https://github.com/mozilla/servo/pull/1775">#1775</a>.</li>
<li>tgkokk fixed the bindings generator to no longer produce .pyc files in
<a href="https://github.com/mozilla/servo/pull/1735">#1735</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Saurabh Anand (sawrubh)</li>
<li>Harrison Gentry (hgentry)</li>
<li>tgkokk</li>
</ul>


<h2>Meetings</h2>

<p>At this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-24">meeting</a>, we
discussed embedding, the JSManaged conversion, a Rust upgrade, vtables, and
recruiting efforts.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/02/28/rust-rfc-opt-in-builtin-traits/">RFC: Opt-in Builtin
Traits</a></li>
<li><a href="https://github.com/mozilla/rust/issues/9912#issuecomment-36073562">Structural single-inheritance
counter-proposal</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/02/25/rust-rfc-stronger-guarantees-for-mutable-borrows/">RFC: Stronger Guarantees for Mutable
Borrows</a></li>
<li><a href="https://github.com/kvark/dark">Dark</a>, an experimental universal data
compressor based on the BWT-DC scheme</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/008832.html">cargo-lite
v1.1.0 release</a></li>
<li><a href="http://pcwalton.github.io/blog/2014/02/25/revamped-parallel-layout-in-servo/">Revamped parallel layout in
servo</a></li>
<li><a href="https://air.mozilla.org/rust-meetup-february-2014/">February Bay Area Rust
Recording</a></li>
<li><a href="https://github.com/brianmadden/rust-bloom-filter">A bloom filter implementation</a></li>
<li><a href="https://github.com/hoeppnertill/redox-tween">A tweening library</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/23/this-week-in-rust/"/>
    <updated>2014-02-23T16:09:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/23/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This is the busiest week in This Week in Rust&rsquo;s history, <a href="http://buildbot.rust-lang.org/bors/bors.html">and the pull request
queue isn&rsquo;t getting any
shorter</a>. This is a mixed
blessing: tons of work is getting done, but it takes forever to get merged.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>89 pull requests were merged this week. This is the most pull requests merged
in a week, ever. 10 1.0 issues were closed this week, and 0 opened.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Unique vector patterns (matching on a <code>~[]</code>) <a href="https://github.com/mozilla/rust/pull/12244">has been removed from the
language</a>. One can still match
against a slice.</li>
<li><code>std::unstable</code> <a href="https://github.com/mozilla/rust/pull/12311">has been
dismantled</a>. Even as we march
towards 1.0 stability, I will still consider changes to any public interface
breaking.</li>
<li><code>Bitwise::population_count</code> <a href="https://github.com/mozilla/rust/pull/12331">has been
renamed</a> to
<code>Bitwise::count_ones</code>.</li>
<li><code>TaskBuilder</code> <a href="https://github.com/mozilla/rust/pull/12232">has seen some
cleanup</a> to actually use the
emerging &ldquo;builder&rdquo; pattern.</li>
<li>As part of <code>std::num</code>s <a href="https://github.com/mozilla/rust/issues/10387">continued
revamp</a>, <a href="https://github.com/mozilla/rust/pull/12321">the <code>Real</code> trait has
been dismantled</a> in favor of the
<code>Float</code> trait.</li>
<li>Another issue with imports <a href="https://github.com/mozilla/rust/pull/12245">has been
fixed</a>. In particular, when
importing an item where there are two items with the name, one private and one
public, the private one was accidentally imported too. This shouldn&rsquo;t affect
any code, as it&rsquo;s a fairly convoluted case.</li>
<li>UTF-16 handling <a href="https://github.com/mozilla/rust/pull/12317">has been
refactored</a> to match the standard
string APIs.</li>
<li><code>extra::test</code> <a href="https://github.com/mozilla/rust/pull/12343">has been
liberated</a> into a <code>libtest</code>.</li>
<li><code>extra::time</code> <a href="https://github.com/mozilla/rust/pull/12411">has been
liberated</a> into a <code>libtime</code>.</li>
<li><code>EnumSet</code> <a href="https://github.com/mozilla/rust/pull/12415">has been moved</a> into
<code>libcollections</code>.</li>
<li>The <code>Integer</code> trait <a href="https://github.com/mozilla/rust/pull/12326">has
migrated</a> to <code>libnum</code>.</li>
<li><code>std::hash</code> <a href="https://github.com/mozilla/rust/pull/11863">has been rewritten and
redesigned</a>.</li>
<li><code>std::trie</code> and <code>std::hashmap</code> <a href="https://github.com/mozilla/rust/pull/12428">have been
moved</a> into <code>libcollections</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Pull request 12345 was opened. In the spirit of significant arbitrary
numbers, <a href="https://github.com/mozilla/rust/pull/12345">it is absolutely
menial</a>.</li>
<li><code>rustdoc</code> <a href="https://github.com/mozilla/rust/pull/12298">will now test code blocks by
default</a>, not requiring a &ldquo;rust&rdquo;
annotation.</li>
<li>Unix domain sockets <a href="https://github.com/mozilla/rust/pull/12103">are now
implemented</a> in <code>libnative</code>.</li>
<li><code>MutexArc</code> <a href="https://github.com/mozilla/rust/pull/12336">no longer has a <code>Freeze</code>
bound</a>.</li>
<li>rustdoc has seen <a href="https://github.com/mozilla/rust/pull/12339">a bunch of minor
fixes</a>.</li>
<li>More noteworthy, there is now <a href="https://github.com/mozilla/rust/pull/12416">syntax
highlighting</a> in rustdoc output!</li>
<li>The <code>unnecessary_parens</code> lint <a href="https://github.com/mozilla/rust/pull/12366">now looks at
assignments</a> for extraneous
parenthesis.</li>
<li>A bug with infinitely recursing macro errors <a href="https://github.com/mozilla/rust/pull/12370">has been
fixed</a>.</li>
<li><code>std::str::is_utf8</code> <a href="https://github.com/mozilla/rust/pull/12314">has been internally
refactored</a> to use 100% safe code,
as well as get a bit of a speed boost.</li>
<li><code>format!</code> <a href="https://github.com/mozilla/rust/pull/12349">now handles temporaries
better</a>.</li>
<li>If you find yourself working with libsyntax, <a href="https://github.com/mozilla/rust/pull/12387">there is now a <code>-Z</code>
option</a> for dumping the AST as
JSON. This can be useful when trying to figure out what code corresponds to
what structure or enum variant.</li>
<li>Using channels outside of the runtime <a href="https://github.com/mozilla/rust/pull/12397">has been
fixed</a>.</li>
<li>Generic Drop implementations with trait bounds <a href="https://github.com/mozilla/rust/pull/12403">has been
fixed</a>. Yay!</li>
<li>Integer formatting <a href="https://github.com/mozilla/rust/pull/12382">has been
rewritten</a>. It&rsquo;s now cleaner, does
less allocation, and is 3-6x faster in many cases.</li>
<li><code>std::io::stdin</code> <a href="https://github.com/mozilla/rust/pull/12422">is now buffered by
default</a>.</li>
<li>All language items <a href="https://github.com/mozilla/rust/pull/11603">must now be
reachable</a>. Previously this caused
a linker error.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Axel Viala</li>
<li>Craig MacKenzie</li>
<li>Douglas Young</li>
<li>Dylan Braithwaite</li>
<li>Ehsanul Hoque</li>
<li>Sterling Greene</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-18">weekly
meeting</a>
discussed the Hash changes, debug assertions, and commit log administrivia.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 15 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Sankha Narayan Guria made drawing a single line much more efficient in
<a href="https://github.com/mozilla/servo/pull/1709">#1709</a></li>
<li>Lars Bergstrom removed the last of the <code>@mut</code>s not in script in
<a href="https://github.com/mozilla/servo/pull/1712">#1712</a></li>
<li>Junyoung Cho fixed up a bug where we were removing <code>&amp;nbsp;</code>s in
<a href="https://github.com/mozilla/servo/issues/1727">#1727</a></li>
<li>Youngmin Yoo added support for the <code>&lt;object&gt;</code> element in
<a href="https://github.com/mozilla/servo/pull/1664">#1664</a></li>
<li>Keegan McAllister made use of the border box more consistent in layout
in <a href="https://github.com/mozilla/servo/pull/1699">#1699</a></li>
<li>Peiyong Lin fixed up the naming of some of our flow methods in
<a href="https://github.com/mozilla/servo/pull/1693">#1693</a></li>
<li>Simon Sapin refactored the <code>cascade</code> methods in
<a href="https://github.com/mozilla/servo/pull/1706">#1706</a></li>
<li>Adam Sinnett corrected the parent type names of Text, Comment, and PI
types in <a href="https://github.com/mozilla/servo/pull/1702">#1702</a></li>
<li>Patrick Walton added some inlining that sped up flow contruction even
more in <a href="https://github.com/mozilla/servo/pull/1602">#1602</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Peiyong Lin (lpy)</li>
<li>Adam Sinnett (quandrum)</li>
</ul>


<h2>Meetings</h2>

<p>We did not have a meeting this week because of President&rsquo;s Day in the US.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/drbawb/rust-story"><code>rust-story</code></a>, a Rust port of the
&ldquo;Reconstructing Cave Story&rdquo; video series</li>
<li><a href="http://www.reddit.com/r/rust/comments/1y69r0/rlanerustgamedevkit/"><code>rust-gamedev-kit</code></a>,
a collection of libraries for gamedev</li>
<li><a href="http://www.reddit.com/r/rust/comments/1yfdzh/the_periodic_table_of_rust_types/">Periodic Table of Rust
Types</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ykop6/so_i_wrote_a_dominion_simulator_in_rust_though/">A Dominion simulator, in
Rust</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-February/008763.html">Travis CI is building pull
requests</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1yr2uz/tetris_game_in_rust/">A terminal tetris game, in
Rust</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/15/this-week-in-rust/"/>
    <updated>2014-02-15T23:20:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>86 pull requests were merged this week. This ties for week with most merged
pull requests. <a href="http://cmr.github.io/blog/2013/09/23/this-week-in-rust/">A week in September 2013 is the other record
holder</a>. To cope with
the massively inflated queue, there were two roll-ups (not counted).</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>extern mod</code> <a href="https://github.com/mozilla/rust/pull/12017">is now written</a>
<code>extern crate</code>.</li>
<li>The big codegen compiler flags pull request I warned about last week <a href="https://github.com/mozilla/rust/pull/12084">indeed
landed</a>. Many <code>-Z</code> options are now
under <code>-C</code>, and a lot of previously-bare flags (such as <code>--linker</code>) are now
also under <code>-C</code>.</li>
<li><code>std::util</code> <a href="https://github.com/mozilla/rust/pull/11956">has been removed</a>.
<code>swap</code> and <code>replace</code> now live in <code>std::mem</code>.</li>
<li><code>do</code> is once again <a href="https://github.com/mozilla/rust/pull/12170">a reserved
word</a>.</li>
<li><code>extra::rational</code>, <code>extra::bigint</code>, and <code>extra::complex</code> <a href="https://github.com/mozilla/rust/pull/12154">have been
moved</a> into <code>libnum</code> as part of
the libextra dissolution.</li>
<li>The borrow checker&rsquo;s treatment of closures <a href="https://github.com/mozilla/rust/pull/12158">has been
revamped</a>. It fixes all known
soundness issues with closures. Unfortunately, it also breaks some programs
that used to compile.</li>
<li>Channels <a href="https://github.com/mozilla/rust/pull/11578">have been rewritten</a>
to use the internally-upgradable design <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007924.html">that was hashed out on the
list</a>.
Rather than having a separate <code>SharedChan</code>, <code>Chan</code> is now cloneable.</li>
<li>The <code>Seek</code> API <a href="https://github.com/mozilla/rust/pull/12204">has changed a
bit</a>.</li>
<li>The breaking changes in the <a href="https://github.com/mozilla/rust/pull/12248">first
rollup</a> are the removal of
<code>ptr::offset</code>, <code>ptr::mut_offset</code>, <code>ptr::is_null</code>, and <code>ptr::is_not_null</code> as
free functions and the movement of <code>extra::hex</code> and <code>extra::base64</code> to
<code>libserialize</code>.</li>
<li><code>std::num::Orderable</code> <a href="https://github.com/mozilla/rust/pull/12061">has been
removed</a>.</li>
<li><code>std::ptr</code> <a href="https://github.com/mozilla/rust/pull/12282">saw some more
cleanup</a>, most notably every
function ending in <code>_ptr</code> has had that suffix removed. <code>to_unsafe_ptr</code> and
<code>to_mut_unsafe_ptr</code> have also been removed.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Process arguments and environment variables <a href="https://github.com/mozilla/rust/pull/12283">now use the
<code>from_utf8_lossy</code> function</a> that
was introduced last week, rather than failing on invalid utf8. Additionally,
there are now <code>args_as_bytes</code> and <code>env_as_bytes</code> functions to get arguments
and the environment raw.</li>
<li>The makefiles <a href="https://github.com/mozilla/rust/pull/12274">have been
refactored</a>, and there is now a
<code>make help</code> and <code>make tips</code> for hints on how to use the build system.</li>
<li>In yet another multi-thousand-line patch by eddyb, <a href="https://github.com/mozilla/rust/pull/12162"><code>ast_map::Path</code> no
longer requires cloning</a>, due to
clever devilry.</li>
<li>green task spawning <a href="https://github.com/mozilla/rust/pull/12172">was sped up by almost
5x</a>.</li>
<li>We now <a href="https://github.com/mozilla/rust/pull/12027">bundle and use
compiler-rt</a> for intrinsics rather
than using the system libgcc. We still depend on libgcc for unwinding,</li>
<li>The pidigits benchmark was made 20x faster <a href="https://github.com/alexcrichton/rust/commit/7dc187afd8a19dad05dbf1a689e6b6f400f7bc0a">by optimizing
bigint</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Bruno de Oliveira Abinader</li>
<li>Eduard Bopp</li>
<li>Edward Wang</li>
<li>Jake Kerr</li>
<li>Liigo Zhuang</li>
<li>Matthijs van der Vleuten</li>
<li>Peiyong Lin</li>
<li>Tobias Bucher</li>
<li>WebeWizard</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-11">weekly
meeting</a>
discussed struct construction sugar, what to allow in statics, the crate
keyword, a <code>finally</code> macro, and implicit trait bounds.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 18 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Bruno Abinader landed several DOM fixes, including
<a href="https://github.com/mozilla/servo/pull/1648">#1648</a> and
<a href="https://github.com/mozilla/servo/pull/1646">#1646</a></li>
<li>Hyun June Kim landed initial <code>:hover</code> support in
<a href="https://github.com/mozilla/servo/pull/1633">#1633</a></li>
<li>Keegan McAllister restored task failure handling in
<a href="https://github.com/mozilla/servo/pull/1691">#1691</a></li>
<li>Rui renamed the .rc files to .rs in the main Servo repository in
<a href="https://github.com/mozilla/servo/pull/1617">#1617</a></li>
<li>Simon Sapin made some updates to attribute selector namespaces in
<a href="https://github.com/mozilla/servo/pull/1653">#1653</a> and
<a href="https://github.com/mozilla/servo/pull/1661">#1661</a></li>
<li>Lars Bergstrom began the removal of non-script-crate <code>@mut</code>s in preparation
for a Rust upgrade in <a href="https://github.com/mozilla/servo/pull/1663">#1663</a></li>
<li>Austin King added some <code>window.console</code> support in
<a href="https://github.com/mozilla/servo/pull/1666">#1666</a></li>
<li>Marek ≈†uppa landed a fix to our contributing document in
<a href="https://github.com/mozilla/servo/pull/1649">#1649</a></li>
<li>Patrick Walton made extensive optimizations to style sharing in
<a href="https://github.com/mozilla/servo/pull/1644">#1644</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Austin King (ozten)</li>
<li>Marek ≈†uppa (mrshu)</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-10">meeting</a>, we
discussed our embedding plans, ACID2 status, improving the availability of
E-Easy issues, and doing a Rust upgrade (we are more than one month behind
Rust master).</p>

<h1>Announcements, etc</h1>

<p>There is simply too much happening in the community to keep track of! I
recommend browsing <a href="http://www.reddit.com/r/rust">the Rust subreddit</a> for
goings-on. Some notable ones:</p>

<ul>
<li><a href="http://pzol.github.io/getting_rusty/posts/20140203_hashmap/">Rust By Example:
HashMap</a></li>
<li><a href="https://gist.github.com/bvssvni/8970459">State machines using phantom
types</a></li>
<li><a href="http://golo-lang.org/">golo-lang.org</a>&rsquo;s homepage design <a href="http://adridu59.github.io/rust-www/">adapted to
Rust</a>. There is some discussion <a href="http://www.reddit.com/r/rust/comments/1xx3ll/rfc_gololangorg_ported_to_rust/">on
reddit</a>
about this.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/09/this-week-in-rust/"/>
    <updated>2014-02-09T22:15:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/09/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>There were a surprising number of breaking changes this week. The <a href="https://github.com/mozilla/rust/issues/8784">libextra
dissolution continues</a>. Condition
removal and the IO error overhaul also landed. <code>rustpkg</code> was also removed, and
rustc&rsquo;s CLI interface has changed.  Additionally, Rust gained another
full-time developer! A big hello to Nick Cameron, I look forward to seeing his
work.</p>

<p>It was also <a href="http://octoverse.github.com/">discovered</a> that we closed the
second largest number of issues of any repository on GitHub! We trailed behind
homebrew, which is almost cheating, because they use it to track issues on
over five thousand packages. Good job everyone!</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>72 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Some intrinsics <a href="https://github.com/mozilla/rust/pull/12124">have been
moved</a> into <code>std::mem</code>, in
preparations of the intrinsics no longer being publically exposed.</li>
<li>A soundness regression <a href="https://github.com/mozilla/rust/pull/12117">has been
fixed</a>.</li>
<li><code>char</code> <a href="https://github.com/mozilla/rust/pull/12086">now has range asserts</a>.
This may cause invalid uses of <code>char</code> (using invalid values) to break.</li>
<li>The various traits in <code>std::fmt</code> <a href="https://github.com/mozilla/rust/pull/12066">now use
<code>&amp;self</code></a>, rather than a separate
parameter with an argument of type <code>&amp;Self</code>.</li>
<li><code>@self</code> and <code>@Trait</code> (managed trait objects) <a href="https://github.com/mozilla/rust/pull/12030">have been
removed</a>.</li>
<li><code>rustpkg</code> <a href="https://github.com/mozilla/rust/pull/11987">has been removed</a>.</li>
<li><code>std::fmt::Default</code> <a href="https://github.com/mozilla/rust/pull/11948">has been
renamed</a> to <code>Show</code>.</li>
<li>IO errors <a href="https://github.com/mozilla/rust/pull/11946">have been completely
overhauled</a>, and no longer use
conditions. Alex wrote <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-February/008505.html">an
email</a>
to the mailing list summarizing the changes. Especially take note of the
<code>if_ok!</code> macro.</li>
<li>Conditions <a href="https://github.com/mozilla/rust/pull/12039">have been removed
entirely</a>. A detailed post-mortem
is available on the pull request.</li>
<li><code>rustc</code> has seen some work on its interface. The output flags <a href="https://github.com/mozilla/rust/pull/12020">have been
unified</a>, replacing <code>-c</code>,
<code>--emit-llvm</code>, <code>-S</code>, <code>--dylib</code>, <code>--rlib</code>, etc with two arguments: <code>--emit</code> and
<code>--crate-type</code>. There is <a href="https://github.com/mozilla/rust/pull/12084">another PR in the
queue</a> that replaces a bunch of
miscellaneous flags behind <code>-C</code>. It will likely land shortly, and is something
to be aware of.</li>
<li><code>NonCopyable</code> <a href="https://github.com/mozilla/rust/pull/12016">has been renamed</a>
to <code>NoPod</code> to be consistent with the rest of the &ldquo;marker types&rdquo;.</li>
<li><code>reserve</code> naming <a href="https://github.com/mozilla/rust/pull/11951">has been shuffled around
slightly</a>. <code>reserve</code> becomes
<code>reserve_exact</code> and <code>reserve_at_least</code> becomes <code>reserve</code>.</li>
<li><code>SendStr</code> <a href="https://github.com/mozilla/rust/pull/12098">has been removed</a> in
favor of a <code>MaybeOwned</code> type.</li>
</ul>


<p>As part of the libextra dissolution, the following crates have been
introduced:</p>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/12010"><code>libcollections</code></a>, which has
inherited <code>Bitv</code>, <code>BTree</code>, <code>Deque</code>, <code>DList</code>, <code>List</code>, <code>LruCache</code>,
<code>PriorityQueue</code>, <code>RingBuf</code>, <code>SmallIntMap</code>, <code>TreeMap</code>, and <code>TreeSet</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/12007"><code>libgetopts</code></a>, which has
inherited <code>extra::getopts</code>. Additionally, <code>getopts::groups</code> is now the <em>only</em>
interface. It has been moved up a level, into just <code>getopts</code>, and the old
functions have been removed.</li>
<li><a href="https://github.com/mozilla/rust/pull/11984"><code>libserialize</code></a>, which has
inherited <code>extra::serialize</code> and <code>extra::ebml</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/11912"><code>libuuid</code></a>, which has inherited
<code>extra::uuid</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/12012"><code>libsemver</code></a>, which has
inherited <code>extra::semver</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/11945"><code>libterm</code></a>, which has inherited
<code>extra::term</code> and <code>extra::terminfo</code>.</li>
</ul>


<p>All crates are still documented, and there is a list with links at
<a href="http://static.rust-lang.org/doc/master/index.html">http://static.rust-lang.org/doc/master/index.html</a>.</p>

<h2>Other Changes</h2>

<ul>
<li>A <code>black_box</code> function <a href="https://github.com/mozilla/rust/pull/12105">has been added to
<code>extra::test</code></a>, and the <code>iter</code>
method on BenchHarness can now return values. As
<a href="https://github.com/mozilla/rust/pull/12119">documented</a> (<a href="http://static.rust-lang.org/doc/master/guide-testing.html#benchmarks-and-the-optimizer">generated
version</a>),
these exist to make sure that LLVM will not optimize out benchmarks.</li>
<li>A <code>fourcc!</code> syntax extension <a href="https://github.com/mozilla/rust/pull/12034">has been
added</a>.</li>
<li>A <code>unimplemented!</code> macro <a href="https://github.com/mozilla/rust/pull/12090">has been
added</a>, used much the same as
<code>unreachable!()</code>.</li>
<li>The [runtime libraries <a href="https://github.com/mozilla/rust/pull/12073">have gained
examples</a>, and
<a href="http://static.rust-lang.org/doc/master/green/index.html">libgreen</a> now has an
explanation of how it is structured at a high level, specifically where
concurrency and parallelism come from.</li>
<li>A <code>from_utf8_lossy</code> function <a href="https://github.com/mozilla/rust/pull/12062">has been
added</a> that replaces invalid
codepoints with the unicode replacement character (ÔøΩ).</li>
<li>Network streams <a href="https://github.com/mozilla/rust/pull/11894">are now
cloneable</a>. This allows for
multiple tasks reading/writing a <code>TcpStream</code>.</li>
<li>A copy-on-write Arc container <a href="https://github.com/mozilla/rust/pull/11230">has been added to
libextra</a>, though it&rsquo;s now in
<code>libcontainers</code>.</li>
<li>SIMD types <a href="https://github.com/mozilla/rust/pull/11717">are now allowed in
generics</a>.</li>
<li>A new mutex type that plays well with the various runtimes <a href="https://github.com/mozilla/rust/pull/11866">has been
implemented</a>. It is in the same
ballpark as native, pthread mutexes.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Arcterus</li>
<li>Cole Mickens</li>
<li>Colin Sherratt</li>
<li>HeroesGrave</li>
<li>Ivan Enderlin</li>
<li>James Deng</li>
<li>Jo√£o Souls</li>
<li>Marek ≈†uppa</li>
<li>Q.P.Liu</li>
<li>Yuri Kunde Schlesner</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-04">weekly
meeting</a>
discussed adding a <code>libprim</code>, operator overloading, and the 1.0 goals for
LLVM.</p>

<h1>Meetups</h1>

<ul>
<li>There will be a meetup <a href="http://www.eventbrite.fr/e/billets-rust-paris-meetup-10528169037">in
Paris</a>, on
February 25, from 18:30 to 23:30.</li>
<li><a href="http://www.meetup.com/Rust-Bay-Area/events/156288462/">Bay Area Rust</a> will
be meeting February 25, at 19:00 in San Francisco. David Renshaw will be
talking about Cap&#8217; Proto, Steven Fackler will be talking about exportable
macros, and Kevin Cantu about testing.</li>
</ul>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary
test cases for the Rust language.</p>

<p>This week, we landed 14 PRs, but there are a substantial number of very
close pending PRs that add major layout features to Servo (e.g., lists
markers, tables, initial pseudo-class and pseudo-element support).</p>

<h2>Notable additions</h2>

<ul>
<li>Bruno Abinader continued with his great DOM additions in
<a href="https://github.com/mozilla/servo/pull/1634">#1634</a> and
<a href="https://github.com/mozilla/servo/pull/1622">#1622</a> and
<a href="https://github.com/mozilla/servo/pull/1604">#1604</a></li>
<li>Patrick Kim fixed borders on inline boxes in
<a href="https://github.com/mozilla/servo/pull/1577">#1577</a> and landed
<code>position:relative</code> support in
<a href="https://github.com/mozilla/servo/pull/1613">#1613</a></li>
<li>Patrick Walton further improved layout performance in
<a href="https://github.com/mozilla/servo/pull/1630">#1630</a> and
<a href="https://github.com/mozilla/servo/pull/1615">#1615</a></li>
<li>Adrien Bustany fixed <code>insertBefore</code> in
<a href="https://github.com/mozilla/servo/pull/1621">#1621</a></li>
<li>Lars Bergstrom landed reftest stabilization fixes in
<a href="https://github.com/mozilla/servo/pull/1623">#1623</a> &ndash; we are almost ready to
gate landing commits on content and ref tests passing on Linux, once we get
more fonts <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=968375">installed</a>
on our Linux buildbots</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Adrien Bustany (abustany)</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-03">meeting</a>, we mainly
discussed display list construction with respect to layering and stacking
contexts.</p>

<p>Josh Matthews&#8217; talk on Servo at FOSDEM is available
<a href="http://mirrors.dotsrc.org/fosdem/2014/UD2218A/Saturday/Servo_building_a_parallel_web_browser.webm">here</a>.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1wvxcn/lazily_initialized_statics/">Lazily initialized
statics</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1wypbz/rust_gains_a_new_fulltime_developer_nick_cameron/">Rust gains a new full-time developer, Nick
Cameron</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1wz7ws/handling_io_errors/">Handling I/O
Errors</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x0zeu/adler32_and_crc32/">Pure-Rust Adler32 and
CRC32</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x1tvo/closures_and_the_borrow_checker/">Closures and the borrow
checker</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x3ooy/lzw_compression_algorithm/">Pure-Rust LZW Compression
Algorithm</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x67wq/rust_by_example_default_arguments_named_params/">Rust by Example: Default arguments,
etc</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xaum0/standalone_rust_app/">Standalone rust
app</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xfjo7/ide_support/">IDE support?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xdlou/playing_with_the_new_rust_io_error_handling/">Playing with the new Rust I/O error
handling</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xdudv/another_failed_attempt_at_parser_combinators/">Another failed attempt at parser
combinators</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xck76/a_case_for_reflection_in_rust/">A case for reflection in
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xa8uy/a_persistent_map_implementation_like_in_clojure/">A persistent map implementation, like in Clojure and Scala, with
performance
numbers</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/01/this-week-in-rust/"/>
    <updated>2014-02-01T18:45:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/01/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This was a good week, with default type parameters, <code>do</code> removal, <code>@[]</code>
removal, and some code bloat reduction.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>61 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>do</code> <a href="https://github.com/mozilla/rust/pull/11868">has been removed</a>. Replace
<code>do spawn { ... }</code> with <code>spawn(proc() { ... })</code>.</li>
<li><code>libextra</code> <a href="https://github.com/mozilla/rust/pull/11787">has exploded</a>. <a href="https://github.com/mozilla/rust/pull/11867">It
exploded some more</a>. It will
continue to explode until it no longer exists.</li>
<li><code>#[simd]</code> <a href="https://github.com/mozilla/rust/pull/11738">has been feature
gated</a>.</li>
<li>We <a href="https://github.com/mozilla/rust/pull/11706">now generate static
libraries</a> by default, rather than
dynamic libraries.</li>
<li><code>@[]</code> and <code>@str</code> <a href="https://github.com/mozilla/rust/pull/11974">have been removed from the
language</a>. All that is left is
<code>@T</code>!</li>
<li>Various methods on vectors <a href="https://github.com/mozilla/rust/pull/11944">now return
Options</a>, to be in line with the
rest of everything else.</li>
<li><code>next_power_of_two_opt</code> <a href="https://github.com/mozilla/rust/pull/11930">has been renamed
to</a> <code>checked_next_power_of_two</code>.
Additionally, the various functions for division in <code>std::uint</code> were removed.</li>
<li><code>#[no_send]</code> etc <a href="https://github.com/mozilla/rust/pull/11768">have been removed in favor of marker
types</a>. Additionally, variance of
types and lifetimes can explicitly be annotated with these marker types. They
are zero-sized and have no runtime impact.</li>
<li><code>std::borrow</code> <a href="https://github.com/mozilla/rust/pull/11895">has been
removed</a>.</li>
<li><code>Times</code> <a href="https://github.com/mozilla/rust/pull/11672">has finally been
removed</a>. Good riddance.</li>
<li>The various <code>CopyableVector</code>-like types have <a href="https://github.com/mozilla/rust/pull/11893">been
renamed</a> to
<code>CloneableVector</code> etc.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>There are now lints for <a href="https://github.com/mozilla/rust/pull/11754">unused
values</a>. Types annotated with
<code>#[must_use]</code> will now warn when (surprise) their results are not used.</li>
<li>debuginfo <a href="https://github.com/mozilla/rust/pull/11864">should now be fixed on OS
X</a>, due to us now explicitly
setting the DWARF version.</li>
<li><code>fp-elim</code> <a href="https://github.com/mozilla/rust/pull/11879">has been re-disabled, but only if debuginfo generation is
disabled</a>.</li>
<li>Errors from <code>#[deriving(...)]</code> have
<a href="https://github.com/mozilla/rust/pull/11826">seen</a> some
<a href="https://github.com/mozilla/rust/pull/11834">work</a>.</li>
<li>The evil environment pointers <a href="https://github.com/mozilla/rust/pull/11595">has been removed from bare
functions</a>, as well as <code>self</code> now
being a mostly-normal argument, to the compiler. This was a huge effort (88
changed files with 1,436 additions and 2,138 deletions) by Eduard Burtescu,
and is awesome!</li>
<li>Also from Eduard is <a href="https://github.com/mozilla/rust/pull/11217">default type
parameters</a>! They are currently
behind a feature flag, but allow you to say, for example, <code>struct Foo&lt;T =
uint&gt;</code> and use <code>Foo</code> as a bare type.</li>
<li>The tydesc <a href="https://github.com/mozilla/rust/pull/11909">is used in less
places</a> to help fend off code
bloat.</li>
<li>The occasional infinite recursion in some recursive types <a href="https://github.com/mozilla/rust/pull/11839">has been
fixed</a>.</li>
<li>Take glue <a href="https://github.com/mozilla/rust/pull/11723">has been removed from
tydescs</a>, also to fend off code
bloat.</li>
<li><code>fail!()</code> <a href="https://github.com/mozilla/rust/pull/11841">also generates less code
now</a>, to fend off bloat. In
particular, <code>fn main() { fail!() }</code> now compiles 2-3x faster due to generating
less code.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>JeremyLetang</li>
<li>Johannes Muenzel</li>
<li>Keshav Kini</li>
<li>Michael Darakananda</li>
<li>Nathaniel Herman</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-28">weekly
meeting</a>
discussed default type parameters, the unused result lint, minor changes to
the attribute syntax, how to deal with I/O splitting, and the visit glue.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 32 PRs, significantly above our usual PR landing rate!</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton landed a huge number of PRs that significantly improved our
performance and parallelism
<a href="https://github.com/mozilla/servo/pull/1600">#1600</a>,
<a href="https://github.com/mozilla/servo/pull/1564">#1564</a>,
<a href="https://github.com/mozilla/servo/pull/1567">#1567</a>,
<a href="https://github.com/mozilla/servo/pull/1589">#1589</a>,
<a href="https://github.com/mozilla/servo/pull/1566">#1566</a>
<a href="https://github.com/mozilla/servo/pull/1574">#1574</a>,
<a href="https://github.com/mozilla/servo/pull/1571">#1571</a>,
<a href="https://github.com/mozilla/servo/pull/1559">#1559</a>, etc.</li>
<li>Rui (xiongmao86) fixed a linking issue in our Makefiles in
<a href="https://github.com/mozilla/servo/pull/1603">#1603</a>.</li>
<li>Isabelle Carter landed multiple display list support in
<a href="https://github.com/mozilla/servo/pull/1579">#1579</a>.</li>
<li>Lars Bergstrom finally re-enabled ref tests in
<a href="https://github.com/mozilla/servo/pull/1565">#1565</a> and started a quest to
improve test reliability in
<a href="https://github.com/mozilla/servo/pull/1597">#1597</a> and
<a href="https://github.com/mozilla/servo/pull/1570">#1570</a>.</li>
<li>Bruno Abinader pushed on more DOM features in
<a href="https://github.com/mozilla/servo/pull/1583">#1583</a> and
<a href="https://github.com/mozilla/servo/pull/1580">#1580</a>.</li>
<li>Clark Gaebel (wowus) enabled a limit on the number of redirects Servo
follows in <a href="https://github.com/mozilla/servo/pull/1562">#1562</a>.</li>
<li>Tetsuharu Ohzeki cleaned up Node&rsquo;s <code>remove</code> and <code>insert</code> members
<a href="https://github.com/mozilla/servo/pull/1582">#1582</a>.</li>
<li>Deokjin Kim implemented <code>whitespace:pre</code> in
<a href="https://github.com/mozilla/servo/pull/1547">#1547</a>.</li>
<li>Patrick Kim landed border support for inline flows in
<a href="https://github.com/mozilla/servo/pull/1546">#1546</a>.</li>
<li>Simon Sapin used his CSS wizardry to redo a performance tweak we made so
that it&rsquo;s actually spec-compliant in
<a href="https://github.com/mozilla/servo/pull/1560">#1560</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Clark Gaebel (wowus)</li>
<li>Rui (xiongmao86)</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-27">meeting</a>, we
discussed moving the build of fontconfig on Linux into Servo to avoid
situations where the system version is old and not threadsafe, what&rsquo;s blocking
the JSManaged conversion (which is required for our next Rust upgrade), and
the status of ref and content tests.</p>

<p>Josh Matthews is at FOSDEM this weekend, giving a
<a href="http://www.joshmatthews.net/fosdemservo/">talk</a> on Servo. Look for video on
air.mozilla.org shortly!</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1wqjsf/more_xxhash_benchmarks/">An xxHash implementation in
Rust</a>,
as well as some benchmarks comparing to gcc and clang.</li>
<li><a href="http://hydrocodedesign.com/2014/01/31/llvm-with-rust/">Using LLVM From Within
Rust</a></li>
<li><a href="http://vimeo.com/85253071">Felix&rsquo;s CodeMesh presentation</a></li>
<li><a href="https://docs.google.com/a/octayn.net/spreadsheet/ccc?key=0AlWBWplsaTZvdGdSdEVzZW1BeDA5dm0zM2FFeW0ySEE&amp;usp=drive_web#gid=0">A 1.0 roadmap
spreadsheet</a></li>
<li><a href="https://github.com/kballard/rust-lua">rust-lua</a>, safe bindings to Lua 5.1</li>
<li><a href="http://www.infoq.com/interviews/klock-rust?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row1#.Uupx3qddN-w.reddit">InfoQ interview with
Felix</a></li>
<li><a href="http://blog.safaribooksonline.com/2014/01/30/parameters-bounds-rust/">Parameters and Bounds in
Rust</a></li>
<li><a href="http://blog.safaribooksonline.com/2014/01/28/network-communication-serialization-rust/">Network Communication and Serialization in
Rust</a></li>
<li><a href="https://air.mozilla.org/rust-meetup-january-2014/">Recording of the Bay Area Rust January
meetup</a>, wherein Brian
talks about 1.0, Niko talks about DST, Kevin talks about rust-lua, and I talk
about evangelism.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008224.html">Deprecating
rustpkg</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parametric Polymorphism Declaration Syntax in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/01/polymorphic-declaration-syntax-in-rust/"/>
    <updated>2014-02-01T17:06:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/01/polymorphic-declaration-syntax-in-rust</id>
    <content type="html"><![CDATA[<h1>Summary</h1>

<p>Change the following syntax:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct Foo&lt;T, U&gt; { ... }
</span><span class='line'>impl&lt;T, U&gt; Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
</span><span class='line'>fn foo&lt;T, U&gt;(...) { ... }</span></code></pre></td></tr></table></div></figure>


<p>to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>forall&lt;T, U&gt; struct Foo { ... }
</span><span class='line'>forall&lt;T, U&gt; impl Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
</span><span class='line'>forall&lt;T, U&gt; fn foo(...) { ... }</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h1>The Problem</h1>

<p>The immediate, and most pragmatic, problem is that in today&rsquo;s Rust one cannot
easily search for implementations of a trait. Why? <code>grep 'impl Clone'</code> is
itself not sufficient, since many types have parametric polymorphism. Now I
need to come up with some sort of regex that can handle this. An easy
first-attempt is <code>grep 'impl(&lt;.*?&gt;)? Clone'</code> but that is quite inconvenient to
type and remember. (Here I ignore the issue of tooling, as I do not find the
argument of &ldquo;But a tool can do it!&rdquo; valid in language design.)</p>

<p>A deeper, more pedagogical problem, is the mismatch between how <code>struct
Foo&lt;...&gt; { ... }</code> is read and how it is actually treated. The straightforward,
left-to-right reading says &ldquo;There is a struct Foo which, given the types &hellip;
has the members &hellip;&rdquo;. This might lead one to believe that <code>Foo</code> is a single
type, but it is not. <code>Foo&lt;int&gt;</code> (that is, type <code>Foo</code> instantiated with type
<code>int</code>) is not the same type as <code>Foo&lt;unit&gt;</code> (that is, type <code>Foo</code> instantiated
with type <code>uint</code>). Of course, with a small amount of experience or a very
simple explanation, that becomes obvious.</p>

<p>Something less obvious is the treatment of functions. What does <code>fn
foo&lt;...&gt;(...) { ... }</code> say? &ldquo;There is a function foo which, given types &hellip;
and arguments &hellip;, does the following computation: &hellip;&rdquo; is not very adequate.
It leads one to believe there is a <em>single</em> function <code>foo</code>, whereas there is
actually a single <code>foo</code> for every substitution of type parameters! This also
holds for implementations (both of traits and of inherent methods).</p>

<p>Another minor problem is that nicely formatting long lists of type parameters
or type parameters with many bounds is difficult.</p>

<h1>Proposed Solution</h1>

<p>Introduce a new keyword, <code>forall</code>. This choice of keyword reads very well and
will not conflict with any identifiers in code which follows the <a href="https://github.com/mozilla/rust/wiki/Note-style-guide">style
guide</a>.</p>

<p>Change the following declarations from</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct Foo&lt;T, U&gt; { ... }
</span><span class='line'>impl&lt;T, U&gt; Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
</span><span class='line'>fn foo&lt;T, U&gt;(...) { ... }</span></code></pre></td></tr></table></div></figure>


<p>to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>forall&lt;T, U&gt; struct Foo { ... }
</span><span class='line'>forall&lt;T, U&gt; impl Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
</span><span class='line'>forall&lt;T, U&gt; fn foo(...) { ... }</span></code></pre></td></tr></table></div></figure>


<p>These read very well. &ldquo;for all types T and U, there is a struct Foo &hellip;&rdquo;, &ldquo;for
all types T and U, there is a function foo &hellip;&rdquo;, etc. These reflect that there
are in fact multiple functions <code>foo</code> and structs <code>Foo</code> and implementations of
<code>Trait</code>, due to monomorphization. It also allows for grepping for &ldquo;impl
Trait&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asus Vivobook X200]]></title>
    <link href="http://cmr.github.io/blog/2014/01/30/asus-vivobook-x200/"/>
    <updated>2014-01-30T01:36:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/30/asus-vivobook-x200</id>
    <content type="html"><![CDATA[<p>I recently upgraded my aging <a href="http://amzn.to/1fhxWj4">Acer Aspire One</a> with a
new <a href="http://amzn.to/1e9k4ct">Asus Vivobook</a>. It was running a really slow
Intel Atom processor, one of the first generations. It literally took a day to
bootstrap Rust, and not all of that time was spent swapping! It worked well
for what I originally bought it for, which was as a dumb terminal SSHing into
my desktop. I wanted to upgrade to something that could actually run OpenGL
things, as well as browse the web without me wanting to give up and go to bed.</p>

<!-- more -->


<p>The vivobook has served these purposes very well, and at a price that I find
very compelling. It has a decent keyboard layout, as well as a fairly nice
screen, though the viewing angle leaves much to be desired. The webcam and
microphone are of good quality. It has full OpenGL 3.3 (possibly later
versions, once Mesa supports them). It can max out Xonotic and still be
relatively playable (15-20 FPS), with 40+ FPS at high quality. The CPU is only
dual-core, however. It also only has 2G of non-upgradable RAM, which is
problematic but was still an upgrade from the older netbook. The screen also
goes very dim (yay my eyes!), and fairly bright too.</p>

<p>I would recommend it to anyone looking for a cheap laptop. It fits my
ssh-heavy usecase perfectly. My only hesitation is the battery. It only lasts
about 2.5 hours, and almost as long to charge. I bought this after sending
back a <a href="http://amzn.to/1fhALRc">similarly-priced Chromebook</a>, due to the
Chromebook&rsquo;s unfortunate keyboard layout, and poor screen quality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellectual Growth]]></title>
    <link href="http://cmr.github.io/blog/2014/01/30/intellectual-growth/"/>
    <updated>2014-01-30T00:15:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/30/intellectual-growth</id>
    <content type="html"><![CDATA[<p>I have a <a href="http://amzn.to/1aJdedm">textbook on logic</a>, I found it at the
<a href="http://cmr.github.io/blog/2014/01/06/reading-old-things/">dump</a> probably 3
years ago, during my second year of high school. I tried working through it
many times, but simply could not wrap my head around some of the concepts it
presents. In particular, I found its treatment of formal languages to be
very confusing. I could, for the most part, follow the material as I read it,
but attempting any of the exercises quickly became an exercise in futility.</p>

<p>Currently, I am in the so-called &ldquo;Foundations&rdquo; course (MA211) at my
<a href="http://clarkson.edu/">university</a>. Currently it is covering basic logic:
quantifiers, proofs, etc. Suddenly, I find myself able to tackle some of the
problems from the earlier textbook. Indeed, it is actually starting to make
sense. I find this feeling, the wave of understanding of a previously
impenetrable subject, very pleasant. It usually corresponds with a massive
increase in breadth of understanding, as I make connections to other subjects.
Hopefully I&rsquo;ll get these moments more often as I intensify my studies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/26/this-week-in-rust/"/>
    <updated>2014-01-26T19:00:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/26/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>74 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Struct fields <a href="https://github.com/mozilla/rust/pull/11777">now inherit the privacy of the struct
itself</a>.</li>
<li>A bug in instantiability checking (determining whether a value of a given
type could ever be constructed) <a href="https://github.com/mozilla/rust/pull/11661">has been
fixed</a>.</li>
<li><code>Zero</code> and <code>One</code> <a href="https://github.com/mozilla/rust/pull/11664">have been tightened
up</a>, and fewer types implement
them now.</li>
<li><a href="https://github.com/mozilla/rust/pull/11129">A lot of things have changed</a>
regarding functions that fail or return Options. Almost everything that used
to fail now returns an Option instead.</li>
<li>Many incorrect usages of types from <code>std::libc</code> <a href="https://github.com/mozilla/rust/pull/10943">now use Rust
types</a>. This might introduce an
extra <code>as</code> or few in code using these (relatively obscure) interfaces.</li>
<li><code>invert</code> on <code>DoubleEndedIterator</code> <a href="https://github.com/mozilla/rust/pull/11686">has been
renamed</a> to <code>rev</code>.</li>
<li>The numeric constants <a href="https://github.com/mozilla/rust/pull/11790">have been
uppercased</a>.</li>
<li>Some privacy in std and extra <a href="https://github.com/mozilla/rust/pull/11808">has been shuffled
around</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Most macros are <a href="https://github.com/mozilla/rust/pull/11774">no longer injected as a hard-coded
string</a> and in fact live in
libstd.</li>
<li>Using <code>-Z no-landing-pads</code> <a href="https://github.com/mozilla/rust/pull/11653">actually disables landing pad
generation</a>. It was accidentally
broken.</li>
<li>The FFI documentation <a href="https://github.com/mozilla/rust/pull/11486">now includes a section on
callbacks</a>.</li>
<li>A lint for unnecessary parens on control flow conditions etc <a href="https://github.com/mozilla/rust/pull/11663">has been
added</a>.</li>
<li>Support for ARM&rsquo;s thumb instructions <a href="https://github.com/mozilla/rust/pull/11700">has been
added</a>.</li>
<li>libnative <a href="https://github.com/mozilla/rust/pull/11294">now implements
timers</a>.</li>
<li>There is now <a href="https://github.com/mozilla/rust/pull/11611">exponential notation for float
formatting</a>.</li>
<li><code>Vec&lt;T&gt;</code> <a href="https://github.com/mozilla/rust/pull/11682">has been added</a>, which
is intended to eventually replace <code>~[T]</code>.</li>
<li>Borrow checker errors <a href="https://github.com/mozilla/rust/pull/11718">now have better
spans</a> and should be more
understandable.</li>
<li>It is now possible to <a href="https://github.com/mozilla/rust/pull/11744">opt out of using
rpaths</a>.</li>
<li>libnative <a href="https://github.com/mozilla/rust/pull/11732">now implements
<code>get_host_addresses</code></a>.</li>
<li>A new synchronization primitive, Barrier, <a href="https://github.com/mozilla/rust/pull/11725">has been
added</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Andre Arko</li>
<li>Aydin Kim</li>
<li>Ben Harris</li>
<li>Ben Noordhuis</li>
<li>Chris Wong</li>
<li>Daniel MacDougall</li>
<li>Hong Chulju</li>
<li>Jake Greenfield</li>
<li>Matthias Einwag</li>
<li>Philippe Delrieu</li>
<li>Salem Talha</li>
<li>Sean Chalmers</li>
<li>Trent Ogren</li>
<li>Virgile Andreani</li>
<li>comex</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-21">weekly
meeting</a>
discussed a bunch of open pull requests, but nothing too groudbreaking.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 19 PRs and had a Servo workweek in the Mozilla San
Francisco office from Tuesday through Friday (Monday was a US federal
holiday).</p>

<h2>Notable additions</h2>

<ul>
<li>Bruno Abinader implemented Document::createHTMLDocument in
<a href="https://github.com/mozilla/servo/pull/1523">#1523</a>.</li>
<li>Patrick Walton implemented parallel layout for two of our three layout
passes in <a href="https://github.com/mozilla/servo/pull/1493">#1493</a>.</li>
<li>Patrick Kim fixed computation of image box sizes in
<a href="https://github.com/mozilla/servo/pull/1520">#1520</a> and text-decoration in
<a href="https://github.com/mozilla/servo/pull/1506">#1506</a>.</li>
<li>Deokjin Kim landed the <code>white-space:pre</code> property in
<a href="https://github.com/mozilla/servo/pull/1507">#1507</a>.</li>
<li>Aydin Kim and Lars Bergstrom landed fixes for Servo on Android.</li>
<li>Teodor Szente fixed up a type signature in
<a href="https://github.com/mozilla/servo/pull/1541">#1541</a>.</li>
<li>Lars Bergstrom changed ref tests so that they now emit a PNG showing the
image-diff between the baseline and incorrect rendering in
<a href="https://github.com/mozilla/servo/pull/1544">#1544</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Teodor Szente</li>
</ul>


<h2>Meetings</h2>

<p>There was no separate Servo meeting, but during the workweek we discussed
details in our designs for
<a href="https://etherpad.mozilla.org/Servo-workweek-layers">layers</a>, <a href="https://etherpad.mozilla.org/Servo-workweek-generated-content">generated
content</a>,
<a href="https://etherpad.mozilla.org/Servo-workweek-tables">tables</a>,
<a href="https://etherpad.mozilla.org/Servo-workweek-pixels">HiDPI/pixels</a>, and
<a href="https://etherpad.mozilla.org/Servo-workweek-displaylist">DisplayList
creation</a>.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008214.html">Rust contribution
ideas</a></li>
<li><a href="https://github.com/SiegeLord/RustAlgebloat">RustAlgebloat</a>, a linear
algebra library</li>
<li><a href="http://glaebhoerl.tumblr.com/rust_closure_types">Table of Potential Closure
Types</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008088.html">rust-ci
updates</a>,
categorization and documentation uploading</li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/7848">Channel API
proposal</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/18/this-week-in-rust/"/>
    <updated>2014-01-18T20:21:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/18/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This was a big week. rvalue lifetimes and external syntax extensions landed,
as well as a bunch of codegen optimization.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>69 pull requests were merged this week. As of writing,
<a href="http://buildbot.rust-lang.org/bors/bors.html">bors</a> has 14 approved pull
requests waiting.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>std::num</code>&rsquo;s ongoing overhaul continues. It&rsquo;s going to be drastically
simplified, and not try to be a general-purpose numeric library.
<a href="https://github.com/bjz/num-rs">num-rs</a> is intended to provide some base
algebraic types. <a href="https://github.com/mozilla/rust/pull/11504">#11504</a> removes
gamma/bessel and does some cleanup of cmath.
<a href="https://github.com/mozilla/rust/pull/11548">#11548</a> merges Bitwise and
BitCount and removes Bounded and Bitwise from the prelude.
<a href="https://github.com/mozilla/rust/pull/11622">#11622</a> simplifies Primitive.</li>
<li>Destructuring <code>@</code> patterns are <a href="https://github.com/mozilla/rust/pull/11305">no longer
supported</a>.</li>
<li>The return type of <code>Chan::try_recv</code> has been extended to <a href="https://github.com/mozilla/rust/pull/11112">indicate why it
did not return a value</a>. That is,
whether there was legitimately no value, or if the other end had hung up.</li>
<li>Disk-relative paths on Windows <a href="https://github.com/mozilla/rust/pull/11579">are now properly
generated</a> when joining two paths.</li>
<li>FromBase64 and FromHex <a href="https://github.com/mozilla/rust/pull/11597">now use error
enums</a>.</li>
<li><code>std::io</code> <a href="https://github.com/mozilla/rust/pull/11598">has been shuffled around a
bit</a>.</li>
<li>(Almost?) all iterator types <a href="https://github.com/mozilla/rust/pull/11001">have been
renamed</a>.</li>
<li>unsafe functions can <a href="https://github.com/mozilla/rust/pull/11605">no longer be coerced to
closures</a>.</li>
<li>Unnecessary (useless) visibility modifiers on <code>use</code> and <code>extern mod</code> <a href="https://github.com/mozilla/rust/pull/11607">are
now forbidden</a>.</li>
<li>Building on last week&rsquo;s per-task stdout/stderr, <a href="https://github.com/mozilla/rust/pull/11620">rustc&rsquo;s error reporting has
been cleaned up significantly</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Externally loadable syntax extensions <a href="https://github.com/mozilla/rust/pull/11151">have
landed</a>! We can now write
syntax extensions outside of the compiler, and export macros.</li>
<li>The &ldquo;rvalue lifetime&rdquo; issue has seen some <a href="https://github.com/mozilla/rust/pull/11585">significant work put into
it</a>. Notably, <code>for x in [1, 2, 3,
4].iter() { .. }</code> should now work, among many other papercut annoyances with
rvalues.</li>
<li>Error messages involving inferred integer types <a href="https://github.com/mozilla/rust/pull/11513">are now much more
sane</a>. Rather than <code>&lt;V0&gt;</code> or
<code>&lt;VI1&gt;</code>, it now prints <code>&lt;generic integer #0&gt;</code> etc.</li>
<li>Accidentally including a semicolon on the last line of a function <a href="https://github.com/mozilla/rust/pull/11482">now has a
better error message</a>, if the
types line up.</li>
<li>Some bugs with trait object coercion <a href="https://github.com/mozilla/rust/pull/11525">have been
fixed</a>.</li>
<li>The runtime <a href="https://github.com/mozilla/rust/pull/11501">now has its own
documentation</a>, viewable
<a href="http://static.rust-lang.org/doc/master/guide-runtime.html">here</a>.</li>
<li>rustdoc&rsquo;s search is now <a href="https://github.com/mozilla/rust/pull/11438">more
forgiving</a> on the input it
accepts.</li>
<li>Inserting into tries has been optimized significantly, <a href="https://github.com/mozilla/rust/pull/11546">with no unsafe
code</a>. Its iterator has <a href="https://github.com/mozilla/rust/pull/11497">also been
optimized</a>, albeit with unsafe
code.</li>
<li><a href="https://github.com/mozilla/rust/pull/11535">The reference-counting headers have been
removed</a>. The associated
&ldquo;managed-unique&rdquo; concept <a href="https://github.com/mozilla/rust/pull/11565">has also been
removed</a>.</li>
<li>The recent OS X 10.9 breakage <a href="https://github.com/mozilla/rust/pull/11604">should be
fixed</a>, as we will no longer use
<code>ar s</code> on that platform.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Clinton Ryan</li>
<li>Derek Guenther</li>
<li>Lucy</li>
<li>Petter Remen</li>
<li>Shamir Khodzha</li>
<li>Yehuda Katz</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-14">weekly
meeting</a>
discussed associated function resolution, changes to our calling convention
(specifically the fate of the ubiquitous environment pointer), how we want to
handle feature freeze, static items with destructors, and documentation on
primitives.</p>

<h1>Quotes of the Week</h1>

<blockquote><p>who says you can&#8217;t make money selling a compiler? You can, as long as you<br/>convince people it&#8217;s a video game</p><footer><strong>tjc on the Rust-the-game/Rust-the-language confusion</strong></footer></blockquote>




<blockquote><p>who needs pure functional when you have pure cool?</p><footer><strong>eddyb</strong></footer></blockquote>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary
test cases for the Rust language.</p>

<p>This week, we landed 22 PRs. There will be a Servo workweek in the
Mozilla San Francisco office next week, Tuesday through Friday.</p>

<h2>Notable additions</h2>

<ul>
<li>Jack Moffitt landed the huge Rust upgrade
<a href="https://github.com/mozilla/servo/pull/1473">#1473</a>, bringing us very close to
the 0.9 release. Hooray!</li>
<li>Lars Bergstrom got NVidia-on-Linux working in
<a href="https://github.com/mozilla/servo/pull/1487">#1487</a> and fixed the content test
reliability in <a href="https://github.com/mozilla/servo/pull/1500">#1500</a>.</li>
<li>Tetsuharu Ohzeki implemented <code>removeAttribute</code> on Element in
<a href="https://github.com/mozilla/servo/pull/1448">#1448</a>.</li>
<li>jgraham landed innerHTML support
<a href="https://github.com/mozilla/servo/pull/1450">#1450</a>.</li>
<li>Bruno Abinader implemented several fixes related to DOMImplementation:
<a href="https://github.com/mozilla/servo/pull/1497">#1497</a>,
<a href="https://github.com/mozilla/servo/pull/1488">#1488</a>.</li>
<li>Corey Richardson fixed up an error case in startup on Linux in
<a href="https://github.com/mozilla/servo/pull/1502">#1502</a>.</li>
<li>Isabelle Carter landed the initial work for handling <code>position:fixed</code> in
<a href="https://github.com/mozilla/servo/pull/1440">#1440</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Corey Richardson</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-13">meeting</a>, we
discussed the need to clean up our test harnesses, the removal of <code>@</code> in
support of the next Rust upgrade, and the workweek..</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/DaGenix/rust-crypto/pull/21">The first pure-Rust AES
implementation</a>. According to
enix in IRC, this is also the first bit slicing implementation in a high level
language (ie, not assembly or a port of assembly).</li>
<li><a href="https://github.com/nickdesaulniers/rust-re2">rust-re2</a>, re2 bindings</li>
<li><a href="http://words.steveklabnik.com/a-30-minute-introduction-to-rust">A 30 Minute Introduction to
Rust</a></li>
<li><a href="https://github.com/shilgapira/ObjCrust">ObjCrust</a>, building an iOS static
library with Rust.A</li>
<li><a href="http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/">The Periodic Table of Rust
Types</a></li>
<li><a href="https://github.com/dnaq/sodiumoxide">Sodium Oxide</a>, NaCl bindings, updated
to 0.9</li>
<li><a href="http://dwrensha.github.io/capnproto-rust/2014/01/15/benchmark-update.html">capnproto-rust benchmark
update</a></li>
<li><a href="https://github.com/sfackler/rust-phf">rust-phf</a>, compile-time hash maps. It
also serves as a demonstration of loadable syntax extensions!</li>
<li><a href="http://www.reddit.com/r/rust/comments/1v9rgp/rust_has_dowhile_loops/">Rust has do-while
loops</a>,
a dirty hack no one should use.</li>
<li><a href="http://paulkoerbitz.de/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">Understanding Pointers, Ownership, and Lifetimes in
Rust</a></li>
<li><a href="http://hydrocodedesign.com/2014/01/17/jit-just-in-time-compiler-rust/">A Just-in-time Compiler (Written) In
Rust</a></li>
<li><a href="https://github.com/alexcrichton/jba/tree/rust">jba</a>, a GameBoy emulator
written in Rust.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The State of Rust 0.9]]></title>
    <link href="http://cmr.github.io/blog/2014/01/12/the-state-of-rust-0-dot-9/"/>
    <updated>2014-01-12T21:13:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/12/the-state-of-rust-0-dot-9</id>
    <content type="html"><![CDATA[<p><a href="http://www.rust-lang.org/">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is my post-mortem of the past 3 months, the
current status of Rust, and its future.</p>

<!-- more -->


<h1>Compiler</h1>

<p>The compiler saw a fair bit of work this release cycle. Some polish has gone
into <code>mut</code> in patterns. For example, <code>let (mut x, y) = foo();</code> now works as
expected. We now have &ldquo;feature gates&rdquo;, or feature flags, that let us mark
certain features as either deprecated or experimental and subject to change.
<code>@mut</code> has been removed. Slice representation has been optimized (we now store
number of elements, not number of bytes). Soundness bugs have been fixed, and
some bugs in our name resolution have been patched up. We have a dead code
warning, stability annotations, crate introspection, and lots more.</p>

<p>On top of all that, we also have support for static linking and LTO. Compiler
performance has further improved. From the 112ms compiling <code>fn main() { }</code> in
0.8, we now do 91ms with static linking (the default) and 68ms for dynamic
linking (<code>-Z prefer-dynamic</code>). Our debuginfo is in a much better state. The
entire codebase (compiler + standard library + tools) compiles with it, and
<a href="https://github.com/mozilla/servo/">Servo</a> compiles with it by default.</p>

<h1>Runtime</h1>

<p>The runtime has seen tons of work this release. <code>std::io</code> has been swapped
over to the new runtime, which is written entirely in Rust. We now support
both 1:1 and M:N threading models, their respective runtimes supplied by
&ldquo;libnative&rdquo; and &ldquo;libgreen&rdquo;. libgreen (the &ldquo;old new runtime&rdquo;) has seen some
performance improvements. Chris Morgan reports that the scalability of his
<a href="https://github.com/chris-morgan/rust-http/">rust-http</a> benchmarks has
improved from 1.25x to 1.75x from 1 to 8 concurrent request handlers. On my
machine, using libnative gives an impressive performance boost, pushing us
ahead of go&rsquo;s performance (graph below). libnative has yet to see any optimization work.
David Renshaw reports roughly a 2x performance increase on his <a href="http://dwrensha.github.io/capnproto-rust/2013/11/16/benchmark.html">capn proto
benchmark</a>
when using libnative for I/O.</p>

<p><noscript></p>

<pre><code>&lt;img src="https://docs.google.com/a/octayn.net/spreadsheet/oimg?key=0ArjzeYh7LqL2dENRREdRbDljajR4LWt1RlozM2YyY0E&amp;oid=1&amp;zx=xnqmqanhavt" /&gt;
&lt;p&gt;(This would be interactive if you had JavaScript enabled)&lt;/p&gt;
</code></pre>

<p></noscript></p>

<script type="text/javascript" src="http://cmr.github.io//ajax.googleapis.com/ajax/static/modules/gviz/1.0/chart.js"> {"dataSourceUrl":"//docs.google.com/a/octayn.net/spreadsheet/tq?key=0ArjzeYh7LqL2dENRREdRbDljajR4LWt1RlozM2YyY0E&transpose=0&headers=1&range=A1%3AE6&gid=0&pub=1","options":{"titleTextStyle":{"bold":true,"color":"#000","fontSize":16},"series":{"0":{"errorBars":{"errorType":"none","magnitude":10}}},"animation":{"duration":500},"width":600,"hAxis":{"title":"Concurrency (\"threads\")","useFormatFromData":true,"minValue":null,"viewWindowMode":null,"viewWindow":null,"maxValue":null},"vAxes":[{"useFormatFromData":true,"title":"Requests / second","minorGridlines":{"count":"4"},"minValue":null,"gridlines":{"count":"5"},"logScale":false,"viewWindow":{"max":null,"min":null},"maxValue":null},{"useFormatFromData":true,"minValue":null,"logScale":false,"viewWindow":{"max":null,"min":null},"maxValue":null}],"booleanRole":"certainty","title":"rust-http comparison benchmark","height":371,"domainAxis":{"direction":1},"legend":"right","focusTarget":"series","useFirstColumnAsDomain":true,"isStacked":false,"tooltip":{"trigger":"none"}},"state":{},"view":{"columns":[{"calc":"stringify","type":"string","sourceColumn":0},1,2,3,4]},"isDefaultVisualization":false,"chartType":"ColumnChart","chartName":"Chart 1"} </script>


<p>You can run the benchmarks yourself. <code>cd comparisons; python run.py</code>. You&rsquo;ll
need to build rust-http first (<code>make</code>), and have go, nodejs, and ab (apache
bench) installed.</p>

<h1>Documentation</h1>

<p>Our documentation hasn&rsquo;t been in the best state in the past. It still isn&rsquo;t
where it should be, but <a href="http://static.rust-lang.org/doc/master/index.html">they have been
reorganized</a>, on top of
seeing the usual work. We&rsquo;re in the process of moving all of the documentation
from the wiki onto that site, to make it easier to find and search. Steve
Klabnik gave a <a href="https://air.mozilla.org/rust-meetup-december-2013/">critical but very constructive
presentation</a> at the Bay
Area meetup about what we are doing wrong and how we can improve. At the same
meetup, Chris Morgan talked about the technologies we use in our documentation
stack. In the long run, the consensus seems to be that reStructuredText and
Sphinx are they way forward. Thanks to the rustdoc rewrite, it will be able to
have first-class status as a documentation backend.</p>

<h1>The Future</h1>

<p>For 0.10, we have <a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/">Dynamically Sized Types
(DST)</a> to
look forward to, as well as the removal of <code>@</code> pointers. <code>box</code>, aka &ldquo;placement
new&rdquo;, along with smart pointer sugar (overloadable dereferencing/borrowing),
should also be in by then. We may also see an actual garbage collector.</p>

<h1>Is Rust Ready Yet?</h1>

<p>Nope. It still has some work to do. 1.0 is estimated before the end of 2014,
though that may slip depending on how things land. An early estimate puts the
release over the summer! We still need a robust package manager. We now have
<a href="http://rust-ci.org/">rust-ci</a>, which makes it easy to keep code up to date,
and know if a library is up to date.</p>

<p>The breaking changes, especially language changes, are slowing down, besides
bug fixes. The standard library is also starting to shake itself out, though
it still has a lot of work before they will be stable. There are currently two
known uses of Rust in production: <a href="http://www.tilde.io/">Tilde</a> is using it in
<a href="https://www.skylight.io/">Skylight</a>, and <a href="http://opendns.com">OpenDNS</a> is
using it for <a href="http://labs.umbrella.com/2013/10/04/zeromq-helping-us-block-malicious-domains/">real-time data
processing</a>.</p>

<p>It has been a good release, and the next will be even better. Want to get
involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.
Want to follow development? I post a <a href="http://cmr.github.io/blog/categories/this-week-in-rust/">weekly
newsletter</a>
summarizing the important changes. There is also a
<a href="http://reddit.com/r/rust">subreddit</a>. Here&rsquo;s to an awesome 0.10!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/11/this-week-in-rust/"/>
    <updated>2014-01-11T16:23:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/11/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>0.9 was released this week, bringing with it a restructuring of our
documentation and the usual influx of attention.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>57 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Float literals are now <a href="https://github.com/mozilla/rust/pull/11480">more
strict</a>. Octal and hex float
literals are no longer allowed.</li>
<li>A nasty soundness bug <a href="http://www.reddit.com/r/rust/comments/1uxbgm/moving_ownership_via_borrowed_reference/">reported on
reddit</a>
<a href="https://github.com/mozilla/rust/pull/11465">has been fixed</a>.</li>
<li><code>print</code> and <code>println</code> <a href="https://github.com/mozilla/rust/pull/11416">have been removed from the
prelude</a>. Use the <code>print!</code> and
<code>println!</code> macros instead.</li>
<li><code>Rc</code> <a href="https://github.com/mozilla/rust/pull/10926/files">now supports weak
pointers</a>, and it no longer
requires the wrapped type to be Freeze or Send. That is, it no longer
statically avoids cycles using the type system. It was found to be too
restrictive. The only constructor is now <code>Rc::new</code>.</li>
<li>The <code>eof</code> method on <code>Reader</code> <a href="https://github.com/mozilla/rust/pull/11376">has been
removed</a>, as only files really
know when they are at eof. It is now a method on the types it makes sense for
<a href="https://github.com/mozilla/rust/pull/11437">such as <code>MemReader</code> and
<code>BufReader</code></a>.</li>
<li><code>std::num</code> is seeing some simplification. <a href="https://github.com/mozilla/rust/pull/11412">Many traits have been merged into
<code>Real</code></a>.</li>
<li>Similarly, <a href="https://github.com/mozilla/rust/pull/11402"><code>ApproxEq</code> has been
removed</a>.</li>
<li>The <code>std::io::Decorator</code> trait <a href="https://github.com/mozilla/rust/pull/11394">has been
removed</a>.</li>
<li>A nasty resolve bug <a href="https://github.com/mozilla/rust/pull/11370">has been
fixed</a>. Importing a trait made it
available to all child modules; now it is only available in the module that
imported it, as it should be.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/10854">method renaming</a> has been
done to <code>Option</code>. <code>map_default</code> is now <code>map_or</code> and <code>mutate_default</code> is now
<code>mutate_or_set</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>A <a href="https://github.com/mozilla/rust/pull/11329">lint for unnecessary casts</a>
has been added. It is set to allow by default.</li>
<li><a href="https://github.com/mozilla/rust/pull/11342">Mutable iterators</a> have been
added to <code>std::trie</code>.</li>
<li>A bug in rustpkg preventing it from finding any static libraries, and
libnative, <a href="https://github.com/mozilla/rust/pull/11338">has been fixed</a>.</li>
<li><code>u64_from_be_bytes</code> <a href="https://github.com/mozilla/rust/pull/11448">has seen some
optimization</a>, it is 3-6x faster.</li>
<li><code>box</code> has been
<a href="https://github.com/mozilla/rust/pull/11055">kinda-implemented</a>. <code>box(GC)</code> and
<code>box(HEAP)</code> now work.</li>
<li>Typed arenas <a href="https://github.com/mozilla/rust/pull/11358">have been added</a>.
They&rsquo;re really fast!</li>
<li><code>stderr</code>/<code>stdout</code> is now
<a href="https://github.com/mozilla/rust/pull/11353">per-task</a>, which will allow
capturing or redirecting a task&rsquo;s output.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Andrew Chin</li>
<li>Clinton Ryan</li>
<li>Derek Chiang</li>
<li>Mick Koch</li>
<li>Nick Cameron</li>
<li>Niels langager Ellegaard</li>
<li>Nif Ward</li>
<li>Raphael Catolino</li>
<li>Rich Lane</li>
<li>Dzmitry Malyshau</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-07">weekly
meeting</a>
discussed Windows XP support, bounded channels, the Rc changes, using guard
pages, loadable syntax extensions, and functions that fail.</p>

<h1>Quotes of the Week</h1>

<p>&ldquo;[I] find it easy to get lost in this file.&rdquo; &ndash;
<a href="https://github.com/mozilla/rust/pull/11472/files#r8810362">kud1ing</a> on
<code>libc.rs</code>
&ndash; &ldquo;A language is more than just semantics, syntax, and an implementation &ndash;
it&rsquo;s about an ecosystem and a community. Without that it dies.&rdquo; &ndash;
<a href="https://botbot.me/mozilla/rust-internals/msg/9689869/">bjz</a></p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>The Servo tree has been mostly frozen for a large part of this week, as the
nearly month-long Rust upgrade is finally getting close and we wanted to avoid
additional rebases. We did land 7 PRs, many with associated fixes, however.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Kim fixed anonymous boxes and images disappearing during line
breaking in <a href="https://github.com/mozilla/servo/pull/1461">#1461</a> and
<a href="https://github.com/mozilla/servo/pull/1463">#1463</a>.</li>
<li>Patrick Walton fixed a race issue with window sizes and script code in
<a href="https://github.com/mozilla/servo/pull/1409">#1409</a>.</li>
<li>Jaeman Park landed CSS parsing and selector matching for pseudo element
:before and :after in <a href="https://github.com/mozilla/servo/pull/1464">#1464</a>.</li>
<li>Bruno Abinder made some DOM additions in
<a href="https://github.com/mozilla/servo/pull/1466">#1466</a> and
<a href="https://github.com/mozilla/servo/pull/1472">#1472</a>.</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-06">meeting</a>, we
discussed the upcoming workweek, the Rust upgrade, ARM buildbots for Rust and
Servo, and some research we&rsquo;re doing into the breakdown of page load.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.meetup.com/Rust-Bay-Area/events/153909222/">Bay Area Rust Meetup:
1/28/2014</a></li>
<li><a href="http://www.youtube.com/watch?v=gfCtbGiHcg0">The Rust language: memory, ownership and
lifetimes</a>,
Niko&rsquo;s presentation at Linux.conf.au</li>
<li><a href="http://www.reddit.com/r/rust/comments/1uy7rt/an_appeal_for_correct_capable_futureproof_math_in/">An appeal for correct, capable, future-proof math in nascent programming
languages</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1v10ac/thehydroimpulserustwebsite/">An in-progress redesign of the
website</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1v104e/combining_rusthttp_with_routerecognizerrs_to/">Combining rust-http with route-recognizer.rs to create routable
HTTP</a></li>
<li><a href="https://github.com/mneumann/rust-toml">A TOML configuration file parser</a></li>
<li><a href="http://llvm.lyngvig.org/Articles/Mapping-High-Level-Constructs-to-LLVM-IR">Mapping High-Level Constructs to LLVM
IR</a>,
a peek at what drives the underbelly of the compiler</li>
<li><a href="https://github.com/mozilla/rust/pull/11399">Add garbage collector to
<code>std::gc</code></a></li>
<li><a href="https://github.com/HeroesGrave/rust-workspace">rust-workspace</a>, a simple
shell to make maintaining Rust projects easier</li>
<li><a href="http://www.reddit.com/r/rust/comments/1usupv/semantic_code_browser_for_rust/">Semantic code browser for
Rust</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/01/09/rvalue-lifetimes-in-rust/">Rvalue Lifetimes in
Rust</a></li>
<li><a href="http://steveklabnik.github.io/nobody_knows_rust/#/">Nobody Knows Rust &ndash; Steve Klabnik&rsquo;s slides</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007753.html">0.9 Release
Announcement</a></li>
<li><a href="https://github.com/cmr/rust-logo-3d/blob/master/rlogo.stl">A 3d-printable Rust
logo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Old Things]]></title>
    <link href="http://cmr.github.io/blog/2014/01/06/reading-old-things/"/>
    <updated>2014-01-06T19:00:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/06/reading-old-things</id>
    <content type="html"><![CDATA[<p>I&rsquo;m learning Haskell. I&rsquo;m doing this for many reasons, but the most important
is to expand my knowledge and form a more principled understanding of
languages. So, I&rsquo;m reading a <a href="http://www.stanford.edu/class/cs242/readings/backus.pdf">paper</a>. It&rsquo;s a very good paper, but the
thing most striking about it is its age. 1977! My father was five. It occurred
to me that I read a lot of old things. I grab interesting books from book
sales, yard sales, thrift shops, and the &ldquo;Transfer Station &amp; Recycling Center&rdquo;
(aka the dump). Most of the time they&rsquo;re garbage, but I sometimes find true
gems. It&rsquo;s how I discovered Plato&rsquo;s <em>The Republic</em>, among other things. The
best part about reading older books is that they often strip away decades of
intellectual cruft that can accumulate around a subject, be it jargon or just
gross mutation of ideas.  Especially reading some foundational papers, or
books that were written when a subject was still young and exciting, a very
good historical perspective can be developed. I often find a conceptual
clarity that most new books simply don&rsquo;t give.</p>

<p>On the other hand, I&rsquo;ve yet to find old code that was truly worth reading. Old
code is frequently buggy, poorly written, or just plain unfinished. No code
remains dormant for too long. The only exception I can think of is TeX.</p>

<p>Observation bias? Perhaps. It could be that that&rsquo;s the only reason these books
have survived so long. Try reading some older books and papers. <a href="mailto:corey@octayn.net">Let me know
how it goes</a>. Have some suggestions for great books
and papers, old or others? I&rsquo;d like to hear those too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/06/this-week-in-rust/"/>
    <updated>2014-01-06T01:09:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/06/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>0.9 is on the brink. Perhaps this week, the next at the latest. Some hefty
changes come this week.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>63 pull requests were merged this week.</p>

<h2>Breaking changes</h2>

<ul>
<li><code>@mut</code> <a href="https://github.com/mozilla/rust/pull/11251">has been removed</a>. The
replacements are <code>Gc&lt;RefCell&lt;T&gt;&gt;</code> or, preferably, <code>Rc&lt;RefCell&lt;T&gt;&gt;</code>. See also
<code>Cell&lt;T&gt;</code> for <code>Pod</code> types.</li>
<li>Dereferencing of unary tuple structs and enums (tuple structs with one field
and enums with one variant) <a href="https://github.com/mozilla/rust/pull/11188">has been
removed</a>. An example:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct Foo(int);
</span><span class='line'>
</span><span class='line'>fn bar() {
</span><span class='line'>  let x = Foo(42);
</span><span class='line'>  // previously `*x` would return 42
</span><span class='line'>  let Foo(y) = x; // but now you do this pattern matching
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Either</code> <a href="https://github.com/mozilla/rust/pull/11149">has been removed</a>.</li>
<li><code>extern mod foo (name="bar")</code> syntax <a href="https://github.com/mozilla/rust/pull/10696">has been
removed</a>. The newer <code>extern mod
foo = "bar"</code> syntax replaces it.</li>
<li>The hashmap iterators <a href="https://github.com/mozilla/rust/pull/11242">have
changed</a>. Use <code>.keys()</code> and
<code>.values()</code> respectively.</li>
<li>rustc now outputs <a href="https://github.com/mozilla/rust/pull/11184">1-based column
numbers</a>. This shouldn&rsquo;t
affect any tooling that assume columns are 0-based. But, this brings us in
line with gcc.</li>
<li>The <code>cfg</code> attribute <a href="https://github.com/mozilla/rust/pull/11093">will now strip struct fields and enum
variants</a>.</li>
<li>The contents of the <code>crate_type</code> attribute <a href="https://github.com/mozilla/rust/pull/11264">are now checked for
validity</a>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li><code>Reader</code>/<code>Writer</code> have regrown some functionality. It can now <a href="https://github.com/mozilla/rust/pull/10861">read and
write strings</a>, though <em>only</em> real
UTF-8 strings. Encoding support will come later. <code>write_char</code> <a href="https://github.com/mozilla/rust/pull/11310">also
reappeared</a>.</li>
<li>Unwinding on ARM <a href="https://github.com/mozilla/rust/pull/11301">has been
fixed</a>. Still no C++!</li>
<li>Native UDP IO <a href="https://github.com/mozilla/rust/pull/11186">has been
implemented</a>.</li>
<li>A <code>rust_fail</code> function <a href="https://github.com/mozilla/rust/pull/11231">has been
added</a>. Break on this function to
catch failure. Should be easier to remember! Certainly better than
<code>_Unwind_RaiseException</code>.</li>
<li>Some more C <a href="https://github.com/mozilla/rust/pull/11208">has been converted to
Rust</a>.</li>
<li>volatile load and store intrinsics <a href="https://github.com/mozilla/rust/pull/11173">have been
added</a>.</li>
</ul>


<p>Additionally, it hasn&rsquo;t landed yet, but <a href="https://github.com/mozilla/rust/pull/11151">external syntax
extensions</a>, aka loadable syntax
extensions, aka procedural macros, seem to be really close to landing. This is
quite exciting!</p>

<h2>New Contributors</h2>

<ul>
<li>Alan Andrade</li>
<li>Carl-Anton Ingmarsson</li>
<li>John Louis Walker</li>
<li>Peter Zotov</li>
<li>lyuts</li>
<li>Matthew Auld</li>
</ul>


<h1>Meeting</h1>

<p>Once again, no meeting due to the holidays. There will be one on January 7,
however.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>Mozilla Corp. came back from vacation this Thursday, January 2nd. We landed 14
PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Aydin Kim fixed Android support &ndash; hooray! &ndash; in
<a href="https://github.com/mozilla/servo/pull/1445">#1445</a>.</li>
<li>Mike Blumenkrantz cleaned up our configure script to avoid the &ldquo;configure
smashed my submodule edits&rdquo; problem in
<a href="https://github.com/mozilla/servo/pull/1449">#1449</a>.</li>
<li>deokjinkim fixed several font-related issues in
<a href="https://github.com/mozilla/servo/pull/1454">#1454</a> and
<a href="https://github.com/mozilla/servo/pull/1452">#1452</a>.</li>
<li>Simon Sapin refactored font styles in
<a href="https://github.com/mozilla/servo/pull/1455">#1455</a>.</li>
<li>Shamir Khodzha implemented <code>child_elements</code> for filtered iteration in
<a href="https://github.com/mozilla/servo/pull/1443">#1443</a>.</li>
<li>ms2ger landed several changes to attributes in
<a href="https://github.com/mozilla/servo/pull/1439">#1439</a>,
<a href="https://github.com/mozilla/servo/pull/1456">#1456</a>, and
<a href="https://github.com/mozilla/servo/pull/1460">#1460</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Shamir Khodzha</li>
<li>Mike Blumenkrantz</li>
</ul>


<h1>Announcements, etc</h1>

<ul>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/">DST, take
5</a>. I
think this might be the last DST proposal, and I quite like it.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007687.html">rust-redis and
rust-msgpack</a>.</li>
<li><a href="http://dwrensha.github.io/capnproto-rust/2014/01/04/zmq-explorers.html">A capnproto-rust and zmq
example</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1ucrfg/using_rust_for_an_undergraduate_os_course/">Post-mortem from the OS class taught in
Rust</a>.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007659.html">Using CMake with
Rust</a></li>
<li><a href="https://github.com/huonw/boehm-rs">boehm-rs</a>, a <code>Gc&lt;T&gt;</code> type with a real
GC!</li>
<li><a href="https://github.com/wellposed/rust-OpenBLAS">rust-OpenBLAS</a>, a (in-progress)
library for using OpenBLAS and LAPACK.</li>
<li><a href="https://github.com/WebeWizard/libhttpd/tree/master">libhttpd</a>, a library
for writing web servers. Intended to be similar to jetty.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/30/this-week-in-rust/"/>
    <updated>2013-12-30T00:48:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/30/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>It&rsquo;s been a slow week due to the holidays. In the next week or two 0.9 is
being released. It&rsquo;s an exciting release, but in more subtler ways than the
previous 3. Many small details, especially around the runtime and linking,
have changed that make Rust faster and more flexible without necessarily being
a breaking change. As always, the detailed changelog will have the
nitty-gritties.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>36 pull requests were merged this week. bors was feeling unwell for a bit,
due to a deadlock in a scheduler test that was fixed today and a deadlock in
(incorrect usage of) LLVM.</p>

<h2>Breaking changes</h2>

<ul>
<li>The <code>comm</code> primitives are <a href="https://github.com/mozilla/rust/pull/11111">never <code>Freeze</code>
anymore</a>.</li>
<li>The <code>link</code> attribute is <a href="https://github.com/mozilla/rust/pull/11091">now
forbidden</a> on crates. All hail
<code>crate_id</code>!</li>
<li><a href="https://github.com/mozilla/rust/pull/11121">All of our C++ dependencies have been
removed</a>. This is only breaking
because it changes the debugging experience; <code>rust_begin_unwind</code> is gone and
<code>catch throw</code> doesn&rsquo;t work because we don&rsquo;t use C++ exceptions anymore. To set
a breakpoint on task failure, <code>break _Unwind_RaiseException</code>.</li>
<li>The underbelly of the runtime has been <a href="https://github.com/mozilla/rust/pull/10965">completely
overhauled</a>. Alex wrote an <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007565.html">email
to the
list</a>
about the practical implications of this.</li>
<li><code>std::result::collect</code> <a href="https://github.com/mozilla/rust/pull/11098">now uses an
iterator</a>.</li>
<li><code>ClonableIterator</code> <a href="https://github.com/mozilla/rust/pull/11160">has been
renamed</a> to <code>CloneableIterator</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>libnative has <a href="https://github.com/mozilla/rust/pull/11159">process and TCP</a>
implementations.</li>
<li>Coercion of types into trait objects <a href="https://github.com/mozilla/rust/pull/11156">is now
supported</a>, which means <code>as
~SomeTrait</code> and <code>as &amp;Reader</code> can be left out.</li>
<li>I normally wouldn&rsquo;t mention this since it&rsquo;s internal to the compiler, but
Patrick made a heroic effort to <a href="https://github.com/mozilla/rust/pull/11058">remove <code>@mut</code> from all the
places</a>.</li>
<li>rustdoc can <a href="https://github.com/mozilla/rust/pull/11120">now test doc
comments</a>. See the pull request
for details on how and what is tested (also in the rustdoc manual).</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>S√©bastien Paolacci</li>
</ul>


<h1>Meeting</h1>

<p>There was no meeting this week due to the holiday.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>Mozilla is on an extended holiday break until January 2nd, but we still landed
2 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Jack Moffitt re-enabled building with make to enable work on cross-targeting
ARM in <a href="https://github.com/mozilla/servo/pull/1441">#1441</a>.</li>
<li>ms2ger cleaned up how we handle namespaces in DOM elements
<a href="https://github.com/mozilla/servo/pull/1438">#1438</a></li>
</ul>


<h1>Announcements, etc</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007575.html">rust-openssl</a>
has been formed from the union of sfackler&rsquo;s rust-ssl and erickt&rsquo;s rustcrypto.</li>
<li><a href="http://www.lars.com/concurrency/rust/servo/2013/12/21/concurrency-rust-and-servo.html">Concurrency models, Rust, and
Servo</a>.</li>
<li><a href="http://words.steveklabnik.com/rust-is-surprisingly-expressive">Rust is surprisingly
expressive</a>.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007486.html">irust</a>,
a basic REPL written in Ruby.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/22/this-week-in-rust/"/>
    <updated>2013-12-22T06:57:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/22/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a></p>

<p>This week brings a bunch of optimizations, cleanups, and the <code>std::comm</code>
rewrite. The <code>pkgid</code> attribute has also seen some changes.</p>

<!-- more -->


<p>This week also brings a bunch of tiny bugfixes, many of which I do not mention
below. Out of the 52 PRs this week, I only mention 16. The decision to include
a PR or not is fairly arbitrary, but I try to maintain a &ldquo;significance
barrier&rdquo; so that the list is not huge and hard to read (and also to save me
work!). Examples of things which I will stop including mentions of are test
fixes, minor documentation changes, build infrastructure fixes, and any
cleanup to the compiler that doesn&rsquo;t result in a relatively significant
speedup or memory usage decrease. I don&rsquo;t do this out of malice, but out of
laziness and convenience. <code>&lt;3</code></p>

<h1>What&rsquo;s cooking on master?</h1>

<p>52 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>std::comm</code> <a href="https://github.com/mozilla/rust/pull/10830">has been
rewritten</a>. In short, use
<code>Chan::new</code> and <code>SharedChan::new</code> to construct a Port/Chan pair. We&rsquo;re in the
ballpark of Go&rsquo;s performance, which is exciting. Read the PR for more details.</li>
<li>Some more <code>std::vec::raw</code>
<a href="https://github.com/mozilla/rust/pull/10996">cleanup</a> has turned some free
functions into methods. <code>.as_mut_buf</code> and friends <a href="https://github.com/mozilla/rust/pull/11029">have also been
removed</a>, replaced by using
<code>.as_ptr</code>, <code>.as_mut_ptr</code>, and <code>.len</code>.</li>
<li><code>extra::ebml</code> <a href="https://github.com/mozilla/rust/pull/11057">has been partially
de-@d</a>.</li>
<li>A ton of useless traits, <code>ToOption</code> etc,  <a href="https://github.com/mozilla/rust/pull/10967">have been
removed</a>.</li>
<li>A nasty bug where having an <code>impl</code> for a type forced it to be public <a href="https://github.com/mozilla/rust/pull/11019">has
been fixed</a>. Some types which were
previously accessible may not be anymore, due to this.</li>
<li>The <code>pkgid</code> crate attribute <a href="https://github.com/mozilla/rust/pull/11041">has been
renamed</a> to <code>crate_id</code>.</li>
<li><code>extra::sort</code> <a href="https://github.com/mozilla/rust/pull/11064">has been
removed</a>, and there is now a
<code>sort</code> method on mutable slices (<code>&amp;mut [T]</code>).</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>The <code>remove</code> and <code>insert</code> methods on vectors have had some unsafe code added
to make them <a href="https://github.com/mozilla/rust/pull/11061">3x faster</a>.</li>
<li>The <code>sum</code> method on <code>extra::stat::Stat</code> <a href="https://github.com/mozilla/rust/pull/10927">has been made more
accurate</a>.</li>
<li>debuginfo for by-value <code>self</code> <a href="https://github.com/mozilla/rust/pull/11033">has been
fixed</a>.</li>
<li><code>return</code> is now <a href="https://github.com/mozilla/rust/pull/11024">allowed in
closures</a> for early return.</li>
<li><code>crate_id</code> (then <code>pkgid</code>) <a href="https://github.com/mozilla/rust/pull/10972">now
supports</a> specifying the crate
name. <code>#foo:1.0</code> as the fragment will make the crate name <code>foo</code>, for example
<code>gl</code> in <code>github.com/bjz/gl-rs#gl:1.0</code>.</li>
<li>A <code>Pod</code> kind <a href="https://github.com/mozilla/rust/pull/10924">has been added</a>
for types where a memcpy is a logical copy. This behaves very similarly to the
old <code>Copy</code> kind.</li>
<li>Stability attributes (<code>#[deprecated]</code>, <code>#[experimental]</code>, etc) <a href="https://github.com/mozilla/rust/pull/10990">are now
checked for method calls</a>.</li>
<li>Metadata reading has been made <a href="https://github.com/mozilla/rust/pull/11017">4x
faster</a>.</li>
<li>msys terminals are <a href="https://github.com/mozilla/rust/pull/11031">now
supported</a> by <code>extra::term</code>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Carter Tazio Schonwald</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-17">weekly
meeting</a>
discusses some pull requests, <code>pkgid</code>, renaming <code>extern mod</code>, the stdlib
module hierarchy, and renaming some of the vector methods.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>We landed 19 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Pradeep Kumar re-enabled parallel selector matching
<a href="https://github.com/mozilla/servo/pull/1429">#1429</a>.</li>
<li>Daniel Hedlund fixed window redraw on Linux
<a href="https://github.com/mozilla/servo/pull/1414">#1414</a>.</li>
<li>Tetsuharu Ohzeki significantly cleaned up the compositor source code in
<a href="https://github.com/mozilla/servo/pull/1425">#1425</a>.</li>
<li>Simon Sapin added support for non-UTF8 stylesheets
<a href="https://github.com/mozilla/servo/pull/1377">#1377</a>.</li>
<li>Patrick Walton cleaned up made several PRs that clean up layout&rsquo;s dependency
on DOM nodes.</li>
<li>Isabelle Carter added support for positioned offsets for layout in
<a href="https://github.com/mozilla/servo/pull/1407">#1407</a>.</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-16">meeting</a>, we
discussed using the Critic review tool from Opera with github. We are
currently experimenting it, with jgraham&rsquo;s support. Jack also discussed his
ongoing Rust upgrade which, as always, has uncovered several interesting Rust
compiler bugs.</p>

<p>We also sketched out our current planning
<a href="https://github.com/mozilla/servo/wiki/Roadmap">roadmap</a>, along with a cheat
sheet of some of the
<a href="https://github.com/mozilla/servo/wiki/Research">research</a> topics we&rsquo;re also
investigating.</p>

<h1>Announcements, etc</h1>

<ul>
<li>The SF meetup happened. It was recorded and <a href="https://air.mozilla.org/rust-meetup-december-2013/">is available on Air
Mozilla</a>. The video is
well worth watching.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1t87a3/a_broad_vision_for_the_rust_docs_stack/">A broad vision for the Rust docs
stack</a>.</li>
<li><a href="http://blog.ezyang.com/2013/12/two-bugs-in-the-borrow-checker-every-rust-developer-should-know-about/">Two bugs in the borrow checker every Rust developer should know
about</a>.</li>
<li><a href="http://metajack.im/2013/12/19/building-rust-code--using-make-part-2/">Building Rust Code &ndash; Using Make Part
2</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1tdw88/video_2d_portaling_demo_in_rust_rustsdl2/">Video: 2D portaling demo in Rust and
rust-sdl2</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1teet8/what_do_you_want_in_a_rust_book/">What do you want in a Rust
book?</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1tcat1/i_etched_myself_a_rust_logo/">An etched copper Rust
logo</a>.</li>
<li><a href="https://github.com/blackducksw/ohcount/pull/30">Ohcount Rust support</a> has
been merged, so hopefully ohloh will have more accurate information for Rust
projects soon.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/16/this-week-in-rust/"/>
    <updated>2013-12-16T16:14:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/16/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>! It&rsquo;s late this week
because bors was having some issues which bounced every pull request, and it&rsquo;s
no fun writing about nothing.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>61 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The first part of the <code>box</code> changes <a href="https://github.com/mozilla/rust/pull/10929">has
landed</a>. <code>box</code> is a keyword, and
in an expression is now synonymous with <code>~</code> (ie, it allocates an owned box).</li>
<li><code>std::vec::raw</code> <a href="https://github.com/mozilla/rust/pull/10984">has seen some
cleanup</a>.</li>
<li>Link meta attributes <a href="https://github.com/mozilla/rust/pull/10593">have been
replaced</a> with a <code>pkgid</code>.  rustdoc
<a href="https://github.com/mozilla/rust/pull/10948">also now requires</a> a <code>pkgid</code>
attribute, rather than the deprecated link meta.</li>
<li>Some fairly obscure import syntax <a href="https://github.com/mozilla/rust/pull/10808">has been
changed</a>. <code>use {foo, bar}</code> is now
permitted, and the old <code>use foo, bar</code> is not.</li>
<li><code>Cell</code> <a href="https://github.com/mozilla/rust/pull/10791">has been removed</a>.
<code>RefCell</code> supersedes it.</li>
<li>Attempting to implement private traits <a href="https://github.com/mozilla/rust/pull/10862">no longer
works</a>.</li>
<li>The coherence <code>-Z</code> flag <a href="https://github.com/mozilla/rust/pull/10909">has been
removed</a>.</li>
<li>The <code>self</code> lifetime <a href="https://github.com/mozilla/rust/pull/10897">is now
illegal</a>, like the rest of the
keywords. Now, lifetime parameters are truly only identifiers.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>A dead code warning <a href="https://github.com/mozilla/rust/pull/10477">has been
implemented</a>. This is pretty
awesome and will do things like warn for test functions that are accidentally
never marked <code>#[test]</code> and so are never called. Some bugs in it were
<a href="https://github.com/mozilla/rust/pull/10870">also</a>
<a href="https://github.com/mozilla/rust/pull/10994">fixed</a>.</li>
<li>The benchmark runner <a href="https://github.com/mozilla/rust/pull/10952">now
handles</a> slow benchmarks.
Previously, it wouldn&rsquo;t run a benchmark that took more than 1ms. Now, it will!</li>
<li>The <code>shootout-fasta</code> benchmark <a href="https://github.com/mozilla/rust/pull/10933">has been
rewritten</a>. It&rsquo;s about 10x faster,
and looks nicer.</li>
<li>Stepping through / breaking on function calls <a href="https://github.com/mozilla/rust/pull/10966">no longer goes through the
function prelude</a>.</li>
<li>The vector <code>move_iter</code> <a href="https://github.com/mozilla/rust/pull/10995">has been made
faster</a>.</li>
<li>A single <a href="https://github.com/mozilla/rust/pull/10918"><code>#[inline]</code></a>  has made
<code>vec::from_elem</code> 20x faster</li>
<li><code>Buffer</code> <a href="https://github.com/mozilla/rust/pull/10856">now has an iterator over its
lines</a>. The gotcha is that the
newlines are included in the yielded strings.</li>
<li>Struct pattern shorthand <a href="https://github.com/mozilla/rust/pull/10833">has been
improved</a> by allowing ref/mut,
like <code>let Foo { mut x, .. } = some_foo</code>, rather than the previous <code>let Foo {
x: mut x, .. } = some_foo</code>.</li>
<li>LTO (link time optimization) <a href="https://github.com/mozilla/rust/pull/10812">has been
implemented</a>.  Rejoice.</li>
<li>All landing pads (and thus unwinding!) <a href="https://github.com/mozilla/rust/pull/10916">can now be
omitted</a> when doing LTO.</li>
<li><code>std::io::util</code> <a href="https://github.com/mozilla/rust/pull/10895">has been added</a>
with:

<ul>
<li><code>LimitReader</code> that will only read <code>n</code> bytes from another reader</li>
<li><code>NullWriter</code> that ignores everything written to it</li>
<li><code>NullReader</code> that is always EOF</li>
<li><code>ZeroReader</code> which returns all zeroes,</li>
<li><code>MultiWriter</code> which will replicate a written buffer to many writers</li>
<li><code>ChainedReader</code> which reads readers in order to completion</li>
<li><code>TeeReader</code> which will write to a Writer while reading</li>
<li>a <code>copy</code> function which copies the full contents of a reader into a writer.</li>
</ul>
</li>
<li>Windows application manifests <a href="https://github.com/mozilla/rust/pull/10878">are now
embedded</a>, so we don&rsquo;t get
special cased.</li>
<li>A <code>--dep-info</code> flag <a href="https://github.com/mozilla/rust/pull/10698">has been
added</a> which is like <code>-MMD</code> to C
compilers.</li>
<li><code>&amp;mut</code> underneath <code>&amp;</code> can <a href="https://github.com/mozilla/rust/pull/10787">now be
frozen</a>.</li>
<li><code>PortReader</code> and <code>ChanWriter</code> <a href="https://github.com/mozilla/rust/pull/10823">have been
implemented</a>.</li>
<li>Some more random distributions <a href="https://github.com/mozilla/rust/pull/10859">have been
implemented</a>.</li>
<li>We <a href="https://github.com/mozilla/rust/pull/10874">now use</a> LLVM&rsquo;s integrated
assembler on Windows.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Cadence Marseille</li>
<li>Edward Z. Yang</li>
<li>Erik Price</li>
<li>Fabrice Desr√©</li>
<li>Jan Niklas Hasse</li>
<li>Richard Diamond</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-10">weekly
meeting</a>
discussed <code>enum mod</code>, using types to drive inference (rather than attributes
like <code>#[no_send]</code> etc), a formal grammar, unwinding, and some various PRs (all
mentioned above).</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>We landed 29 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton landed a number of changes to layout to avoid going back to
the DOM for properties to make layout&rsquo;s access to the DOM more opaque. He also
cleaned up a significant number of regressions and added a huge number of ref
tests.</li>
<li>Keegan McAllister made content tests work in headless mode in
<a href="https://github.com/mozilla/servo/pull/1382">#1382</a>.</li>
<li>Daniel Glazman added namespace info to elements in
<a href="https://github.com/mozilla/servo/pull/1358">#1358</a>.</li>
<li>Daniel Hedlund added support for leading font metrics on Linux
<a href="https://github.com/mozilla/servo/pull/1352">#1352</a>.</li>
</ul>


<h2>Meetings</h2>

<p>This week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-09">meeting</a> discussed
an upcoming Servo workweek in SF on January 20th. We also discussed the Rust
version update and some general team frustration at a large number of
regressions lately, primarily caused by the need to disable some of our
automated testing due to instability (particularly at shutdown). This week of
work saw many of those issues fixed.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/mozilla/rust/wiki/Doc-FAQ-Cheatsheet">FAQ Cheatsheet</a> &ndash;
A cookbook-style cheatsheet of how to do simple things, based on IRC FAQs.</li>
<li><a href="http://metajack.im/2013/12/11/building-rust-code--current-issues/">Building Rust Code &ndash; Current
Issues</a></li>
<li><a href="http://metajack.im/2013/12/12/building-rust-code--using-make/">Building Rust Code &ndash; Using
Make</a></li>
<li><a href="https://github.com/pirapira/kissdb-rust">A Rust port of kissdb</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1syapv/implement_the_new_box_syntax_for_unique_pointers/">Reddit
discussion</a>
of the <code>box</code> change.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/09/this-week-in-rust/"/>
    <updated>2013-12-09T13:13:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/09/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>! It&rsquo;s a bit delayed
due to finals, but like the spinning of the Earth it goes on.</p>

<p>Shameless plug: <a href="http://www.reddit.com/r/rust/comments/1sikak/ask_cmr_to_do_things/">ask me to do
things</a>
over my winter break!</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>52 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The much-discussed <a href="https://github.com/mozilla/rust/pull/10364"><code>Result</code> API
changes</a> have happened. The gist
of it is that <code>.ok()</code> and <code>.err()</code> return Options. The other changes didn&rsquo;t
land, I assume they will be coming later.</li>
<li>The <a href="https://github.com/mozilla/rust/pull/10758">JIT support has been
removed</a>, due to lack of maintenance and upstream
changes (this came with the LLVM upgrade).</li>
<li>Keywords (except self) are <a href="https://github.com/mozilla/rust/pull/10675">no longer allowed as lifetime
parameters</a>.</li>
<li><code>Path::init</code> has been <a href="https://github.com/mozilla/rust/pull/10796">renamed</a>
back to <code>Path::new</code>.</li>
<li><code>std::str::from_utf8</code> <a href="https://github.com/mozilla/rust/pull/10701">no longer
allocates</a>.</li>
<li><code>std::util::ignore</code> <a href="https://github.com/mozilla/rust/pull/10701">has been
renamed</a> to <code>std::prelude::drop</code>, to
better reflect what it does.</li>
<li>Duplicate bindings are <a href="https://github.com/mozilla/rust/pull/10776">no longer
allowed</a> in struct bindings. That
is, <code>let SomeStruct { foo, foo } = baz;</code> is no longer legal.</li>
<li>Dynamic library propagation <a href="https://github.com/mozilla/rust/pull/10777">is
reimplemented</a>.</li>
<li><code>extra::c_vec</code> <a href="https://github.com/mozilla/rust/pull/10736">has been
modernized</a>.</li>
<li><code>MutableVector::mut_split</code> <a href="https://github.com/mozilla/rust/pull/10757">has been
renamed</a> to <code>mut_split_at</code>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>A part of the tutorial <a href="https://github.com/mozilla/rust/pull/10690">has been
rewritten</a>.</li>
<li>Vim highlighting <a href="https://github.com/mozilla/rust/pull/10793">has been
updated</a>.</li>
<li><code>deriving</code> <a href="https://github.com/mozilla/rust/pull/10844">has better error
messages</a>.</li>
<li><code>StrSlice</code> has <a href="https://github.com/mozilla/rust/pull/10824">grown some
documentation</a>.</li>
<li>Snapshots are now <a href="https://github.com/mozilla/rust/pull/10809">statically
linked</a>.</li>
<li>From the &ldquo;changes I don&rsquo;t really understand&rdquo; department, <a href="https://github.com/mozilla/rust/pull/10506">trait lifetime
parameters</a> are early bound in
associated functions.</li>
<li>A race in the scheduler <a href="https://github.com/mozilla/rust/pull/10817">has been
squelched</a>.</li>
<li>extra now has an <a href="https://github.com/mozilla/rust/pull/10211">LRU cache</a>.</li>
<li>A <code>log_enabled!(level)</code> macro <a href="https://github.com/mozilla/rust/pull/10768">has been
added</a>, for checking if the
program is being run at a given log level.</li>
<li>Static linking <a href="https://github.com/mozilla/rust/pull/10742">now has docs</a>!</li>
<li>Memory usage when compiling librustc has been killed by 130MB with some
<a href="https://github.com/mozilla/rust/pull/10676">well-placed indirection</a>.</li>
<li><code>MutableVector</code> has <a href="https://github.com/mozilla/rust/pull/10739">another
iterator</a>: <code>mut_chunks()</code>, for
iterating over mutable slices.</li>
<li>The <code>reverse-complement</code> shootout benchmark <a href="https://github.com/mozilla/rust/pull/10799">has been
rewritten</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Alexandros Tasos</li>
<li>Diego Ongaro</li>
<li>Julia Evans</li>
<li>osa1</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-03">weekly
meeting</a>
discussed using <code>box</code> for placement new, some rustpkg discussion, dropping the
dependency on a system C++ library, and the above <code>from_utf8</code> and <code>Result</code>
pull requests.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>We landed 19 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Simon Sapin added the CSS visibility property in
<a href="https://github.com/mozilla/servo/pull/1331">#1331</a>.</li>
<li>Juneyoung Cho landed local bookmark navigation in
<a href="https://github.com/mozilla/servo/pull/1262">#1262</a>.</li>
<li>ms2ger added reporting exceptions to JS when the DOM implementation fails in
<a href="https://github.com/mozilla/servo/pull/1304">#1304</a>.</li>
<li>Keegan McAllister and Patrick Kim landed several changes to continue our
push to remove @-boxes to open up more of our data to safe parallel access
across task boundaries.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Bruno de Oliveira Abinader</li>
<li>Daniel Hedlund</li>
</ul>


<h2>New intern</h2>

<ul>
<li>Isabelle Carter will be joining us as part of the GNOME Outreach Program for
Women, <a href="https://wiki.gnome.org/OutreachProgramForWomen">OPW</a>, and will be
working on adding <code>position:fixed</code> support to Servo. The internship runs from
December 10 through March 10.</li>
</ul>


<h2>Meetings</h2>

<p>This week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-02">meeting</a> was short
and mostly covered some build system changes that Jack is working on. In
short, we will use Rust&rsquo;s static linking to make it easier to distribute a
Servo binary and we are making a larger change to CMake in order to get both
more reliable parallel/incremental builds and get support for
cross-compilation.</p>

<h1>Announcements etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1s5laq/evictbt_an_issue_tracker_written_in_rust_that/">Evict-BT</a>
- an issue tracker that integrates loosely with git.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1s8c0j/rust_with_emscripten/">Rust with
Emscripten</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s3jgd/day_36_on_programming_without_malloc/">Day 36: On programming without
malloc</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s3osp/blast_from_the_past_pre01_raytracer_rustdev_rust/">Rust experience
report</a>
- a pre-0.1 raytracer and response to the language.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1s0aj5/rust_frontend_to_gcc/">Rust frontend to
GCC</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ry4ym/types_in_rust_for_beginners/">Types in Rust, for
Beginners</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1rxj0x/thoughts_on_dst_part_4_including_a_recap_of_parts/">Thoughts on DST, part
4</a></li>
<li><a href="http://pnkfelix.github.io/present-rust-codemesh2013/fklock-rust-codemesh2013.pdf">Slides from pnkfelix&rsquo;s codemash
presentation</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1seoe1/lets_avoid_having_both_foo_and_foo_opt/">An ML thread on redundant APIs involving
<code>Option</code></a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1se6qa/rfc_what_do_you_want_in_a_rust_docker_image/">What do you want in a Rust Docker
image?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s9y7o/less_is_more_lambda_the_ultimate/">A huge thread on lots of things
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s8opt/sodium_oxide_fast_cryptographic_library_for_rust/">Rust bindings to
libsodium/NaCl</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
