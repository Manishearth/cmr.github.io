<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rust 'n Stuffs]]></title>
  <link href="http://cmr.github.io/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2013-12-30T10:57:13-05:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/30/this-week-in-rust/"/>
    <updated>2013-12-30T00:48:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/30/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions.</a>.</p>

<p>It&rsquo;s been a slow week due to the holidays. In the next week or two 0.9 is
being released. It&rsquo;s an exciting release, but in more subtler ways than the
previous 3. Many small details, especially around the runtime and linking,
have changed that make Rust faster and more flexible without necessarily being
a breaking change. As always, the detailed changelog will have the
nitty-gritties.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>36 pull requests were merged this week. bors was feeling unwell for a bit,
due to a deadlock in a scheduler test that was fixed today and a deadlock in
(incorrect usage of) LLVM.</p>

<h2>Breaking changes</h2>

<ul>
<li>The <code>comm</code> primitives are <a href="https://github.com/mozilla/rust/pull/11111">never <code>Freeze</code>
anymore</a>.</li>
<li>The <code>link</code> attribute is <a href="https://github.com/mozilla/rust/pull/11091">now
forbidden</a> on crates. All hail
<code>crate_id</code>!</li>
<li><a href="https://github.com/mozilla/rust/pull/11121">All of our C++ dependencies have been
removed</a>. This is only breaking
because it changes the debugging experience; <code>rust_begin_unwind</code> is gone and
<code>catch throw</code> doesn&rsquo;t work because we don&rsquo;t use C++ exceptions anymore. To set
a breakpoint on task failure, <code>break _Unwind_RaiseException</code>.</li>
<li>The underbelly of the runtime has been <a href="https://github.com/mozilla/rust/pull/10965">completely
overhauled</a>. Alex wrote an <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007565.html">email
to the
list</a>
about the practical implications of this.</li>
<li><code>std::result::collect</code> <a href="https://github.com/mozilla/rust/pull/11098">now uses an
iterator</a>.</li>
<li><code>ClonableIterator</code> <a href="https://github.com/mozilla/rust/pull/11160">has been
renamed</a> to <code>CloneableIterator</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>libnative has <a href="https://github.com/mozilla/rust/pull/11159">process and TCP</a>
implementations.</li>
<li>Coercion of types into trait objects <a href="https://github.com/mozilla/rust/pull/11156">is now
supported</a>, which means <code>as
~SomeTrait</code> and <code>as &amp;Reader</code> can be left out.</li>
<li>I normally wouldn&rsquo;t mention this since it&rsquo;s internal to the compiler, but
Patrick made a heroic effort to <a href="https://github.com/mozilla/rust/pull/11058">remove <code>@mut</code> from all the
places</a>.</li>
<li>rustdoc can <a href="https://github.com/mozilla/rust/pull/11120">now test doc
comments</a>. See the pull request
for details on how and what is tested (also in the rustdoc manual).</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>SÃ©bastien Paolacci</li>
</ul>


<h1>Meeting</h1>

<p>There was no meeting this week due to the holiday.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>Mozilla is on an extended holiday break until January 2nd, but we still landed
2 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Jack Moffitt re-enabled building with make to enable work on cross-targeting
ARM in <a href="https://github.com/mozilla/servo/pull/1441">#1441</a>.</li>
<li>ms2ger cleaned up how we handle namespaces in DOM elements
<a href="https://github.com/mozilla/servo/pull/1438">#1438</a></li>
</ul>


<h1>Announcements, etc</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007575.html">rust-openssl</a>
has been formed from the union of sfackler&rsquo;s rust-ssl and erickt&rsquo;s rustcrypto.</li>
<li><a href="http://www.lars.com/concurrency/rust/servo/2013/12/21/concurrency-rust-and-servo.html">Concurrency models, Rust, and
Servo</a>.</li>
<li><a href="http://words.steveklabnik.com/rust-is-surprisingly-expressive">Rust is surprisingly
expressive</a>.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007486.html">irust</a>,
a basic REPL written in Ruby.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/22/this-week-in-rust/"/>
    <updated>2013-12-22T06:57:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/22/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a></p>

<p>This week brings a bunch of optimizations, cleanups, and the <code>std::comm</code>
rewrite. The <code>pkgid</code> attribute has also seen some changes.</p>

<!-- more -->


<p>This week also brings a bunch of tiny bugfixes, many of which I do not mention
below. Out of the 52 PRs this week, I only mention 16. The decision to include
a PR or not is fairly arbitrary, but I try to maintain a &ldquo;significance
barrier&rdquo; so that the list is not huge and hard to read (and also to save me
work!). Examples of things which I will stop including mentions of are test
fixes, minor documentation changes, build infrastructure fixes, and any
cleanup to the compiler that doesn&rsquo;t result in a relatively significant
speedup or memory usage decrease. I don&rsquo;t do this out of malice, but out of
laziness and convenience. <code>&lt;3</code></p>

<h1>What&rsquo;s cooking on master?</h1>

<p>52 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>std::comm</code> <a href="https://github.com/mozilla/rust/pull/10830">has been
rewritten</a>. In short, use
<code>Chan::new</code> and <code>SharedChan::new</code> to construct a Port/Chan pair. We&rsquo;re in the
ballpark of Go&rsquo;s performance, which is exciting. Read the PR for more details.</li>
<li>Some more <code>std::vec::raw</code>
<a href="https://github.com/mozilla/rust/pull/10996">cleanup</a> has turned some free
functions into methods. <code>.as_mut_buf</code> and friends <a href="https://github.com/mozilla/rust/pull/11029">have also been
removed</a>, replaced by using
<code>.as_ptr</code>, <code>.as_mut_ptr</code>, and <code>.len</code>.</li>
<li><code>extra::ebml</code> <a href="https://github.com/mozilla/rust/pull/11057">has been partially
de-@d</a>.</li>
<li>A ton of useless traits, <code>ToOption</code> etc,  <a href="https://github.com/mozilla/rust/pull/10967">have been
removed</a>.</li>
<li>A nasty bug where having an <code>impl</code> for a type forced it to be public <a href="https://github.com/mozilla/rust/pull/11019">has
been fixed</a>. Some types which were
previously accessible may not be anymore, due to this.</li>
<li>The <code>pkgid</code> crate attribute <a href="https://github.com/mozilla/rust/pull/11041">has been
renamed</a> to <code>crate_id</code>.</li>
<li><code>extra::sort</code> <a href="https://github.com/mozilla/rust/pull/11064">has been
removed</a>, and there is now a
<code>sort</code> method on mutable slices (<code>&amp;mut [T]</code>).</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>The <code>remove</code> and <code>insert</code> methods on vectors have had some unsafe code added
to make them <a href="https://github.com/mozilla/rust/pull/11061">3x faster</a>.</li>
<li>The <code>sum</code> method on <code>extra::stat::Stat</code> <a href="https://github.com/mozilla/rust/pull/10927">has been made more
accurate</a>.</li>
<li>debuginfo for by-value <code>self</code> <a href="https://github.com/mozilla/rust/pull/11033">has been
fixed</a>.</li>
<li><code>return</code> is now <a href="https://github.com/mozilla/rust/pull/11024">allowed in
closures</a> for early return.</li>
<li><code>crate_id</code> (then <code>pkgid</code>) <a href="https://github.com/mozilla/rust/pull/10972">now
supports</a> specifying the crate
name. <code>#foo:1.0</code> as the fragment will make the crate name <code>foo</code>, for example
<code>gl</code> in <code>github.com/bjz/gl-rs#gl:1.0</code>.</li>
<li>A <code>Pod</code> kind <a href="https://github.com/mozilla/rust/pull/10924">has been added</a>
for types where a memcpy is a logical copy. This behaves very similarly to the
old <code>Copy</code> kind.</li>
<li>Stability attributes (<code>#[deprecated]</code>, <code>#[experimental]</code>, etc) <a href="https://github.com/mozilla/rust/pull/10990">are now
checked for method calls</a>.</li>
<li>Metadata reading has been made <a href="https://github.com/mozilla/rust/pull/11017">4x
faster</a>.</li>
<li>msys terminals are <a href="https://github.com/mozilla/rust/pull/11031">now
supported</a> by <code>extra::term</code>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Carter Tazio Schonwald</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-17">weekly
meeting</a>
discusses some pull requests, <code>pkgid</code>, renaming <code>extern mod</code>, the stdlib
module hierarchy, and renaming some of the vector methods.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>We landed 19 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Pradeep Kumar re-enabled parallel selector matching
<a href="https://github.com/mozilla/servo/pull/1429">#1429</a>.</li>
<li>Daniel Hedlund fixed window redraw on Linux
<a href="https://github.com/mozilla/servo/pull/1414">#1414</a>.</li>
<li>Tetsuharu Ohzeki significantly cleaned up the compositor source code in
<a href="https://github.com/mozilla/servo/pull/1425">#1425</a>.</li>
<li>Simon Sapin added support for non-UTF8 stylesheets
<a href="https://github.com/mozilla/servo/pull/1377">#1377</a>.</li>
<li>Patrick Walton cleaned up made several PRs that clean up layout&rsquo;s dependency
on DOM nodes.</li>
<li>Isabelle Carter added support for positioned offsets for layout in
<a href="https://github.com/mozilla/servo/pull/1407">#1407</a>.</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-16">meeting</a>, we
discussed using the Critic review tool from Opera with github. We are
currently experimenting it, with jgraham&rsquo;s support. Jack also discussed his
ongoing Rust upgrade which, as always, has uncovered several interesting Rust
compiler bugs.</p>

<p>We also sketched out our current planning
<a href="https://github.com/mozilla/servo/wiki/Roadmap">roadmap</a>, along with a cheat
sheet of some of the
<a href="https://github.com/mozilla/servo/wiki/Research">research</a> topics we&rsquo;re also
investigating.</p>

<h1>Announcements, etc</h1>

<ul>
<li>The SF meetup happened. It was recorded and <a href="https://air.mozilla.org/rust-meetup-december-2013/">is available on Air
Mozilla</a>. The video is
well worth watching.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1t87a3/a_broad_vision_for_the_rust_docs_stack/">A broad vision for the Rust docs
stack</a>.</li>
<li><a href="http://blog.ezyang.com/2013/12/two-bugs-in-the-borrow-checker-every-rust-developer-should-know-about/">Two bugs in the borrow checker every Rust developer should know
about</a>.</li>
<li><a href="http://metajack.im/2013/12/19/building-rust-code--using-make-part-2/">Building Rust Code &ndash; Using Make Part
2</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1tdw88/video_2d_portaling_demo_in_rust_rustsdl2/">Video: 2D portaling demo in Rust and
rust-sdl2</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1teet8/what_do_you_want_in_a_rust_book/">What do you want in a Rust
book?</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1tcat1/i_etched_myself_a_rust_logo/">An etched copper Rust
logo</a>.</li>
<li><a href="https://github.com/blackducksw/ohcount/pull/30">Ohcount Rust support</a> has
been merged, so hopefully ohloh will have more accurate information for Rust
projects soon.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/16/this-week-in-rust/"/>
    <updated>2013-12-16T16:14:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/16/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>! It&rsquo;s late this week
because bors was having some issues which bounced every pull request, and it&rsquo;s
no fun writing about nothing.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>61 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The first part of the <code>box</code> changes <a href="https://github.com/mozilla/rust/pull/10929">has
landed</a>. <code>box</code> is a keyword, and
in an expression is now synonymous with <code>~</code> (ie, it allocates an owned box).</li>
<li><code>std::vec::raw</code> <a href="https://github.com/mozilla/rust/pull/10984">has seen some
cleanup</a>.</li>
<li>Link meta attributes <a href="https://github.com/mozilla/rust/pull/10593">have been
replaced</a> with a <code>pkgid</code>.  rustdoc
<a href="https://github.com/mozilla/rust/pull/10948">also now requires</a> a <code>pkgid</code>
attribute, rather than the deprecated link meta.</li>
<li>Some fairly obscure import syntax <a href="https://github.com/mozilla/rust/pull/10808">has been
changed</a>. <code>use {foo, bar}</code> is now
permitted, and the old <code>use foo, bar</code> is not.</li>
<li><code>Cell</code> <a href="https://github.com/mozilla/rust/pull/10791">has been removed</a>.
<code>RefCell</code> supersedes it.</li>
<li>Attempting to implement private traits <a href="https://github.com/mozilla/rust/pull/10862">no longer
works</a>.</li>
<li>The coherence <code>-Z</code> flag <a href="https://github.com/mozilla/rust/pull/10909">has been
removed</a>.</li>
<li>The <code>self</code> lifetime <a href="https://github.com/mozilla/rust/pull/10897">is now
illegal</a>, like the rest of the
keywords. Now, lifetime parameters are truly only identifiers.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>A dead code warning <a href="https://github.com/mozilla/rust/pull/10477">has been
implemented</a>. This is pretty
awesome and will do things like warn for test functions that are accidentally
never marked <code>#[test]</code> and so are never called. Some bugs in it were
<a href="https://github.com/mozilla/rust/pull/10870">also</a>
<a href="https://github.com/mozilla/rust/pull/10994">fixed</a>.</li>
<li>The benchmark runner <a href="https://github.com/mozilla/rust/pull/10952">now
handles</a> slow benchmarks.
Previously, it wouldn&rsquo;t run a benchmark that took more than 1ms. Now, it will!</li>
<li>The <code>shootout-fasta</code> benchmark <a href="https://github.com/mozilla/rust/pull/10933">has been
rewritten</a>. It&rsquo;s about 10x faster,
and looks nicer.</li>
<li>Stepping through / breaking on function calls <a href="https://github.com/mozilla/rust/pull/10966">no longer goes through the
function prelude</a>.</li>
<li>The vector <code>move_iter</code> <a href="https://github.com/mozilla/rust/pull/10995">has been made
faster</a>.</li>
<li>A single <a href="https://github.com/mozilla/rust/pull/10918"><code>#[inline]</code></a>  has made
<code>vec::from_elem</code> 20x faster</li>
<li><code>Buffer</code> <a href="https://github.com/mozilla/rust/pull/10856">now has an iterator over its
lines</a>. The gotcha is that the
newlines are included in the yielded strings.</li>
<li>Struct pattern shorthand <a href="https://github.com/mozilla/rust/pull/10833">has been
improved</a> by allowing ref/mut,
like <code>let Foo { mut x, .. } = some_foo</code>, rather than the previous <code>let Foo {
x: mut x, .. } = some_foo</code>.</li>
<li>LTO (link time optimization) <a href="https://github.com/mozilla/rust/pull/10812">has been
implemented</a>.  Rejoice.</li>
<li>All landing pads (and thus unwinding!) <a href="https://github.com/mozilla/rust/pull/10916">can now be
omitted</a> when doing LTO.</li>
<li><code>std::io::util</code> <a href="https://github.com/mozilla/rust/pull/10895">has been added</a>
with:

<ul>
<li><code>LimitReader</code> that will only read <code>n</code> bytes from another reader</li>
<li><code>NullWriter</code> that ignores everything written to it</li>
<li><code>NullReader</code> that is always EOF</li>
<li><code>ZeroReader</code> which returns all zeroes,</li>
<li><code>MultiWriter</code> which will replicate a written buffer to many writers</li>
<li><code>ChainedReader</code> which reads readers in order to completion</li>
<li><code>TeeReader</code> which will write to a Writer while reading</li>
<li>a <code>copy</code> function which copies the full contents of a reader into a writer.</li>
</ul>
</li>
<li>Windows application manifests <a href="https://github.com/mozilla/rust/pull/10878">are now
embedded</a>, so we don&rsquo;t get
special cased.</li>
<li>A <code>--dep-info</code> flag <a href="https://github.com/mozilla/rust/pull/10698">has been
added</a> which is like <code>-MMD</code> to C
compilers.</li>
<li><code>&amp;mut</code> underneath <code>&amp;</code> can <a href="https://github.com/mozilla/rust/pull/10787">now be
frozen</a>.</li>
<li><code>PortReader</code> and <code>ChanWriter</code> <a href="https://github.com/mozilla/rust/pull/10823">have been
implemented</a>.</li>
<li>Some more random distributions <a href="https://github.com/mozilla/rust/pull/10859">have been
implemented</a>.</li>
<li>We <a href="https://github.com/mozilla/rust/pull/10874">now use</a> LLVM&rsquo;s integrated
assembler on Windows.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Cadence Marseille</li>
<li>Edward Z. Yang</li>
<li>Erik Price</li>
<li>Fabrice DesrÃ©</li>
<li>Jan Niklas Hasse</li>
<li>Richard Diamond</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-10">weekly
meeting</a>
discussed <code>enum mod</code>, using types to drive inference (rather than attributes
like <code>#[no_send]</code> etc), a formal grammar, unwinding, and some various PRs (all
mentioned above).</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>We landed 29 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton landed a number of changes to layout to avoid going back to
the DOM for properties to make layout&rsquo;s access to the DOM more opaque. He also
cleaned up a significant number of regressions and added a huge number of ref
tests.</li>
<li>Keegan McAllister made content tests work in headless mode in
<a href="https://github.com/mozilla/servo/pull/1382">#1382</a>.</li>
<li>Daniel Glazman added namespace info to elements in
<a href="https://github.com/mozilla/servo/pull/1358">#1358</a>.</li>
<li>Daniel Hedlund added support for leading font metrics on Linux
<a href="https://github.com/mozilla/servo/pull/1352">#1352</a>.</li>
</ul>


<h2>Meetings</h2>

<p>This week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-09">meeting</a> discussed
an upcoming Servo workweek in SF on January 20th. We also discussed the Rust
version update and some general team frustration at a large number of
regressions lately, primarily caused by the need to disable some of our
automated testing due to instability (particularly at shutdown). This week of
work saw many of those issues fixed.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/mozilla/rust/wiki/Doc-FAQ-Cheatsheet">FAQ Cheatsheet</a> &ndash;
A cookbook-style cheatsheet of how to do simple things, based on IRC FAQs.</li>
<li><a href="http://metajack.im/2013/12/11/building-rust-code--current-issues/">Building Rust Code &ndash; Current
Issues</a></li>
<li><a href="http://metajack.im/2013/12/12/building-rust-code--using-make/">Building Rust Code &ndash; Using
Make</a></li>
<li><a href="https://github.com/pirapira/kissdb-rust">A Rust port of kissdb</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1syapv/implement_the_new_box_syntax_for_unique_pointers/">Reddit
discussion</a>
of the <code>box</code> change.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/12/09/this-week-in-rust/"/>
    <updated>2013-12-09T13:13:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/12/09/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>! It&rsquo;s a bit delayed
due to finals, but like the spinning of the Earth it goes on.</p>

<p>Shameless plug: <a href="http://www.reddit.com/r/rust/comments/1sikak/ask_cmr_to_do_things/">ask me to do
things</a>
over my winter break!</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>52 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The much-discussed <a href="https://github.com/mozilla/rust/pull/10364"><code>Result</code> API
changes</a> have happened. The gist
of it is that <code>.ok()</code> and <code>.err()</code> return Options. The other changes didn&rsquo;t
land, I assume they will be coming later.</li>
<li>The <a href="https://github.com/mozilla/rust/pull/10758">JIT support has been
removed</a>, due to lack of maintenance and upstream
changes (this came with the LLVM upgrade).</li>
<li>Keywords (except self) are <a href="https://github.com/mozilla/rust/pull/10675">no longer allowed as lifetime
parameters</a>.</li>
<li><code>Path::init</code> has been <a href="https://github.com/mozilla/rust/pull/10796">renamed</a>
back to <code>Path::new</code>.</li>
<li><code>std::str::from_utf8</code> <a href="https://github.com/mozilla/rust/pull/10701">no longer
allocates</a>.</li>
<li><code>std::util::ignore</code> <a href="https://github.com/mozilla/rust/pull/10701">has been
renamed</a> to <code>std::prelude::drop</code>, to
better reflect what it does.</li>
<li>Duplicate bindings are <a href="https://github.com/mozilla/rust/pull/10776">no longer
allowed</a> in struct bindings. That
is, <code>let SomeStruct { foo, foo } = baz;</code> is no longer legal.</li>
<li>Dynamic library propagation <a href="https://github.com/mozilla/rust/pull/10777">is
reimplemented</a>.</li>
<li><code>extra::c_vec</code> <a href="https://github.com/mozilla/rust/pull/10736">has been
modernized</a>.</li>
<li><code>MutableVector::mut_split</code> <a href="https://github.com/mozilla/rust/pull/10757">has been
renamed</a> to <code>mut_split_at</code>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>A part of the tutorial <a href="https://github.com/mozilla/rust/pull/10690">has been
rewritten</a>.</li>
<li>Vim highlighting <a href="https://github.com/mozilla/rust/pull/10793">has been
updated</a>.</li>
<li><code>deriving</code> <a href="https://github.com/mozilla/rust/pull/10844">has better error
messages</a>.</li>
<li><code>StrSlice</code> has <a href="https://github.com/mozilla/rust/pull/10824">grown some
documentation</a>.</li>
<li>Snapshots are now <a href="https://github.com/mozilla/rust/pull/10809">statically
linked</a>.</li>
<li>From the &ldquo;changes I don&rsquo;t really understand&rdquo; department, <a href="https://github.com/mozilla/rust/pull/10506">trait lifetime
parameters</a> are early bound in
associated functions.</li>
<li>A race in the scheduler <a href="https://github.com/mozilla/rust/pull/10817">has been
squelched</a>.</li>
<li>extra now has an <a href="https://github.com/mozilla/rust/pull/10211">LRU cache</a>.</li>
<li>A <code>log_enabled!(level)</code> macro <a href="https://github.com/mozilla/rust/pull/10768">has been
added</a>, for checking if the
program is being run at a given log level.</li>
<li>Static linking <a href="https://github.com/mozilla/rust/pull/10742">now has docs</a>!</li>
<li>Memory usage when compiling librustc has been killed by 130MB with some
<a href="https://github.com/mozilla/rust/pull/10676">well-placed indirection</a>.</li>
<li><code>MutableVector</code> has <a href="https://github.com/mozilla/rust/pull/10739">another
iterator</a>: <code>mut_chunks()</code>, for
iterating over mutable slices.</li>
<li>The <code>reverse-complement</code> shootout benchmark <a href="https://github.com/mozilla/rust/pull/10799">has been
rewritten</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Alexandros Tasos</li>
<li>Diego Ongaro</li>
<li>Julia Evans</li>
<li>osa1</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-03">weekly
meeting</a>
discussed using <code>box</code> for placement new, some rustpkg discussion, dropping the
dependency on a system C++ library, and the above <code>from_utf8</code> and <code>Result</code>
pull requests.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>We landed 19 PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Simon Sapin added the CSS visibility property in
<a href="https://github.com/mozilla/servo/pull/1331">#1331</a>.</li>
<li>Juneyoung Cho landed local bookmark navigation in
<a href="https://github.com/mozilla/servo/pull/1262">#1262</a>.</li>
<li>ms2ger added reporting exceptions to JS when the DOM implementation fails in
<a href="https://github.com/mozilla/servo/pull/1304">#1304</a>.</li>
<li>Keegan McAllister and Patrick Kim landed several changes to continue our
push to remove @-boxes to open up more of our data to safe parallel access
across task boundaries.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Bruno de Oliveira Abinader</li>
<li>Daniel Hedlund</li>
</ul>


<h2>New intern</h2>

<ul>
<li>Isabelle Carter will be joining us as part of the GNOME Outreach Program for
Women, <a href="https://wiki.gnome.org/OutreachProgramForWomen">OPW</a>, and will be
working on adding <code>position:fixed</code> support to Servo. The internship runs from
December 10 through March 10.</li>
</ul>


<h2>Meetings</h2>

<p>This week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-02">meeting</a> was short
and mostly covered some build system changes that Jack is working on. In
short, we will use Rust&rsquo;s static linking to make it easier to distribute a
Servo binary and we are making a larger change to CMake in order to get both
more reliable parallel/incremental builds and get support for
cross-compilation.</p>

<h1>Announcements etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1s5laq/evictbt_an_issue_tracker_written_in_rust_that/">Evict-BT</a>
- an issue tracker that integrates loosely with git.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1s8c0j/rust_with_emscripten/">Rust with
Emscripten</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s3jgd/day_36_on_programming_without_malloc/">Day 36: On programming without
malloc</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s3osp/blast_from_the_past_pre01_raytracer_rustdev_rust/">Rust experience
report</a>
- a pre-0.1 raytracer and response to the language.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1s0aj5/rust_frontend_to_gcc/">Rust frontend to
GCC</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ry4ym/types_in_rust_for_beginners/">Types in Rust, for
Beginners</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1rxj0x/thoughts_on_dst_part_4_including_a_recap_of_parts/">Thoughts on DST, part
4</a></li>
<li><a href="http://pnkfelix.github.io/present-rust-codemesh2013/fklock-rust-codemesh2013.pdf">Slides from pnkfelix&rsquo;s codemash
presentation</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1seoe1/lets_avoid_having_both_foo_and_foo_opt/">An ML thread on redundant APIs involving
<code>Option</code></a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1se6qa/rfc_what_do_you_want_in_a_rust_docker_image/">What do you want in a Rust Docker
image?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s9y7o/less_is_more_lambda_the_ultimate/">A huge thread on lots of things
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1s8opt/sodium_oxide_fast_cryptographic_library_for_rust/">Rust bindings to
libsodium/NaCl</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/11/30/this-week-in-rust/"/>
    <updated>2013-11-30T15:56:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/11/30/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>, a weekly newsletter
summarizing Rust&rsquo;s progress and community activity. As always, if you have
something you&rsquo;d like to be featured, just <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">send me an
email</a>.</p>

<p>Last week was very slow, but this week more than makes up for it I think!
Static linking landed, and there&rsquo;s been some nice cleanup of error messages
and various APIs.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>59 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Names of methods creating iterators have <a href="https://github.com/mozilla/rust/pull/10622">changed
drastically</a> to remove the
<code>_iter</code> suffix. This reflects that iterators are a primary focus of APIs.
The PR description has all of the changes summarized.</li>
<li>We now have <a href="https://github.com/mozilla/rust/pull/10528">static linking
support</a>! It does, however,
involve some changes with how the <code>link</code> attribute works. The error messages
should guide you to the fixes.</li>
<li>In preparation for the placement new changes, the <code>Path</code> constructor has
been <a href="https://github.com/mozilla/rust/pull/10697">renamed from <code>new</code> to
<code>init</code></a>,.</li>
<li>Some overly-permissive borrow checking for <code>&amp;mut &amp;mut</code> <a href="https://github.com/mozilla/rust/pull/10519">has been
fixed</a>. This is fairly obscure,
most code shouldn&rsquo;t have hit it.</li>
<li>The parser is <a href="https://github.com/mozilla/rust/pull/10642">more strict</a>
about what it accepts as a doc comment. Now, only <code>///</code> and <code>/**</code>  are
counted as introducing doc comments (previously, <code>////</code> and <code>/***</code> would
also introduce a doc comment).</li>
<li><code>std::{uint, int}::{min, max}</code> <a href="https://github.com/mozilla/rust/pull/10719">have been
removed</a>. They were identical to
the functions in <code>std::cmp</code>, so use those instead.</li>
<li><code>extra::json</code> <a href="https://github.com/mozilla/rust/pull/10727">has been rid of @
boxes</a>, and now uses idiomatic
constructor names.</li>
<li>The <code>type_id</code> intrinsic <a href="https://github.com/mozilla/rust/pull/10722">now uses a language item as its return
value</a>.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/10662">cleanup</a> has been done to
<code>std::rt::thread</code>, which is an interface to native threads (rather than
tasks).</li>
<li><code>do</code> blocks are <a href="https://github.com/mozilla/rust/pull/10581">no longer
allowed</a> in non-<code>proc</code> contexts.
This means that <code>do</code> can not be used with a function whose last argument is
not a <code>proc</code>. A fairly large <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006999.html">thread on the mailing
list</a>
is ongoing about this change.</li>
<li><code>LittleLock</code> now <a href="https://github.com/mozilla/rust/pull/10660">uses RAII</a>.</li>
<li>C-like enums are <a href="https://github.com/mozilla/rust/pull/10652">now represented as an
integer</a> rather than a struct,
at the LLVM level. This affects ABI.</li>
<li>Linked failure <a href="https://github.com/mozilla/rust/pull/10603">has been
removed</a> from the runtime.</li>
<li><code>extra::term</code> <a href="https://github.com/mozilla/rust/pull/10637">no longer uses <code>@mut
Writer</code></a>, instead taking the
writer to use by value.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li><code>RefCell&lt;T&gt;</code>, previously known as <code>Mut&lt;T&gt;</code>, <a href="https://github.com/mozilla/rust/pull/10514">has finally
landed</a>, for all your dynamic
borrow checking needs.</li>
<li>A lint for unknown attributes <a href="https://github.com/mozilla/rust/pull/10316">has finally been
added</a>. The compiler will now
warn when it sees an attribute it doesn&rsquo;t recognize.</li>
<li>A lock-free <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.170.1097&amp;rep=rep1&amp;type=pdf">Chase-Lev
deque</a>
has <a href="https://github.com/mozilla/rust/pull/10678">been added to the runtime</a>.</li>
<li>The shootout-spectralnorm benchmark <a href="https://github.com/mozilla/rust/pull/10704">has been
resurrected</a>.</li>
<li>Unknown feature gates <a href="https://github.com/mozilla/rust/pull/10680">are now
linted</a>, rather than being a
hard failure.</li>
<li>The AST is <a href="https://github.com/mozilla/rust/pull/10693">now frozen</a>!</li>
<li><code>GenericPort</code> <a href="https://github.com/mozilla/rust/pull/10688">now has an
iterator</a> over the messages it
receives.</li>
<li><code>NodeId</code>, <code>CrateNum</code>, <code>Name</code>, and <code>Mrk</code> (types in libsyntax) <a href="https://github.com/mozilla/rust/pull/10670">have been
shrunk to 32 bits</a>.</li>
<li>The restriction on macros expanding to a single item <a href="https://github.com/mozilla/rust/pull/10649">has been
lifted</a>. This obviates the need
for macros hackily expanding to a module containing the desired items. Do
note that this only works when the macro is in &ldquo;item position&rdquo;, or where an
item is expected. There is an
<a href="https://github.com/mozilla/rust/issues/10681">issue</a> open for lifting this
restriction.</li>
<li>A <code>thread_local</code> attribute <a href="https://github.com/mozilla/rust/pull/10312">has been
added</a>, which exposes a
platform&rsquo;s native TLS, a la C11/C++11 <code>thread_local</code>.</li>
<li>Cross compilation to win64 (via mingw-w64) <a href="https://github.com/mozilla/rust/pull/10578">is now
supported</a>. There were also a
<a href="https://github.com/mozilla/rust/pull/10631">bunch of fixes</a> on real win64.</li>
<li>The parser gives a <a href="https://github.com/mozilla/rust/pull/10641">better error
message</a> when it encounters an
unclosed delimiter it didn&rsquo;t expect.</li>
<li>There is a <a href="https://github.com/mozilla/rust/pull/10475">better error
message</a> when a module name is
used as a type (the motivating example being <code>impl SomeTrait for some_module</code>).</li>
<li>JSON decoding <a href="https://github.com/mozilla/rust/pull/10625">now gives better
errors</a>.</li>
<li>Linker optimizations are <a href="https://github.com/mozilla/rust/pull/10620">now
used</a> on Linux.</li>
</ul>


<h2>New contributors</h2>

<p>Our first-time contributors this week are:</p>

<ul>
<li>Andreas Ots</li>
<li>Eric Biggers</li>
<li>Jannis Harder</li>
<li>Kiet Tran</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-11-26">weekly
meeting</a>
discussed bootstrap times, the <code>thread_local</code> PR, mutexes, and the GC. In
particular, it was decided that we should have nightlies.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This was a short week due to the US Thanksgiving holiday, but there were still
17 landed PRs this week.</p>

<h2>Notable additions</h2>

<ul>
<li>Hyunjune Kim and Sammy Kim landed some border style extensions in
<a href="http://github.com/mozilla/servo/pull/1322">#1276</a>.</li>
<li>Youngmin Yoo, Seonghyun Kim, and Jaemin Moon landed overflow:hidden in
<a href="http://github.com/mozilla/servo/pull/1298">#1298</a>.</li>
<li>Isabelle Carter landed changing the unrendered portion of content to use the
doc&rsquo;s background color in <a href="http://github.com/mozilla/servo/pull/1210">#1210</a>.</li>
<li>Patrick Walton has been experimenting with some very promising parallel
layout work, which he described in a
<a href="https://groups.google.com/forum/#!topic/mozilla.dev.servo/1nKmBvFewIs">message</a>
to the mailing list.</li>
</ul>


<h2>Meetings</h2>

<p>This week&rsquo;s <a href="https://github.com/mozilla/servo/wiki/Meeting-2013-11-25">meeting</a>
covered the poor situation with Nvidia support on Linux, fleshed out the string
interning plan during CSS selector parsing/matching, and went into some Servo
and Rust-related build issues.</p>

<h1>Announcements etc</h1>

<p>Do note that all the links are pulled directly from the
<a href="https://reddit.com/r/rust">subreddit</a>.</p>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1rf8rz/matrix_multiply_performance_in_rust/">Matrix Multiply Performance in Rust</a></li>
<li><a href="https://github.com/sebcrozet/nrays">nrays</a> &ndash; a 3d/4d raytracer</li>
<li><a href="https://air.mozilla.org/sprocketnes-practical-systems-programming-in-rust/">SprocketNES: Practical Systems Programming in
Rust</a>.
Contrary to the title, this is actually a recording of the presentations at
the Bay Area meetup.</li>
<li><a href="https://github.com/uutils/coreutils">uutils</a> &ndash; an attempt at writing
universal (as in cross-platform) CLI utils in Rust</li>
<li><a href="https://github.com/cmr/lets-build-a-compiler">lbac</a> &ndash; a Rust port of Jack
Crenshaw&rsquo;s &ldquo;Let&rsquo;s Build a Compiler&rdquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/11/23/this-week-in-rust/"/>
    <updated>2013-11-23T17:58:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/11/23/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>!</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>47 PRs were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Non-ASCII identifiers are <a href="https://github.com/mozilla/rust/pull/10605">feature
gated</a>, due to open questions
about how it should be done. They aren&rsquo;t being removed, just deferred to
post-1.0.</li>
<li>Some more closure reform has gone through. <code>~fn</code> has been removed, <a href="https://github.com/mozilla/rust/pull/10561">use
<code>proc</code> instead</a>. <code>&amp;fn</code> is <a href="https://github.com/mozilla/rust/pull/10568">also
short for this world</a>.</li>
<li><code>std::util::NonCopyable</code> had its dummy constructor
<a href="https://github.com/mozilla/rust/pull/10575">removed</a>.</li>
<li>All of the functions in rustrt <a href="https://github.com/mozilla/rust/pull/10440">have been prefixed with
<code>rust_</code></a>.</li>
<li>Items inside functions <a href="https://github.com/mozilla/rust/pull/10443">no longer accept privacy
modifiers</a>, since it is
meaningless.</li>
<li>Reachable <code>extern fn</code>s are <a href="https://github.com/mozilla/rust/pull/10539">no longer marked
internal</a>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>A <code>Gc&lt;T&gt;</code> stub <a href="https://github.com/mozilla/rust/pull/10576">has been added</a>.
New code should use this instead of <code>@T</code>.</li>
<li><code>..</code> is now <a href="https://github.com/mozilla/rust/pull/10366">the pattern to use</a>
when ignoring multiple elements in a pattern.</li>
<li>Stepping through <code>if</code> in a debugger <a href="https://github.com/mozilla/rust/pull/10552">should be much smoother
now</a>.</li>
<li><code>rustpkg -O</code> <a href="https://github.com/mozilla/rust/pull/10526">will now actually
optimize</a> the package it is
building.</li>
<li>Did you know we can make tags files for the Rust codebase? <code>make
TAGS.{vi,emacs}</code>! It no longer generates tags for <a href="https://github.com/mozilla/rust/pull/10508">all of LLVM and
libuv</a>, too.</li>
<li>The pidigits benchmark <a href="https://github.com/mozilla/rust/pull/10555">has been
resurrected</a>.</li>
<li>A native mutex type <a href="https://github.com/mozilla/rust/pull/10479">now
exists</a>, and it doesn&rsquo;t depend
on C++.</li>
<li>Some more derived methods are <a href="https://github.com/mozilla/rust/pull/10557">marked for
inlining</a>.</li>
<li>A bunch more <a href="https://github.com/mozilla/rust/pull/10495">native file IO</a>
was implemented, too.</li>
<li>We now have support for the <a href="https://github.com/mozilla/rust/pull/10527">win64 calling
convention</a>. Additionally, the
ABI of <code>extern fn</code>s is now actually used.</li>
<li>The tutorial <a href="https://github.com/mozilla/rust/pull/10589">now covers alternatives to
ownership</a> much better.</li>
<li>A lint for unsafe blocks <a href="https://github.com/mozilla/rust/pull/10599">has been
added</a>.</li>
<li>A minor bug with privacy <a href="https://github.com/mozilla/rust/pull/10583">has been
fixed</a>.</li>
</ul>


<h2>New Contributors</h2>

<p>Our first-time contributors this week are:</p>

<ul>
<li>Dave Hodder</li>
<li>Ian Daniher</li>
<li>Isaac Dupree</li>
<li>g3xzh</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-11-19">weekly
meeting</a>
discussed static linking, changing how <code>let _ = foo</code> is handled, task joining,
autoderef, and user-defined vector types.</p>

<h1>Announcements, etc</h1>

<ul>
<li>A <a href="http://adridu59.github.io/rust-tuts/">new
tutorial</a> project
has sprung up.</li>
</ul>


<h1>Servo</h1>

<p>Thanks to Lars Bergstrom for This Week in Servo! Servo is Rust&rsquo;s sister
project, and I think it&rsquo;s nice to be able to see a highlevel of its progress.
Maybe TWiS will graduate to a separate blog someday.</p>

<h2>This Week in Servo</h2>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language. Starting this week, TWiR will include a status
update from Servo.</p>

<p>There were 14 landed PRs this week.</p>

<h3>Notable additions</h3>

<ul>
<li>Patrick Walton rewrote flow construction so that we can make it incremental
and parallelizable in <a href="https://github.com/mozilla/servo/pull/1271">https://github.com/mozilla/servo/pull/1271</a></li>
<li>Ryan Choi added support for transparant PNG files in
<a href="https://github.com/mozilla/servo/pull/1288">https://github.com/mozilla/servo/pull/1288</a></li>
<li>Junyoung Cho added the ACID2 test file, which is one of the big focuses of
the team over the coming months, in
<a href="https://github.com/mozilla/servo/pull/1287">https://github.com/mozilla/servo/pull/1287</a></li>
<li>In his first Servo PR, Adenilson Cavalcanti contributed a help message for
the binary in <a href="https://github.com/mozilla/servo/pull/1277">https://github.com/mozilla/servo/pull/1277</a></li>
</ul>


<h3>Meetings</h3>

<p>Having spent the prior week at a workweek with Samsung in Korea (where there
were several presentations on both Rust and Servo!
<a href="https://github.com/mozilla/servo/wiki/Videos-and-presentations">https://github.com/mozilla/servo/wiki/Videos-and-presentations</a> ), the meeting
was pretty light this week. It mainly <a href="https://github.com/mozilla/servo/wiki/Meeting-2013-11-18">covered</a> getting more formal
tracking of the work required for ACID2 and prioritizing Windows support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/11/19/this-week-in-rust/"/>
    <updated>2013-11-19T01:42:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/11/19/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>46 PRs were merged this week.</p>

<h2>Breaking changes</h2>

<ul>
<li><code>std::rt::io</code> <a href="https://github.com/mozilla/rust/pull/10423">has moved on</a> to
become <code>std::io</code>. Yay!</li>
<li>The <code>#[fixed_stack_segment]</code> attribute <a href="https://github.com/mozilla/rust/pull/10407">has been
removed</a>.</li>
<li><code>as</code> casts to functions are <a href="https://github.com/mozilla/rust/pull/9788">no longer
allowed</a>.</li>
<li>The return value of the <code>io::process</code> is no longer an int, but <a href="https://github.com/mozilla/rust/pull/10109">an enum that
also represents termination by
signal</a>. It&rsquo;s also ostensibly
more portable: to check if a subprocess succeeded, just call <code>.success()</code> on
the return value.</li>
<li><code>std::cast::unsafe_copy</code> has <a href="https://github.com/mozilla/rust/pull/10497">has been
removed</a>. It is identical to
<code>std::ptr::read_ptr</code>.</li>
<li>Trailing <code>::</code> is <a href="https://github.com/mozilla/rust/pull/10420">no longer
allowed</a> in paths</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Vectors have <a href="https://github.com/mozilla/rust/pull/10417">more overflow
checking</a>. This was the cause
of a few mysterious segfaults.</li>
<li>Crate maps <a href="https://github.com/mozilla/rust/pull/10422">can now be generated for
libraries</a>, for when you want to
embed a Rust library in a non-Rust application.</li>
<li>Creation of buffered readers/writers <a href="https://github.com/mozilla/rust/pull/10424">has been optimized a
bit</a>.</li>
<li>If you use OS X, you&rsquo;ll be happy to see that the frivolous &ldquo;no debug symbols
in executable&rdquo; warning <a href="https://github.com/mozilla/rust/pull/10198">has been stomped
out</a>.</li>
<li>The missing-documentation lint is <a href="https://github.com/mozilla/rust/pull/10277">now more
accepting</a>, and won&rsquo;t warn about
private items.</li>
<li><code>BufWriter</code>, an implementation of Writer for already-existing buffers, <a href="https://github.com/mozilla/rust/pull/10451">is
now implemented</a>.</li>
<li>The native IO backend has seen <a href="https://github.com/mozilla/rust/pull/10457">a good
boost</a>; it will now be
seamlessly fallen back to when the libuv backend isn&rsquo;t available (you can
test this out by adding <code>#[no_uv];</code> to your crates).</li>
<li>A lint for numeric literals which overflow their type <a href="https://github.com/mozilla/rust/pull/10018">has been
implemented</a>.</li>
<li>A <code>Buffer</code> trait <a href="https://github.com/mozilla/rust/pull/10466">has been
added</a> to <code>std::io</code>, with
<code>read_line</code>, <code>read_until</code>, and <code>read_char</code>.</li>
<li>The error message when the trait&rsquo;s method declaration and the method
declaration in the implementation aren&rsquo;t the same <a href="https://github.com/mozilla/rust/pull/10509">now includes the trait
name</a>.</li>
<li>The libuv bindings were <a href="https://github.com/mozilla/rust/pull/10321">largely
rewritten</a> for performance, at
the sacrifice of some flexibility (which was of questionable value).</li>
<li><code>_</code>-prefixed variables <a href="https://github.com/mozilla/rust/pull/10518">no
longer</a> get an unused <code>mut</code>
warning.</li>
</ul>


<h2>New Contributors</h2>

<p>Our first-time contributors this week are:</p>

<ul>
<li>Jaemin Moon</li>
<li>Jay Anderson</li>
<li>Joe Schafer</li>
<li>Matthew Iselin</li>
<li>Zach Kamsler</li>
</ul>


<h1>Weekly Meeting</h1>

<p>There was no meeting this week, as a bunch of the core developers were in
South Korea for the Servo workweek with Samsung.</p>

<h2>Announcements etc</h2>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006686.html">(ML) Rethinking Linking in
Rust</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006550.html">(ML) The future of M:N
threading</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006714.html">(ML) Type system
thoughts</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006431.html">(ML)Changing
roles</a>,
Tim&rsquo;s &ldquo;going-away&rdquo; post. He did great work on rustpkg, and I hope he finds
time to continue to contribute to Rust.</li>
<li><a href="http://blog.theincredibleholk.org/blog/2013/11/18/booting-to-rust/">Booting to Rust (with
UEFI)</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/11/14/treating-vectors-like-any-other-container/">Treating Vectors Like Any Other
Container</a></li>
<li><a href="http://adrientetar.legtux.org/blog_fr.php?post=0">Moving forward with Rust
website</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[These Weeks in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/11/09/these-weeks-in-rust/"/>
    <updated>2013-11-09T05:21:00-05:00</updated>
    <id>http://cmr.github.io/blog/2013/11/09/these-weeks-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to a mega-<em>This Week in Rust</em>. I was swamped this past week with
schoolwork, so TWiR was put off. This week&rsquo;s combines the past two weeks of
progress. These past two weeks were fairly exciting in terms of language and
library progress. The next few weeks should be even more exciting.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>There were 108 PRs merged these past two weeks.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The very long-awaited <a href="https://github.com/mozilla/rust/pull/9613">enum discriminant size
patch</a> has landed. This will
affect FFI. Size of enum discriminant is now configurable via the <code>repr</code>
attribute, and will by default shrink to the smallest needed.</li>
<li>The extension traits for <code>Reader</code> and <code>Writer</code> have <a href="https://github.com/mozilla/rust/pull/10079">been transformed into
default methods on their respective
trait</a>.</li>
<li>Non-string literals are now
<a href="https://github.com/mozilla/rust/pull/10166">disallowed</a> in attributes.</li>
<li>Type parameters are now
<a href="https://github.com/mozilla/rust/pull/10189">forbidden</a> on inner statics
(statics inside functions).</li>
<li>The interface to flush stdout <a href="https://github.com/mozilla/rust/pull/10218">has
changed</a>. It was previously
unsound by allowing aliased <code>&amp;mut</code>.</li>
<li><code>Result</code>&rsquo;s API has changed <a href="https://github.com/mozilla/rust/pull/10119">quite a
bit</a>, to be more consistent with
<code>Option</code>, and hopefully simpler.</li>
<li>Linker arguments <a href="https://github.com/mozilla/rust/pull/10199">no longer</a>
propagate across crates. This means that if you link to a crate, its linker
arguments won&rsquo;t be automatically added when your crate is linked.</li>
<li>The memory intrinsics <a href="https://github.com/mozilla/rust/pull/10251">have been
simplified</a>. A single intrinsic
for <code>memcpy</code>/<code>memmove</code>/<code>memset</code> is now exposed, rather than one per
    platform.</li>
<li><code>#[link(name = "...")]</code> is now <a href="https://github.com/mozilla/rust/pull/10260">taken into
account</a> by rustc when creating
build artifacts.</li>
<li><code>std::rt::io::file</code> <a href="https://github.com/mozilla/rust/pull/10179">has been fleshed out and
tweaked</a>. In particular, it has
been renamed to <code>std::rt::io::fs</code>, many previously-free functions are now
associated functions on <code>std::rt::io::File</code>, and <code>FileInfo</code> has been renamed
to <code>FileStat</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Calling variadic functions with the C FFI <a href="https://github.com/mozilla/rust/pull/10064">is now
implemented</a>. This is a pretty
sweet change. The only thing missing in our C FFI now is unions.</li>
<li>We <a href="https://github.com/mozilla/rust/pull/10243">now have</a> octal numeric
literals, for all your esoteric numeric needs!</li>
<li>An <code>Any</code> type <a href="https://github.com/mozilla/rust/pull/9967">has been added</a>,
and it is now possible to retrieve the object a task failed with. Previously
tasks could only fail with a string, now they can fail with anything.</li>
<li>A <code>concat!</code> syntax extension <a href="https://github.com/mozilla/rust/pull/9740">has been
added</a> for compile-time string
concatenation.</li>
<li>Timers are <a href="https://github.com/mozilla/rust/pull/10083">now also ports</a>, and
the creator of a timer can cancel it.</li>
<li>As the first part of closure reform, <code>proc</code> is <a href="https://github.com/mozilla/rust/pull/10132">now sugar</a> for <code>~once
fn</code>, and <code>|A| -&gt; B</code> (and <code>fn(A) -&gt; B</code> for bare functions) <a href="https://github.com/mozilla/rust/pull/10187">are now
allowed</a> in types.</li>
<li>The section in the tutorial on vectors and strings <a href="https://github.com/mozilla/rust/pull/10354">has been
rewritten</a> for correctness with
modern Rust.</li>
<li>A bunch of C++ has been removed and rewritten. <a href="https://github.com/mozilla/rust/pull/10290">Thread
creation</a>, <a href="https://github.com/mozilla/rust/pull/10094">memory
regions</a> (used for debugging and
<code>@</code>-boxes, from what I can tell), and an <a href="https://github.com/mozilla/rust/pull/10163/files">unused
<code>array_list</code></a>.</li>
<li>Bounds check failures are <a href="https://github.com/mozilla/rust/pull/10113">now marked as a cold
path</a>, and a <code>cold</code> <a href="https://github.com/mozilla/rust/pull/10127">function
attribute</a> has been added.</li>
<li>The build system <a href="https://github.com/mozilla/rust/pull/10203">can cross-compile to iOS
now</a>, even though Rust doesn&rsquo;t
actually run on that platform (yet!).</li>
<li><code>std::rand</code> <a href="https://github.com/mozilla/rust/pull/10223">now implements the Gamma
distribution</a>.</li>
<li>Cross-crate destructor inlining <a href="https://github.com/mozilla/rust/pull/10242">now
works</a>.</li>
<li>A <code>type_id</code> intrinsic <a href="https://github.com/mozilla/rust/pull/10182">has been
added</a>.</li>
<li>Everything in the runtime that uses <code>libuv</code> has been <a href="https://github.com/mozilla/rust/pull/10058">split into its own
crate</a>. This means that the
runtime really is pluggable: you can implement your own event loop and so
forth.</li>
</ul>


<h2>New Contributors</h2>

<p>Welcome to our new contributors!</p>

<ul>
<li>Brian</li>
<li>Carol Willing</li>
<li>Dirkjan Bussink</li>
<li>Guillaume Pinot</li>
<li>Gyorgy Andrasek</li>
<li>Joshua Yanovski</li>
<li>Mat Carberry</li>
<li>Noufal Ibrahim</li>
<li>Robert Irelan</li>
<li>Tomas Sedovic</li>
<li>Jennifer Ward</li>
<li>Patrick Kim</li>
</ul>


<p>At .85 new contributors a day, we&rsquo;ll soon dwarf every other language in the
&ldquo;awesome volunteer&rdquo; category.</p>

<h1>Weekly Meetings</h1>

<p>Last week&rsquo;s
<a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-29">meeting</a>
discussed segmented stacks (spoiler: <a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006314.html">they&rsquo;re not coming
back</a> )
and placement new (we want it, how do we want it?).</p>

<p>This week&rsquo;s
<a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-11-05">meeting</a>
discussed the future of libextra, more stack things, octal literals, vector
representation, and temporary (&ldquo;rvalue&rdquo;) lifetimes.</p>

<h1>Announcements etc</h1>

<ul>
<li><strong>Reminder from <del>the Ministry of Truth</del> ChrisMorgan</strong>: Rust is awesome.</li>
<li>Rust SkÃ¥ne, <a href="http://www.foocafe.org/event/a-friendly-introduction-to-rust">has an event page
now</a>. It will
be December 3 at 17:30 in Foo Cafe.</li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/">Integermingled Parameter
Lists</a>,
and <a href="http://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/">take
2</a>.</li>
<li><a href="https://github.com/haxney/speculate">speculate</a> &ndash; a parallel speculative
execution library.</li>
<li><a href="https://github.com/luqmana/mcchat">mcchat</a> &ndash; a pure-Rust Minecraft chat
client.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More On Stack Safety]]></title>
    <link href="http://cmr.github.io/blog/2013/10/28/more-on-stack-safety/"/>
    <updated>2013-10-28T17:58:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/28/more-on-stack-safety</id>
    <content type="html"><![CDATA[<p>I got a lot of great feedback on my <a href="http://cmr.github.io/blog/2013/10/21/on-stack-safety/">previous
post</a>, and I&rsquo;ve done
some thinking and come up with what I think is a better proposal, and a solid
way forward.</p>

<!-- more -->


<ol>
<li>Teach the task API to allow spawning a task with a fixed stack size.</li>
<li>Add the ability to query stack size from LLVM. This lets us implement stack
guard zones precisely.</li>
<li>Add a way to use the result of #2 in a clean way. This is probably the
trickiest to get right.</li>
</ol>


<p>You&rsquo;ll note that this doesn&rsquo;t seem to support segmented stacks <em>or</em> omission
of stack safety! I&rsquo;m now of the opinion that segmented stacks have no future.
They currently only allow aborting on stack overflow, not unwinding, and their
only other benefit (the ability to &ldquo;grow&rdquo; the stack) is niche. If someone
really thinks growable stacks is desirable, and has valid, convincing
usecases, they should contact me by email or IRC.  Otherwise, the guarantees
they provide are the same as guard zones (abort on overflow).</p>

<p>Omission of stack safety seems missing. But, it isn&rsquo;t needed when using guard
zones! Since guard zones impose nothing on a function&rsquo;s generated code (ie,
there&rsquo;s no prelude that looks into TLS, no need for a <code>__morestack</code>), an
environment which can&rsquo;t provide guard zones simply does nothing special when
setting up a task&rsquo;s stack.</p>

<p>You&rsquo;ll also note that this ditches the static analysis I was so fond of. This
sort of analysis really belongs in a lint pass, rather than as a core part of
the safety feature. A crate can say <code>#[max_stack_size = "64K"];</code> or
<code>#[deny(unbounded_stack)]</code> if it wants static stack size checking (which
people
<a href="http://www.reddit.com/r/rust/comments/1owhwi/on_stack_safety/ccwke1l">seem</a>
<a href="http://www.reddit.com/r/rust/comments/1owhwi/on_stack_safety/ccwjhpn">to</a>
<a href="http://www.reddit.com/r/programming/comments/1owjmi/on_stack_safety_in_rust/ccwei0c">want</a>).</p>

<p>Requiring fixed-sized stacks seems like a step backwards, but I don&rsquo;t see a
better path forward. Solving this problem can be left to a less-rusty, perhaps
research, language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/10/28/this-week-in-rust/"/>
    <updated>2013-10-28T16:20:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/28/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust!</em> This week marks the addition
of some more feature gates, removal of <code>std::io</code>, and some feature proposals.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>47 PRs were merged this week, and we passed issue number 10000.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Most of the crypto in the stdlib <a href="https://github.com/mozilla/rust/pull/9744">has been
removed</a>.</li>
<li><code>std::io</code> <a href="https://github.com/mozilla/rust/pull/9901">has been removed</a>,
with corresponding improvements in <code>std::rt::io</code>.</li>
<li>The <code>frame_address</code> intrinsic <a href="https://github.com/mozilla/rust/pull/10040">has been
removed</a>.</li>
<li><code>@</code>-ptrs are <a href="https://github.com/mozilla/rust/pull/9923">now feature-gated</a>,
reflecting the fact that they will exist in a very different form once they
are finished.</li>
<li>All of the logging that used <code>fmt</code> (<code>debug!</code> and so forth) <a href="https://github.com/mozilla/rust/pull/10006">have been
transitioned to <code>format!</code></a>.</li>
<li><code>asm!</code> <a href="https://github.com/mozilla/rust/pull/10009">is also featured gated</a>.</li>
<li><code>sys::log_str</code> <a href="https://github.com/mozilla/rust/pull/9937">has moved</a>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>The long-awaited addition of <code>mut</code> in patterns <a href="https://github.com/mozilla/rust/pull/10026">has finally
happened</a>. <code>let (mut x, y) = (1,
2);</code> works.</li>
<li>The scheduler now uses <a href="https://github.com/mozilla/rust/pull/10080">lock free data
structures</a>, which are supposed
to perform much better.</li>
<li>The homing code <a href="https://github.com/mozilla/rust/pull/10070">now does less
work</a>, which does one third as
many <code>write</code>&rsquo;s.</li>
<li><code>stdout</code> <a href="https://github.com/mozilla/rust/pull/10060">is now buffered</a>.</li>
<li>A <a href="https://github.com/mozilla/rust/pull/10054">non-libuv event loop</a> has
been added.</li>
<li><code>std::rand</code> has seen <a href="https://github.com/mozilla/rust/pull/9810">more</a>
<a href="https://github.com/mozilla/rust/pull/10015">work</a>.</li>
<li><code>rustpkg</code> <a href="https://github.com/mozilla/rust/pull/9654">now supports arbitrary
dependencies</a>, such as C
libraries.</li>
<li><code>mut</code> is <a href="https://github.com/mozilla/rust/pull/9989">now allowed on self</a>.</li>
<li>Nested comments <a href="https://github.com/mozilla/rust/pull/9936">are now
allowed</a>.</li>
<li><code>rustpkg</code> will now [find crates in the current directory], so you can say
<code>rustpkg build</code> in a source dir and it will build in a workspace.</li>
<li>Some new float intrinsics <a href="https://github.com/mozilla/rust/pull/9986">have been
exposed</a>.</li>
<li><code>println!</code> <a href="https://github.com/mozilla/rust/pull/9979">allocates less</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Igor Bukanov</li>
<li>Mark Rowe</li>
<li>Michael Letterle</li>
<li>reedlepee</li>
</ul>


<h1>Announcements etc</h1>

<ul>
<li>There will be a
<a href="http://www.meetup.com/Rust-Bay-Area/events/143439552/">meetup</a> in the San
Fransisco Mozilla office. Patrick Walton will be talking about sprocketnes.
If you&rsquo;re in the area, you should definitely go!</li>
<li><a href="http://hiho.io/rust-ci/">rust-ci</a> has been created, which lets you have
travis automatically rebuild and test your repo daily, to reduce
language/library breakage.</li>
<li><a href="https://github.com/erickt/rust-mustache">rust-mustache</a> and
<a href="https://github.com/erickt/rust-zmq">rust-zmq</a> have been updated for master.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1pdrv6/short_talk_about_rust_at_scalaio_in_paris_october/">Short talk about Rust at Scala.IO in Paris (October
25th)</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1pe2lc/a_bit_of_functional_programming_in_rust_or_a/">A Bit of Functional Programming in Rust, or A Misguided First Look at Rust
for ML
    Programmers</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1p52tj/a_draft_proposal_for_single_inheritance_in_rust/">A draft proposal for single
inheritance</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1p4vnk/iterators_yielding_mutable_references/">Iterators yielding mutable
references</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1p4qeh/servo_transitions_from_libcss_to_a_new_css/">Servo transitions from libcss to a new CSS library written in
Rust</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1owhwi/on_stack_safety/">On stack
safety</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Stack Safety]]></title>
    <link href="http://cmr.github.io/blog/2013/10/21/on-stack-safety/"/>
    <updated>2013-10-21T00:42:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/21/on-stack-safety</id>
    <content type="html"><![CDATA[<p>Stack safety is a sticky topic in Rust right now. There are multiple
conflicting tensions. My goal is to lay them bare, untangle the mess, and see
if there&rsquo;s a better way forward (spoiler: there is!).</p>

<!-- more -->


<p>When a program is &ldquo;stack safe&rdquo;, the <a href="http://en.wikipedia.org/wiki/Call_stack#Structure">stack
pointer</a> never points
outside of allocated memory specifically dedicated to the stack. The
most interesting violation of stack safety as it applies to Rust is the <a href="http://en.wikipedia.org/wiki/Stack_overflow">stack
overflow</a>. (In fact, given
safe code, or even unsafe code as long as it doesn&rsquo;t putz with the stack
pointer or the stack frame, it is the <em>only</em> possible violation of stack
safety). Stack overflow happens when the stack does not have enough space to
store the full stack frame.</p>

<p>There are three basic ways of dealing with stack overflow:</p>

<ol>
<li>Give up and accept the potential memory unsafety and resulting bugs.</li>
<li>Do static analysis to determine the maximum stack size, and make sure
that the stack is at least that large.</li>
<li>Do runtime checks to make sure that there is always enough space on the
stack for a function to proceed, and handle violation of that condition
somehow.</li>
</ol>


<p>(<em>Note</em>: in what follows, I conflate &ldquo;language&rdquo; with &ldquo;implementation of a
given language&rdquo; for clarity)</p>

<p>Examples of languages that take strategy #1 are C, C++, Nimrod, and
Objective-C. Stack overflow usually manifests as a segmentation fault or bus
error, though more colorful errors are possible when a thread runs into
another thread&rsquo;s stack, or onto the heap, causing heap corruption or threads
stomping on each others&#8217; stack. Clearly this is not a viable solution for
Rust: the very act of calling a function becomes unsafe.</p>

<p>Strategy #2 is tempting, but cannot be used in the general case. The
<a href="http://dl.acm.org/citation.cfm?id=1113833&amp;bnc=1">research</a>
<a href="http://dl.acm.org/citation.cfm?id=1631721">I</a>
<a href="http://dl.acm.org/citation.cfm?doid=1375634.1375656">found</a> investigate stack
depth in the case of no recursion (so the call graph is actually a call
(directed-)acyclic graph) but with asynchronous interrupt handlers. Indeed, it&rsquo;s
trivial to show that when recursion is disallowed, a conservative stack limit
can be calculated just by taking the longest path through the call graph with
the nodes being weighted by the size that function&rsquo;s stack frame needs (this
is a slightly different construction than most weighted graphs). This solution
is not viable either: recursion is perfectly valid, rejecting it would make
Rust very crippled as a language. To my knowledge, no languages rely on this
for stack safety, though in practice I am sure many applications apply this
technique.</p>

<p>This leaves us with strategy #3, dynamic checks. Dynamic checking is fairly
easy to do. The size of a function&rsquo;s stack frame is easy to calculate. One
need only increment/decrement some global (or, rather, thread-local) counter
by the stack frame size. When it becomes negative, there is no more stack.
Almost every language I&rsquo;ve used (the exceptions are noted above) use this
technique. Java, Python, Lua, Ruby, Go, the list goes on. The only differences
between the languages is what they do when the stack does overflow. Most throw
an exception. Another method of implementing dynamic checks is to leave a
&ldquo;guard zone&rdquo; after the stack. This zone is mapped in a way that accessing it
causes a page fault, which sends a signal or kills the process. (The exact
implementation of this strategy differs; some allocate a stack frame for a
function on the heap. Things get blurry with the interpreted languages, but
they generally prevent stack overflow in a memory safe way.)</p>

<p>Rust currently uses strategy #3, with tweaks. The current implementation
heavily depends on LLVM&rsquo;s <a href="http://llvm.org/releases/3.0/docs/SegmentedStacks.html">segmented
stack</a> feature. On x86
(and I assume other platforms as well), a pointer to the end of the stack is
stored in thread-local storage. The prelude to every function call compares
that value to the value of the stack pointer, and calls a special function
<code>__morestack</code> which will allocate a new stack segment for the function call to
take place on. The stack segment is freed afterwards. The kink comes when
using the FFI to call C code. C assumes a single, large stack. In order to
fulfill that expectation, we have the <code>fixed_stack_segment</code> attribute to
give a function a large stack segment: hopefully large enough that the C
function doesn&rsquo;t overflow the stack.</p>

<p>Segmented stacks are of questionable utility. On large systems, such as x64,
address space is practically boundless, so lazily allocating stack segments is
going to be slower than just requesting a very large mmap&rsquo;d stack that the OS
will lazily allocate. On small, resource-constrained systems, the overhead of
stack size checking (it requires TLS <em>and</em> stack size checks) is too much.
Segmented stacks only optimize for mid-sized address spaces. And the entire
purpose of segmented stacks (conservative but growable stack sizes) is moot if
one is not using many tasks with small stacks.
(<a href="https://mail.mozilla.org/pipermail/rust-dev/2013-July/004686.html">Previously</a>,
<a href="https://github.com/mozilla/rust/issues/8345">previously</a>)</p>

<p>All of the solutions so far are inadequate. They&rsquo;re inflexible and have poor
composability in the case where a crate wants custom stack safety. I propose a
hybrid:</p>

<ol>
<li>If there is no recursion or other sources of stack size uncertainty, the
maximum stack size is decidable and is used as the only stack size, like
strategy #2. Every function would be annotated with the total stack size it
could possibly use, given static function calls. This fails at the first
introduction of function pointers: it is impossible to know how much stack
they need until runtime. However, this is not as limiting as it may sound,
as long as one only tries to achieve a conservative estimate of maximum
stack size. Since function pointers only come from trait objects and
closures, the compiler can take the max of the stack frame for <em>every
implemention</em> of the trait. I would assume closures could work in a similar
way, in limited cases. There will always be cases where this analysis
fails.</li>
<li>If the analysis in step 1 results in indeterminate stack sizes, rustc will
check a crate attribute. This crate attribute indicates which stack safety
strategy should be used: either guard zones, stack size checks, segmented
stacks, or no stack safety at all (note that stack size checks is segmented
stacks minus expanding the stack with <code>__morestack</code>).  Disabling stack
safety &ldquo;taints&rdquo; a crate, and any use of its functions requires <code>unsafe</code>,
like calling C code, and they cannot be coerced to closures (this would
lose the &ldquo;taint&rdquo; bit). Note that when the maximum stack size is decidable,
this attribute won&rsquo;t be checked.</li>
</ol>


<p>All of the trickiness comes from compiling libraries with this. Executables
are easy: since they define the execution context, they can decide how they
want the stack to be secured. Libraries, being embedded in other contexts,
need to obey their execution environment. At the very least, no-stack-safety
will make it possible to implement libraries exposing a native ABI in Rust
without requiring weirdness in the FFI, as well as implement custom stack
safety when it&rsquo;s desired.</p>

<p>By allowing crates to chose how they want stack safety to be implemented, we
retain flexibility to fit any situation. By making it a crate attribute, we
can handle combination of crates using different stack safety schemes in a
sane way. There are still some niggling details with combining crates using
different stack safety schemes (propagating the taint bit is quite difficult
in the face of trait objects, but for now we could simply disallow
combinations and work them out later (it&rsquo;s a backwards compatible change). I
think this is a good stack safety strategy, superior to the current one, and
worth implementing.</p>

<p>Please email me any comments, or see the <a href="http://www.reddit.com/r/rust/comments/1owhwi/on_stack_safety/">discussion on
reddit</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM ICPC: What I Learned]]></title>
    <link href="http://cmr.github.io/blog/2013/10/20/acm-icpc-what-i-learned/"/>
    <updated>2013-10-20T10:47:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/20/acm-icpc-what-i-learned</id>
    <content type="html"><![CDATA[<p>Yesterday I participated in my first <a href="http://icpc.baylor.edu/">programming
contest</a>. It was very fun, though challenging, and I
learned a fair bit during it. <!-- more --> The content consisted of teams of
3 working to solve 6 problems as fast as possible. The problems ranged from
trivial (repeated arithmetic) to moderately complex.</p>

<h2>Problem solving is fun.</h2>

<p>I already knew this, but it has been some time since I&rsquo;ve done intense
problem solving. It was nice to sit down for a few hours and bang my head
on a problem. Creative problem solving just <em>feels</em> good, in a way that most
activities don&rsquo;t.</p>

<h2>I don&rsquo;t know much about algorithms or data structures</h2>

<p>Of course I know the basic search and sorts, but anything involving
anything more complex than binary trees is beyond my current knowledge. A
few of the problems were solved very elegantly with tree operations. I was
unable to come up with a way to express the operation I wanted to perform.
It&rsquo;s a <a href="http://en.wikipedia.org/wiki/Longest_path_problem">standard problem</a>
which I had not been aware of.</p>

<p>Now that I <a href="http://en.wikipedia.org/wiki/There_are_known_knowns">know what I don&rsquo;t
know</a>, I can expand my
knowledge.</p>

<h2>C++&rsquo;s iostreams are quite nice</h2>

<p>Previously I haven&rsquo;t been a fan of iostreams, due to their misplaced
pedagogical use. But, for simply reading whitespace-separated data from stdin
and outputting the same to stdout, there probably isn&rsquo;t anything easier. I
might implement something similar (though not using the <code>&gt;&gt;</code> and <code>&lt;&lt;</code>
operators).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/10/19/this-week-in-rust/"/>
    <updated>2013-10-19T10:49:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/19/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>, a weekly summary of Rust&rsquo;s
progress and happenings in the community.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>48 PRs were merged this week.</p>

<h2>Breaking changes</h2>

<ul>
<li>Slices are now represented as <a href="https://github.com/mozilla/rust/pull/9885">number of elements, not number of
bytes</a>.</li>
<li><code>fmt!</code> has been <a href="https://github.com/mozilla/rust/pull/9919">completely
removed</a>.</li>
<li>Some fields in <code>std::comm</code> <a href="https://github.com/mozilla/rust/pull/9935">have been made
private</a>.</li>
<li><code>std::sys::refcount</code> <a href="https://github.com/mozilla/rust/pull/9922">has been
moved</a> to
<code>std::managed::refcount</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/9896/files#diff-69196c6d2488bf8d5b3471084e854407L22">A bunch of
functions</a>
have moved from <code>std::sys</code> to <code>std::mem</code>.</li>
<li><code>once fn</code> is <a href="https://github.com/mozilla/rust/pull/9863">now a feature gate</a>
rather than a <code>-Z</code> flag.</li>
<li><code>Path</code> has been <a href="https://github.com/mozilla/rust/pull/9655">completely
rewritten</a>.</li>
<li><code>extra::flatpipes</code> <a href="https://github.com/mozilla/rust/pull/9886">has been
removed</a>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li><code>jemalloc</code> has been <a href="https://github.com/mozilla/rust/pull/9933">removed from the
runtime</a>. The <a href="https://github.com/mozilla/rust/issues/9925">associated
issue</a> is quite scary.</li>
<li><code>rustdoc</code> <a href="https://github.com/mozilla/rust/pull/9946">struct field
visibility</a> is now corrected (it
stripped fields where it should not have).</li>
<li><code>rustdoc</code> also <a href="https://github.com/mozilla/rust/pull/9941">uses the actual privacy
rules</a> to strip methods.</li>
<li><code>format!</code> now gives <a href="https://github.com/mozilla/rust/pull/9932">much better</a>
error messages for invalid format strings.</li>
<li>The <code>fmt::Default</code> trait, used for default formatting with <code>format!</code>, is
<a href="https://github.com/mozilla/rust/pull/9938">now documented</a>.</li>
<li><code>include_bin!</code> has been optimized, and the <code>k-nucleotides</code> benchmark now
compiles <a href="https://github.com/mozilla/rust/pull/9851">187x faster</a>.</li>
<li>Vectors now have <a href="https://github.com/mozilla/rust/pull/9907"><code>starts_with</code> and <code>ends_with</code>
methods</a>, which take slices.</li>
<li>An <code>abort</code> intrinsic <a href="https://github.com/mozilla/rust/pull/9860">has been
added</a>.</li>
<li>Vectors now have a <a href="https://github.com/mozilla/rust/pull/9608"><code>get_opt</code>
method</a>.</li>
</ul>


<h2>New contributors</h2>

<p>A new section for new contributors! The new contributors this week are (as
reported by git):</p>

<ul>
<li>Chris Sainty</li>
<li>Eduard Burtescu</li>
<li>Erik Lyon</li>
<li>Harry Marr</li>
<li>SÃ©bastien Chauvel</li>
<li>Vijay Korapaty</li>
<li>Ziad Hatahet</li>
<li>chitra</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-15">weekly
meeting</a>
discussed removing rusti, changing the attribute syntax, destructors in
statics, and more multi-crate packages with rustpkg.</p>

<h1>Announcements etc</h1>

<ul>
<li>Rust (and Servo) are participating in the <a href="https://groups.google.com/forum/#!topic/mozilla.dev.servo/7kX_E0FlfkA">GNOME Outreach Program for
Women</a>.
A bunch of people have already come into IRC about it.</li>
<li><a href="http://exercism.io">http://exercism.io</a> <a href="https://github.com/kytrinyx/exercism.io/pull/866">is getting full Rust
support</a>. This is a very
cool resource, and could help a lot getting newcomers acclimated.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-October/006034.html">Unified Function/method Call Syntax and further
simplification</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1osbq2/safe_manual_memory_management_in_cyclone_research/">Safe Memory Management in
Cyclone</a>.</li>
<li><a href="http://opensourcebridge.org/sessions/970">Audio</a> from Tim&rsquo;s talk in June is
finally available!</li>
<li>An
<a href="https://github.com/mozilla/rust/wiki/Operating-system-development">OSdev</a>
community has sprung up! The channel is <code>#rust-osdev</code>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1omw47/should_io_use_conditions/">Should I/O use
conditions?</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1opo36/pointers_in_rust_a_guide/">Pointers in Rust: A
Guide</a>.</li>
<li>I am on a <a href="http://cmr.github.io/blog/2013/10/14/rust-hiatus/">Rust hiatus</a>,
for the time being. TWiR will still be happening, as you are reading it
right now.</li>
<li><a href="https://github.com/thestinger/rust-core">rust-core</a> &ndash; A stub standard
library.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust Hiatus]]></title>
    <link href="http://cmr.github.io/blog/2013/10/14/rust-hiatus/"/>
    <updated>2013-10-14T04:05:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/14/rust-hiatus</id>
    <content type="html"><![CDATA[<p>I&rsquo;m taking a temporary hiatus from all Rust work, to focus on academics. This
includes IRC and <a href="http://docs.octayn.net">http://docs.octayn.net</a>. I will continue to publish This
Week in Rust. If you need to contact me for any reason, please
<a href="send%20me%20an%20email">mailto:corey@octayn.net</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/10/12/this-week-in-rust/"/>
    <updated>2013-10-12T22:53:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/12/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>. This week introduces raw
string literals, the removal of the <code>rust</code> tool, feature gating, and the
privacy overhaul.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>Only 51 PRs were merged this week, though the ones that were were fairly
large.</p>

<h2>Breaking changes</h2>

<ul>
<li>Visibility and privacy have been defined, and the new semantics are slightly
incompatible with the old. The details are
<a href="https://github.com/mozilla/rust/pull/9735">here</a>.</li>
<li>Feature gating has been <a href="https://github.com/mozilla/rust/pull/9703">added to the
compiler</a>. This allows us to
mask language features that we don&rsquo;t want to commit to for 1.0. The compiler
will tell you when you are using an &ldquo;experimental&rdquo; feature. The current
experimentals are glob imports, macro definitions, and struct-like variants
in enums. This is an important step forward for 1.0 which,
<a href="http://www.reddit.com/r/rust/comments/1o90f9/fn_types_in_rust_take_3/ccq8qev">apparently</a>,
is right around the corner.</li>
<li>The <code>rust</code> tool <a href="https://github.com/mozilla/rust/pull/9785">has been
removed</a>.</li>
<li><code>Option</code>&rsquo;s API has been <a href="https://github.com/mozilla/rust/pull/9359">massively
simplified</a>, and changed to be
composable.</li>
<li>Strings are <a href="https://github.com/mozilla/rust/pull/9750">no longer allowed to be modified in safe
code</a>. Things like <code>let s =
~"abcdefg"; s[4] = 0x99;</code> are now rejected. This is because it allows one to
create invalid (non-UTF8) string values.</li>
<li><code>extra::rc</code> has <a href="https://github.com/mozilla/rust/pull/9794">graduated to
<code>std::rc</code></a>.</li>
<li><code>extra::tempfile::mkdtemp</code> <a href="https://github.com/mozilla/rust/pull/9802">has been replaced with an RAII
wrapper</a>.</li>
<li><code>std::rand</code> <a href="https://github.com/mozilla/rust/pull/9695">has been improved</a>,
but changes the public API of Rng a bit.</li>
<li><code>IntConvertible</code> has been removed in favor of <a href="https://github.com/mozilla/rust/pull/9250"><code>ToPrimitive</code> and
<code>FromPrimitive</code></a>, which can be
derived for enums, making interacting with C APIs substantially more
<a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/9674">Raw strings</a> are now supported.
The basic syntax is <code>r"Foo"</code>, but also <code>r###"Foo"###</code>, for arbitrary
nesting of raw strings.</li>
<li>rustpkg&rsquo;s remote fetching <a href="https://github.com/mozilla/rust/pull/9741">is
fixed</a>, but <a href="https://github.com/mozilla/rust/issues/9482">other
</a>
<a href="https://github.com/mozilla/rust/issues/9781">problems</a> prevent it from
being fully usable right now.</li>
<li>debuginfo namespace handling <a href="https://github.com/mozilla/rust/pull/9658">has been
unified</a>, and marks the ability
to build all of Rust (libstd, libextra, compiler and tools) with debuginfo,
which is very awesome.</li>
<li>Small structs <a href="https://github.com/mozilla/rust/pull/9759">are immediate</a>.</li>
<li>When there are unbalanced delimiters, <a href="https://github.com/mozilla/rust/pull/9756">the opening delimiters leading up to
it</a> are printed, avoiding the
&ldquo;Expected a }, saw EOF at line 9001&rdquo; problem.</li>
<li>libuv and jemalloc are only <a href="https://github.com/mozilla/rust/pull/9772">built once, rather than once per
stage</a>.</li>
<li>Macros <a href="https://github.com/mozilla/rust/pull/9753">now take attributes</a> and,
in turn, can be documented.</li>
<li>In the opposite direction, <a href="https://github.com/mozilla/rust/pull/9783">macros can now expand to items with
attributes</a>.</li>
<li>There were some <a href="https://github.com/mozilla/rust/pull/9664">minor logging
changes</a>, the biggest result of
which is that inlined functions won&rsquo;t be logged by the modules they&rsquo;re
inlined into.</li>
<li><a href="https://github.com/mozilla/rust/pull/9749"><code>std::rt::io::native</code> has been
implemented</a>. The idea of this is
to live in <code>std::io::native</code> and to use the OS&rsquo;s native APIs rather than
libuv, and also to not require the scheduler or any other runtime support.</li>
<li>rustpkg <a href="https://github.com/mozilla/rust/pull/9732">marks checked out repos as
read-only</a>, to prevent
modifications.</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-08">weekly
meeting</a>
discussed some administrative things, the removal of crypto code, the removal
of the <code>rust</code> tool, and functions.</p>

<h1>Announcements etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1o35ns/fuse_userspace_library_in_rust/">rust-fuse</a>
- a FUSE userspace library in Rust. This is pure Rust, not using libfuse.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1o46cv/ears_a_simple_library_for_playing_sounds/">ears</a>
- a simple library for playing sounds.</li>
<li><a href="https://github.com/pcmattman/rustic">rustic</a> &ndash; another operating system
project.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-October/005981.html">Refactoring the milestones on the issue
tracker</a>.</li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/10/10/fn-types-in-rust/">Fn Types in Rust, Take
3</a>
- another attempt at tackling the problems with closures.</li>
<li>mcpherrin in <code>#rust</code> says &ldquo;Hello, everyone!&rdquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The State of Rust 0.8]]></title>
    <link href="http://cmr.github.io/blog/2013/10/06/the-state-of-rust-0-dot-8/"/>
    <updated>2013-10-06T20:32:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/06/the-state-of-rust-0-dot-8</id>
    <content type="html"><![CDATA[<p>Another 3 months, another release. This is the first release that I&rsquo;ve
witnessed in its entirety! This is a summary of Rust: its compiler,
libraries, documentation, and community. (<a href="http://rust-lang.org">What is
Rust?</a>)</p>

<!-- more -->


<h1>Compiler</h1>

<p>The compiler is faring well. It received a lot of attention in compile speed,
although memory usage regressed significantly. It is now mostly fixed in
master. Time compiling <code>fn main() { }</code> went from 172ms to 112ms on my box.
When compiling programs of any significance, the gap is much larger. There&rsquo;s
also been some thought put into parallelizing rustc. Michael Woerister&rsquo;s GSoC
project was debuginfo, and it&rsquo;s almost in a fully-working state. As of 0.8,
it&rsquo;s not completely baked &mdash; libstd can&rsquo;t be compiled with it, and stepping
through code isn&rsquo;t perfect &mdash; but it&rsquo;s a huge step forward, and he created an
extensive testsuite, so it shouldn&rsquo;t regress. The pretty printer hasn&rsquo;t seen
much improvement. Default methods, one of the major things Michael Sullivan
worked on over the summer, are in a much better state. If there are any
remaining bugs in them, I haven&rsquo;t seen them.</p>

<h1>Iterators</h1>

<p>Iterators are hugely improved for 0.8. The <code>for</code> loop syntax now uses the
Iterator trait. Additionally, most uses of vector iterators now compile to the
exact same code that indexing or iteration would in C or C++, including the
ability to be vectorized. Additionally, they now use default methods instead
of extension implementations. A bunch of other extensions to Iterator were
added, such as DoubleEndedIterator and RandomAccessIterator.</p>

<h1>Documentation</h1>

<p>The documentation is in a much better state than it was 3 months ago. The new
rustdoc was started and finished. I started it, and Alex Crichton really
polished and finished it the last two weeks before the release. The API
documentation is now navigable, and one can actually see the relationship
between various types. A bunch of work also went into the tutorials, yielding
three new documents: error handling and conditions, iterators and containers,
and rustpkg.</p>

<h1><code>rustpkg</code></h1>

<p>Rustpkg continues to advance. Tim put out the call for community involvement,
and it&rsquo;s getting significant traction in actual libraries. There are still a
few kinks when using it for development, but when just fetching and building
dependencies, it works very well. Servo is porting its whole mini-ecosystem
over to rustpkg, uncovering bunches of problems and deficiencies in the
process. If you&rsquo;re interested in helping out with Rust, rustpkg is a major
area. Tim is also super nice, and will happily help you get into the codebase.</p>

<h1>Libraries</h1>

<p>Rust is slowly accreting more and more useful libraries: mostly coming from
the gamedev community, but sometimes other useful things as well. The
new runtime has completely replaced the old, a significant step forward for
Rust&rsquo;s maturity. <code>rust-http</code> is making some really nice strides, as well as
the opengl bindings. The standard libraries are becoming nicer to use.
<code>std::run</code>, in particular, stands out to me as something that&rsquo;s quite easy to
use, and <code>std::str</code> saw a lot of work making it more correct.</p>

<h1>The Future</h1>

<p>This was a great release cycle, and I think the next one will be even better.
Alex Crichton was hired as a full-time Rust developer, and he has been doing a
lot of important work that just would have taken a while to happen otherwise.
I&rsquo;m very optimistic about this release, much more so than 0.7. I think we
might be able to hit milestone 1 for 0.9 or 0.10, though that&rsquo;s just
speculation on my part.</p>

<h1>Is Rust Ready?</h1>

<p>No. Rust is approaching maturity, but it isn&rsquo;t there yet. There are still
backwards-incompatible changes being made to try and get to milestone 2.  The
major things that come to mind are closure reform and privacy overhaul (which
is being worked on in master <a href="https://github.com/mozilla/rust/pull/9735">right
now</a>). Additionally, people in the
gamedev community are starting to <a href="http://www.reddit.com/r/rust/comments/1nxs1h/the_state_of_rust_08/ccnb8ya">hit walls with the type
system</a>.
Those probably won&rsquo;t be fixed in the time leading up to 1.0, but this is also
speculation.</p>

<p>Experimenting with Rust is becoming more viable as time goes on, but using it
in production is a bad idea, especially if &ldquo;low maintenance&rdquo; is at all
valuable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/10/06/this-week-in-rust/"/>
    <updated>2013-10-06T18:25:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/06/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>Only 63 PRs were merged this week. Currently in the queue is the massive
privacy change, the path rewrite, enum descriminant shrinking, a <code>rand</code>
rework, a lock-free scheduler message queue, and libuv signal bindings.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>float</code> has been <a href="https://github.com/mozilla/rust/pull/9519">removed from the
language</a>.</li>
<li><code>loop</code> has been <a href="https://github.com/mozilla/rust/pull/9665">removed</a>. The
transition to <code>continue</code> is complete.</li>
<li>A macro ignoring tokens now <a href="https://github.com/mozilla/rust/pull/9673">throws an
error</a> rather than silently
ignoring it.</li>
<li><code>IntConvertible</code> has been
<a href="https://github.com/mozilla/rust/pull/9250">replaced</a> with <code>ToPrimitive</code> and
<code>FromPrimitive</code>. This also heralds the ability to derive to/from int methods
on enums.</li>
</ul>


<h2>Everything Else</h2>

<ul>
<li><code>rustpkg</code> can <a href="https://github.com/mozilla/rust/pull/9741">fetch remote packages
again</a>.</li>
<li>A bunch of unsafe code surrounding logging <a href="https://github.com/mozilla/rust/pull/9593">has been
remove</a>.</li>
<li>A bunch of work was done to make more things immediate. A
<a href="https://github.com/mozilla/rust/pull/9643">bugfix</a>, <a href="https://github.com/mozilla/rust/pull/9656">small
tuples</a>, <a href="https://github.com/mozilla/rust/pull/9677">small
enums</a>, and <a href="https://github.com/mozilla/rust/pull/9699">unit/C-like
enums</a>.</li>
<li>A bunch of work went into decreasing our memory usage. The massive spike at
the beginning <a href="https://github.com/mozilla/rust/pull/9612">has been fixed</a>.
The tcx (type context, holds the result of <em>all</em> compiler analysis) is also
free&rsquo;d before translation now, reducing memory usage by a good <a href="https://github.com/mozilla/rust/pull/9686">500+
MB</a>. Another cache during
constant evaluation <a href="https://github.com/mozilla/rust/pull/9722">reduces memory usage by
200MB</a>.</li>
<li>We&rsquo;re now <a href="https://github.com/mozilla/rust/pull/9662">bundling our
dependencies</a> on Windows, making
it easier to bootstrap and to setup a working Rust environment.</li>
<li>All of the really old obsolete syntax checkers <a href="https://github.com/mozilla/rust/pull/9712">have been
removed</a>.</li>
<li>Hyperlinking between crates is <a href="https://github.com/mozilla/rust/pull/9691">now
reimplemented</a> in rustdoc.</li>
<li>Gearing up for its removal, <a href="https://github.com/mozilla/rust/pull/9599">all <code>fmt!</code> usage in the compiler has been
removed</a>.</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-01">weekly
meeting</a>
discussed a bunch of proposed changes, including rustpkg submodules, removing
float (which has already happened), raw string literals (which have a patch
almost finished), and the changes to the Option API.</p>

<h1>Announcements</h1>

<ul>
<li><a href="https://github.com/jeaye/ncurses-rs">ncurses-rs</a> &ndash; a safe wrapper that
keeps the same ncurses interface you know and &ldquo;love&rdquo;, but more rustic.</li>
<li><a href="https://github.com/mozilla/rust/wiki/The%20Rusticon">The Rusticon</a> &ndash; A
living glossary of Rust terms.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1nqzth/zeromq_helping_us_block_malicious_domains_in_real/">A production use of
Rust!</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ntnvf/understanding_the_servo_strategy/">Understanding the Servo
Strategy</a>
- The Servo presentation given at the various Mozilla Summits</li>
<li><a href="http://www.reddit.com/r/rust/comments/1nmarr/dynamic_typing_implemented_as_library_code/">Dynamic Typing implemented as a
library</a>
- a pretty cool use of our reflection.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1ni84a/running_rust_tests_on_travis_ci/">Running Rust Tests on Travis
CI</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1ngqgr/rust_bindings_for_fuse_filesystem_in_userspace/">Rust bindings for
FUSE</a></li>
</ul>


<h1>Meetups</h1>

<p>Haven&rsquo;t had a meetup section in a long time, but two are forming!</p>

<ul>
<li><a href="http://www.meetup.com/Rust-Bay-Area/">Francisco Bay Area</a></li>
<li><a href="http://www.meetup.com/rust-skane/">Rust SkÃ¥ne (Lund, Sweden)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/09/30/this-week-in-rust/"/>
    <updated>2013-09-30T13:11:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/09/30/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>! This week saw the release of
0.8, the removal of <code>@fn</code>, and a bunch of other changes. The tutorial has been
updated significantly, surrounding pointers and boxes, so you should re-read
those sections if you&rsquo;re still feeling shaky on when you should use which.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>There were 79 PRs merged this week.</p>

<h2>Breaking changes</h2>

<ul>
<li><code>printf!</code> and <code>printfln!</code> have been
<a href="https://github.com/mozilla/rust/pull/9550">removed</a>.</li>
<li><code>continue</code> is now a keyword, a <a href="https://github.com/mozilla/rust/pull/9504">synonym for
<code>loop</code></a>, preceeding <code>loop</code>&rsquo;s
removal (<a href="https://github.com/mozilla/rust/issues/9467">https://github.com/mozilla/rust/issues/9467</a>)</li>
<li>Item visibility is <a href="https://github.com/mozilla/rust/pull/9432">properly encoded in
metadata</a>, so code which used
private items that may have worked before is now rejected.</li>
<li>Char literals which should have been escaped <a href="https://github.com/mozilla/rust/pull/9335">are now rejected when they
aren&rsquo;t escaped</a>.</li>
<li><code>impl Foo for T;</code> is now <a href="https://github.com/mozilla/rust/pull/9336">disallowed</a>.
Use <code>impl Foo for T {}</code>.</li>
<li><code>@fn</code> has been <a href="https://github.com/mozilla/rust/pull/9310">removed from the
language</a>. Replace it with
<code>@Trait</code> objects, if you really need <code>@fn</code> (you probably don&rsquo;t).</li>
<li><code>start</code> <a href="https://github.com/mozilla/rust/pull/9301">no longer takes a crate
map</a>.</li>
<li>Some more keywords have been
<a href="https://github.com/mozilla/rust/pull/9389">reserved</a>: <code>alignof</code>,
<code>offsetof</code>, and <code>sizeof</code>.</li>
</ul>


<h2>Everything else</h2>

<ul>
<li>A ton of documentation work was put in this week. The box section of the
tutorial has been <a href="https://github.com/mozilla/rust/pull/9589">rewritten</a>,
and there&rsquo;s a new <a href="https://github.com/mozilla/rust/pull/9439">rustpkg
tutorial</a> too. The module
tutorial saw the file section
<a href="https://github.com/mozilla/rust/pull/9398">extended</a>. There was a bunch of
module documentation updated/added too.</li>
<li>rustdoc(_ng) also saw a lot of work. It <a href="https://github.com/mozilla/rust/pull/9402">completely
replaced</a> the old rustdoc, as
well as seeing a <a href="https://github.com/mozilla/rust/pull/9577">lot</a> of
<a href="https://github.com/mozilla/rust/pull/9475">fixes</a>. Huge thanks to Alex
Crichton for all the work with it!</li>
<li><code>std::vec</code> has seen some <a href="https://github.com/mozilla/rust/pull/9583">nice
changes</a> to <code>connect_vec</code> and
<code>concat_vec</code> (they were really awful before).</li>
<li><code>rustpkg test</code> is <a href="https://github.com/mozilla/rust/pull/9549">implemented</a>.</li>
<li><code>type_use</code> has been <a href="https://github.com/mozilla/rust/pull/9538">removed</a>.
This did some nasty things and LLVM&rsquo;s <code>mergefunc</code> pass will do a better job
of the same optimization (once it&rsquo;s enabled).</li>
<li><code>with_c_str</code> is now <a href="https://github.com/mozilla/rust/pull/9352">optimized</a>
to be allocation-free for short vectors.</li>
<li>The logging system, when using the new formatting code (so <code>debug2</code> etc) is
<a href="https://github.com/mozilla/rust/pull/9261">allocation-free</a>.</li>
<li><code>std::rand</code> has seen some
<a href="https://github.com/mozilla/rust/pull/9362">cleanup</a>, in preparation for its
overhaul.</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-09-24">weekly
meeting</a>
discussed a bunch of things, the main things of importance to me being:</p>

<ul>
<li><code>loop</code> &ndash;> <code>continue</code></li>
<li>Allowing nested comments</li>
</ul>


<h1>Announcements</h1>

<ul>
<li><a href="https://github.com/kenz-gelsoft/wxRust">wxRust</a> &ndash; A binding to the
wxWidgets toolkit.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1neu74/the_start_of_a_sinatra_clone/">widmann</a>
-  A Sinatra clone</li>
<li><a href="http://www.reddit.com/r/rust/comments/1nab2s/rustdev_opengl_glrs_updated_with_command_line/">gl-rs</a>
has been updated to generate only bindings for a select version / set of
extensions.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1n8y5b/debugging_rust_in_eclipse/">Debugging Rust in
Eclipse</a>
- Michael Woerister&rsquo;s final GSoC post. He did really great work this
summer!</li>
<li><a href="https://github.com/steveklabnik/rust_for_rubyists">Rust for Rubyists</a> has
been open sourced!</li>
<li>The <a href="https://code.google.com/p/claymore-game/">Claymore</a> project has just
come to my attention. Apparently it has been going on for quite some time.
There are some screenshots at <a href="http://claymore-dev.blogspot.com/">http://claymore-dev.blogspot.com/</a>.</li>
<li><a href="https://github.com/JeremyLetang/rustenstein3D/">rustenstein3d</a> &ndash; a
Wolfenstein3D engine</li>
<li><a href="https://github.com/eevee/clio">clio</a>, a roguelike. This one also slipped
under my radar for a while.</li>
<li><a href="https://github.com/thestinger/rust-gmp">rust-gmp</a> has been updated for
0.8/master.</li>
<li><a href="https://github.com/cmr/rustdoc_ng">rustdoc_ng</a>, being merged into mainline,
has concluded as a project.</li>
<li>And, of course, the <a href="http://www.reddit.com/r/rust/comments/1n7q8v/08_released/">0.8
release</a>
discussion on reddit.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/09/23/this-week-in-rust/"/>
    <updated>2013-09-23T13:08:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/09/23/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>. We&rsquo;re gearing up for a 0.8
release, tentatively planned for Thursday. Additionally, a huge welcome of
Alex Crichton to the Rust team! He&rsquo;s been doing some great work, it&rsquo;s
wonderful to have another full-time Rust dev.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>There were 86 PRs merged this week.</p>

<h2>rustdoc_ng</h2>

<p>rustdoc_ng was merged into mainline and enabled as the new rustdoc, in time
for 0.8. This makes me incredibly happy, as it marks the conclusion of my
quest to a better rustdoc. Not to say that rustdoc is finished or perfect,
but it&rsquo;s already much better than the old rustdoc. My sincere thanks go to
Jordi Boggiano (Seldaek), who worked unceasingly to create a beautiful,
usable frontend, and to Meret Vollenweider (meretv) for donating her amazing
design skills. Also thanks to Huon Wilson (dbaupp) for moral support and
creating the awesome DocFolder interface that passes over the documentation
use. And, of course, to Alex Crichton, who pushed these past few days to port
the static site generator to Rust and to integrate it into the build system.</p>

<p>The new docs have replaced the old docs. You can view them <a href="http://static.rust-lang.org/doc/master/std/index.html">on the Rust
website</a>. Still to-do
is proper cross-crate doc hyperlinking. To run it on your own crate, build a
recent Rust and do <code>rustdoc html path/to/your/crate.rs</code>. It will eventually be
integrated into <code>rustpkg</code>.</p>

<h2>Breaking changes</h2>

<ul>
<li><code>extra::par</code> has been <a href="https://github.com/mozilla/rust/pull/9380">removed</a>.</li>
<li>Some unsound functional struct updates (FSU, <code>{a: 5, ..b}</code>) <a href="https://github.com/mozilla/rust/pull/9350">are now
disallowed</a>.</li>
<li><code>--cfg debug</code> is no longer required. If you want to disable debug logging,
use <a href="https://github.com/mozilla/rust/pull/9278"><code>--cfg ndebug</code></a>.</li>
<li>The various uses of <code>NaN</code> are now <a href="https://github.com/mozilla/rust/pull/9321">lowercased to
<code>nan</code></a>.</li>
<li><code>std::util::unreachable</code> has been removed in factor of the
<a href="https://github.com/mozilla/rust/pull/9320"><code>unreachable!</code></a> macro.</li>
<li><code>extra::future</code> has been <a href="https://github.com/mozilla/rust/pull/9285">cleaned
up</a> a bit, including some method
shuffling/renames.</li>
<li><code>extra::getopts</code> has been <a href="https://github.com/mozilla/rust/pull/9267">cleaned
up</a> as well, with most free
functions now being methods.</li>
<li>The <code>from_str</code> methods in the numeric modules have been
<a href="https://github.com/mozilla/rust/pull/9275">removed</a> in favor of the FromStr
trait and the <code>from_str</code> free function in the prelude. Same for
<a href="https://github.com/mozilla/rust/pull/9209"><code>from_str_radix</code></a>.</li>
<li>The <code>Drop</code> trait now uses <a href="https://github.com/mozilla/rust/pull/9244"><code>&amp;mut
self</code></a>, as part of the transition
to by-value drops.</li>
<li><code>extra::json</code> uses a <a href="https://github.com/mozilla/rust/pull/9231">different
encoding</a> when encoding/decoding
enums, so any Rust-generated JSON before this patch will now be rejected by
the decoder.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>debuginfo now works for <a href="https://github.com/mozilla/rust/pull/9168">recursive
types</a>.</li>
<li>You can now <a href="https://github.com/mozilla/rust/pull/9213">pass parameters</a> to
the generated test with <code>rust test</code>.</li>
<li><code>extern fn</code>s from external crates now use the <a href="https://github.com/mozilla/rust/pull/9196">declared
ABI</a>, rather than assuming cdecl.</li>
<li><code>CString</code> has gained an
<a href="https://github.com/mozilla/rust/pull/9220"><code>as_str</code></a> method.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/9108">overflow bugs</a> in <code>vec</code> and
<code>str</code> have been fixed.</li>
<li><code>statics</code> are now <a href="https://github.com/mozilla/rust/pull/9130">properly
inlined</a> cross-crate.</li>
<li>The <code>bytes!</code> macro&rsquo;s error reporting has been <a href="https://github.com/mozilla/rust/pull/9245">tightened
up</a> to make it more obvious where
the error is.</li>
<li><code>rustpkg init</code> <a href="https://github.com/mozilla/rust/pull/9236">has been added</a>,
to create a new workspace.</li>
<li>File IO in newrt has been <a href="https://github.com/mozilla/rust/pull/9235">massively
reworked</a> and is much more
complete than the oldrt.</li>
<li>The exact meaning of &ldquo;unsafety&rdquo; <a href="https://github.com/mozilla/rust/pull/9258">is now
documented</a>.</li>
<li><code>\0</code> escapes in strings <a href="https://github.com/mozilla/rust/pull/9248">is now
supported</a>.</li>
<li><code>rustpkg</code> now thinks in terms of crates, not packages, to you can now have
<a href="https://github.com/mozilla/rust/pull/9263">multiple crates in a single
package</a> and have things work
correctly.</li>
<li>newrt has <a href="https://github.com/mozilla/rust/pull/9260/files">pipes and process
support</a> now.</li>
<li><code>format!</code> now allows <a href="https://github.com/mozilla/rust/pull/9299">trailing
commas</a> in its arguments.</li>
<li>The lexer now throws <a href="https://github.com/mozilla/rust/pull/9308">vastly better
errors</a>.</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-09-17">weekly
meeting</a>
discussed quite a bit, most interesting to me was the crypto discussion,
putting <code>macro_rules!</code> behind an experimental flag, and the default arguments
discussion.</p>

<h1>Project announcements etc</h1>

<ul>
<li><a href="https://github.com/williamw520/rustymem">rustymem</a> &ndash; a pure-rust memcached
library.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1myesy/where_to_learn_more_about_rusts_concurrency_model/">&ldquo;Where to learn more about Rust&rsquo;s concurrency
model?&rdquo;</a></li>
<li><a href="https://raw.github.com/jeaye/q3/master/pics/016_1_animated_skele.png">q3 now has skeletal
animation!</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/09/15/this-week-in-rust/"/>
    <updated>2013-09-15T17:59:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/09/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>. We&rsquo;re gearing up
for the 0.8 release in 2-3 weeks. It looks like it&rsquo;s going to be a really
solid release. I&rsquo;ll write another <code>State of Rust</code>, hopefully before it is
released.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>68 PRs were merged this week.</p>

<h2>Breaking changes</h2>

<ul>
<li><code>std::iterator</code> <a href="https://github.com/mozilla/rust/pull/9065">has been
renamed</a> to <code>std::iter</code>.</li>
<li>The <code>std::num::Primitive</code> trait is <a href="https://github.com/mozilla/rust/pull/9051">now
constrained</a> by the <code>Clone</code> and
<code>DeepClone</code> traits, as well as
<a href="https://github.com/mozilla/rust/pull/9182"><code>Orderable</code></a>.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/9062">more free functions</a> have
been removed from <code>std::vec</code>. <code>unzip</code> now takes an iterator, a
<code>Permutations</code> iterator has been added, and some rarely-used, obsolete,
functions were removed.</li>
<li>A bunch of changes to <code>Option</code> and <code>Result</code> <a href="https://github.com/mozilla/rust/pull/9115">were
made</a>. Specifically, <code>chain</code> was
changed to <code>and_then</code> and <code>unwrap_or_default</code> to <code>unwrap_or</code>.</li>
<li>rustpkg <a href="https://github.com/mozilla/rust/pull/9151">builds into
target-specific</a> subdirectories
now.</li>
</ul>


<h2>Additions and fixes</h2>

<ul>
<li>debuginfo now has <a href="https://github.com/mozilla/rust/pull/9097">namespace
support</a>. Looking at all the
various PRs Michael has opened over the summer, it seems DWARF is a very
flexible, nice debuginfo format, but gdb and LLVM don&rsquo;t support it very
well.</li>
<li>Correct <code>range_step</code> and <code>range_step_inclusive</code> iterators <a href="https://github.com/mozilla/rust/pull/9199">have been
added</a>. They are correct in cases
of overflow, and are generic.</li>
<li>A handy <code>sleep</code> function <a href="https://github.com/mozilla/rust/pull/9191">has been
added</a> to newrt.</li>
<li>File IO in newrt <a href="https://github.com/mozilla/rust/pull/9165">works on
windows</a> now.</li>
<li>A bug where nested items in a default method weren&rsquo;t compiled <a href="https://github.com/mozilla/rust/pull/9162">has been
fixed</a>.</li>
<li>A rendezvous concurrency structure, much like Ada&rsquo;s, <a href="https://github.com/mozilla/rust/pull/8908">has been
added</a>.</li>
<li>Buffered IO wrappers <a href="https://github.com/mozilla/rust/pull/9091">have been
added</a>.</li>
<li>nmatsakis landed a PR that <a href="https://github.com/mozilla/rust/pull/9088">closed 7 issues at
once</a>.</li>
<li>rustpkg now uses <code>extra::workcache</code> <a href="https://github.com/mozilla/rust/pull/9034">to prevent recompilation of
already-compiled crates</a>.</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-09-10">Tuesday
meeting</a>
discussed the github commit policy, implicit copyability, patterns, and the
fate of <code>&amp;const</code>.</p>

<h1>Other things</h1>

<ul>
<li>Eric Reed (ecr)&rsquo;s intern presentation: <a href="https://air.mozilla.org/intern-presentations-reed/">An I/O System for
Rust</a>. Unfortunately,
the audio cuts out.</li>
<li><a href="https://github.com/singingboyo/evict">Evict-BT</a>, a git-integrated issue
tracker.</li>
<li><a href="https://github.com/mozilla/rust/wiki/Computer-Graphics-and-Game-Development">Computer Graphics and Game
Development</a>.
Also note the <code>#rust-gamedev</code> channel.</li>
<li><a href="https://github.com/FlaPer87/rust-for-real">rust-for-real</a>, a collection of
Rust examples to aid in learning. Needs more examples!</li>
</ul>

]]></content>
  </entry>
  
</feed>
