<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ramblin's]]></title>
  <link href="http://cmr.github.io/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2013-10-29T01:19:58-04:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[More On Stack Safety]]></title>
    <link href="http://cmr.github.io/blog/2013/10/28/more-on-stack-safety/"/>
    <updated>2013-10-28T17:58:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/28/more-on-stack-safety</id>
    <content type="html"><![CDATA[<p>I got a lot of great feedback on my <a href="http://cmr.github.io/blog/2013/10/21/on-stack-safety/">previous
post</a>, and I&rsquo;ve done
some thinking and come up with what I think is a better proposal, and a solid
way forward.</p>

<!-- more -->


<ol>
<li>Teach the task API to allow spawning a task with a fixed stack size.</li>
<li>Add the ability to query stack size from LLVM. This lets us implement stack
guard zones precisely.</li>
<li>Add a way to use the result of #2 in a clean way. This is probably the
trickiest to get right.</li>
</ol>


<p>You&rsquo;ll note that this doesn&rsquo;t seem to support segmented stacks <em>or</em> omission
of stack safety! I&rsquo;m now of the opinion that segmented stacks have no future.
They currently only allow aborting on stack overflow, not unwinding, and their
only other benefit (the ability to &ldquo;grow&rdquo; the stack) is niche. If someone
really thinks growable stacks is desirable, and has valid, convincing
usecases, they should contact me by email or IRC.  Otherwise, the guarantees
they provide are the same as guard zones (abort on overflow).</p>

<p>Omission of stack safety seems missing. But, it isn&rsquo;t needed when using guard
zones! Since guard zones impose nothing on a function&rsquo;s generated code (ie,
there&rsquo;s no prelude that looks into TLS, no need for a <code>__morestack</code>), an
environment which can&rsquo;t provide guard zones simply does nothing special when
setting up a task&rsquo;s stack.</p>

<p>You&rsquo;ll also note that this ditches the static analysis I was so fond of. This
sort of analysis really belongs in a lint pass, rather than as a core part of
the safety feature. A crate can say <code>#[max_stack_size = "64K"];</code> or
<code>#[deny(unbounded_stack)]</code> if it wants static stack size checking (which
people
<a href="http://www.reddit.com/r/rust/comments/1owhwi/on_stack_safety/ccwke1l">seem</a>
<a href="http://www.reddit.com/r/rust/comments/1owhwi/on_stack_safety/ccwjhpn">to</a>
<a href="http://www.reddit.com/r/programming/comments/1owjmi/on_stack_safety_in_rust/ccwei0c">want</a>).</p>

<p>Requiring fixed-sized stacks seems like a step backwards, but I don&rsquo;t see a
better path forward. Solving this problem can be left to a less-rusty, perhaps
research, language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/10/28/this-week-in-rust/"/>
    <updated>2013-10-28T16:20:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/28/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust!</em> This week marks the addition
of some more feature gates, removal of <code>std::io</code>, and some feature proposals.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>47 PRs were merged this week, and we passed issue number 10000.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Most of the crypto in the stdlib <a href="https://github.com/mozilla/rust/pull/9744">has been
removed</a>.</li>
<li><code>std::io</code> <a href="https://github.com/mozilla/rust/pull/9901">has been removed</a>,
with corresponding improvements in <code>std::rt::io</code>.</li>
<li>The <code>frame_address</code> intrinsic <a href="https://github.com/mozilla/rust/pull/10040">has been
removed</a>.</li>
<li><code>@</code>-ptrs are <a href="https://github.com/mozilla/rust/pull/9923">now feature-gated</a>,
reflecting the fact that they will exist in a very different form once they
are finished.</li>
<li>All of the logging that used <code>fmt</code> (<code>debug!</code> and so forth) <a href="https://github.com/mozilla/rust/pull/10006">have been
transitioned to <code>format!</code></a>.</li>
<li><code>asm!</code> <a href="https://github.com/mozilla/rust/pull/10009">is also featured gated</a>.</li>
<li><code>sys::log_str</code> <a href="https://github.com/mozilla/rust/pull/9937">has moved</a>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>The long-awaited addition of <code>mut</code> in patterns <a href="https://github.com/mozilla/rust/pull/10026">has finally
happened</a>. <code>let (mut x, y) = (1,
2);</code> works.</li>
<li>The scheduler now uses <a href="https://github.com/mozilla/rust/pull/10080">lock free data
structures</a>, which are supposed
to perform much better.</li>
<li>The homing code <a href="https://github.com/mozilla/rust/pull/10070">now does less
work</a>, which does one third as
many <code>write</code>&rsquo;s.</li>
<li><code>stdout</code> <a href="https://github.com/mozilla/rust/pull/10060">is now buffered</a>.</li>
<li>A <a href="https://github.com/mozilla/rust/pull/10054">non-libuv event loop</a> has
been added.</li>
<li><code>std::rand</code> has seen <a href="https://github.com/mozilla/rust/pull/9810">more</a>
<a href="https://github.com/mozilla/rust/pull/10015">work</a>.</li>
<li><code>rustpkg</code> <a href="https://github.com/mozilla/rust/pull/9654">now supports arbitrary
dependencies</a>, such as C
libraries.</li>
<li><code>mut</code> is <a href="https://github.com/mozilla/rust/pull/9989">now allowed on self</a>.</li>
<li>Nested comments <a href="https://github.com/mozilla/rust/pull/9936">are now
allowed</a>.</li>
<li><code>rustpkg</code> will now [find crates in the current directory], so you can say
<code>rustpkg build</code> in a source dir and it will build in a workspace.</li>
<li>Some new float intrinsics <a href="https://github.com/mozilla/rust/pull/9986">have been
exposed</a>.</li>
<li><code>println!</code> <a href="https://github.com/mozilla/rust/pull/9979">allocates less</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Igor Bukanov</li>
<li>Mark Rowe</li>
<li>Michael Letterle</li>
<li>reedlepee</li>
</ul>


<h1>Announcements etc</h1>

<ul>
<li>There will be a
<a href="http://www.meetup.com/Rust-Bay-Area/events/143439552/">meetup</a> in the San
Fransisco Mozilla office. Patrick Walton will be talking about sprocketnes.
If you&rsquo;re in the area, you should definitely go!</li>
<li><a href="http://hiho.io/rust-ci/">rust-ci</a> has been created, which lets you have
travis automatically rebuild and test your repo daily, to reduce
language/library breakage.</li>
<li><a href="https://github.com/erickt/rust-mustache">rust-mustache</a> and
<a href="https://github.com/erickt/rust-zmq">rust-zmq</a> have been updated for master.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1pdrv6/short_talk_about_rust_at_scalaio_in_paris_october/">Short talk about Rust at Scala.IO in Paris (October
25th)</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1pe2lc/a_bit_of_functional_programming_in_rust_or_a/">A Bit of Functional Programming in Rust, or A Misguided First Look at Rust
for ML
    Programmers</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1p52tj/a_draft_proposal_for_single_inheritance_in_rust/">A draft proposal for single
inheritance</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1p4vnk/iterators_yielding_mutable_references/">Iterators yielding mutable
references</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1p4qeh/servo_transitions_from_libcss_to_a_new_css/">Servo transitions from libcss to a new CSS library written in
Rust</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1owhwi/on_stack_safety/">On stack
safety</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Stack Safety]]></title>
    <link href="http://cmr.github.io/blog/2013/10/21/on-stack-safety/"/>
    <updated>2013-10-21T00:42:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/21/on-stack-safety</id>
    <content type="html"><![CDATA[<p>Stack safety is a sticky topic in Rust right now. There are multiple
conflicting tensions. My goal is to lay them bare, untangle the mess, and see
if there&rsquo;s a better way forward (spoiler: there is!).</p>

<!-- more -->


<p>When a program is &ldquo;stack safe&rdquo;, the <a href="http://en.wikipedia.org/wiki/Call_stack#Structure">stack
pointer</a> never points
outside of allocated memory specifically dedicated to the stack. The
most interesting violation of stack safety as it applies to Rust is the <a href="http://en.wikipedia.org/wiki/Stack_overflow">stack
overflow</a>. (In fact, given
safe code, or even unsafe code as long as it doesn&rsquo;t putz with the stack
pointer or the stack frame, it is the <em>only</em> possible violation of stack
safety). Stack overflow happens when the stack does not have enough space to
store the full stack frame.</p>

<p>There are three basic ways of dealing with stack overflow:</p>

<ol>
<li>Give up and accept the potential memory unsafety and resulting bugs.</li>
<li>Do static analysis to determine the maximum stack size, and make sure
that the stack is at least that large.</li>
<li>Do runtime checks to make sure that there is always enough space on the
stack for a function to proceed, and handle violation of that condition
somehow.</li>
</ol>


<p>(<em>Note</em>: in what follows, I conflate &ldquo;language&rdquo; with &ldquo;implementation of a
given language&rdquo; for clarity)</p>

<p>Examples of languages that take strategy #1 are C, C++, Nimrod, and
Objective-C. Stack overflow usually manifests as a segmentation fault or bus
error, though more colorful errors are possible when a thread runs into
another thread&rsquo;s stack, or onto the heap, causing heap corruption or threads
stomping on each others&#8217; stack. Clearly this is not a viable solution for
Rust: the very act of calling a function becomes unsafe.</p>

<p>Strategy #2 is tempting, but cannot be used in the general case. The
<a href="http://dl.acm.org/citation.cfm?id=1113833&amp;bnc=1">research</a>
<a href="http://dl.acm.org/citation.cfm?id=1631721">I</a>
<a href="http://dl.acm.org/citation.cfm?doid=1375634.1375656">found</a> investigate stack
depth in the case of no recursion (so the call graph is actually a call
(directed-)acyclic graph) but with asynchronous interrupt handlers. Indeed, it&rsquo;s
trivial to show that when recursion is disallowed, a conservative stack limit
can be calculated just by taking the longest path through the call graph with
the nodes being weighted by the size that function&rsquo;s stack frame needs (this
is a slightly different construction than most weighted graphs). This solution
is not viable either: recursion is perfectly valid, rejecting it would make
Rust very crippled as a language. To my knowledge, no languages rely on this
for stack safety, though in practice I am sure many applications apply this
technique.</p>

<p>This leaves us with strategy #3, dynamic checks. Dynamic checking is fairly
easy to do. The size of a function&rsquo;s stack frame is easy to calculate. One
need only increment/decrement some global (or, rather, thread-local) counter
by the stack frame size. When it becomes negative, there is no more stack.
Almost every language I&rsquo;ve used (the exceptions are noted above) use this
technique. Java, Python, Lua, Ruby, Go, the list goes on. The only differences
between the languages is what they do when the stack does overflow. Most throw
an exception. Another method of implementing dynamic checks is to leave a
&ldquo;guard zone&rdquo; after the stack. This zone is mapped in a way that accessing it
causes a page fault, which sends a signal or kills the process. (The exact
implementation of this strategy differs; some allocate a stack frame for a
function on the heap. Things get blurry with the interpreted languages, but
they generally prevent stack overflow in a memory safe way.)</p>

<p>Rust currently uses strategy #3, with tweaks. The current implementation
heavily depends on LLVM&rsquo;s <a href="http://llvm.org/releases/3.0/docs/SegmentedStacks.html">segmented
stack</a> feature. On x86
(and I assume other platforms as well), a pointer to the end of the stack is
stored in thread-local storage. The prelude to every function call compares
that value to the value of the stack pointer, and calls a special function
<code>__morestack</code> which will allocate a new stack segment for the function call to
take place on. The stack segment is freed afterwards. The kink comes when
using the FFI to call C code. C assumes a single, large stack. In order to
fulfill that expectation, we have the <code>fixed_stack_segment</code> attribute to
give a function a large stack segment: hopefully large enough that the C
function doesn&rsquo;t overflow the stack.</p>

<p>Segmented stacks are of questionable utility. On large systems, such as x64,
address space is practically boundless, so lazily allocating stack segments is
going to be slower than just requesting a very large mmap&rsquo;d stack that the OS
will lazily allocate. On small, resource-constrained systems, the overhead of
stack size checking (it requires TLS <em>and</em> stack size checks) is too much.
Segmented stacks only optimize for mid-sized address spaces. And the entire
purpose of segmented stacks (conservative but growable stack sizes) is moot if
one is not using many tasks with small stacks.
(<a href="https://mail.mozilla.org/pipermail/rust-dev/2013-July/004686.html">Previously</a>,
<a href="https://github.com/mozilla/rust/issues/8345">previously</a>)</p>

<p>All of the solutions so far are inadequate. They&rsquo;re inflexible and have poor
composability in the case where a crate wants custom stack safety. I propose a
hybrid:</p>

<ol>
<li>If there is no recursion or other sources of stack size uncertainty, the
maximum stack size is decidable and is used as the only stack size, like
strategy #2. Every function would be annotated with the total stack size it
could possibly use, given static function calls. This fails at the first
introduction of function pointers: it is impossible to know how much stack
they need until runtime. However, this is not as limiting as it may sound,
as long as one only tries to achieve a conservative estimate of maximum
stack size. Since function pointers only come from trait objects and
closures, the compiler can take the max of the stack frame for <em>every
implemention</em> of the trait. I would assume closures could work in a similar
way, in limited cases. There will always be cases where this analysis
fails.</li>
<li>If the analysis in step 1 results in indeterminate stack sizes, rustc will
check a crate attribute. This crate attribute indicates which stack safety
strategy should be used: either guard zones, stack size checks, segmented
stacks, or no stack safety at all (note that stack size checks is segmented
stacks minus expanding the stack with <code>__morestack</code>).  Disabling stack
safety &ldquo;taints&rdquo; a crate, and any use of its functions requires <code>unsafe</code>,
like calling C code, and they cannot be coerced to closures (this would
lose the &ldquo;taint&rdquo; bit). Note that when the maximum stack size is decidable,
this attribute won&rsquo;t be checked.</li>
</ol>


<p>All of the trickiness comes from compiling libraries with this. Executables
are easy: since they define the execution context, they can decide how they
want the stack to be secured. Libraries, being embedded in other contexts,
need to obey their execution environment. At the very least, no-stack-safety
will make it possible to implement libraries exposing a native ABI in Rust
without requiring weirdness in the FFI, as well as implement custom stack
safety when it&rsquo;s desired.</p>

<p>By allowing crates to chose how they want stack safety to be implemented, we
retain flexibility to fit any situation. By making it a crate attribute, we
can handle combination of crates using different stack safety schemes in a
sane way. There are still some niggling details with combining crates using
different stack safety schemes (propagating the taint bit is quite difficult
in the face of trait objects, but for now we could simply disallow
combinations and work them out later (it&rsquo;s a backwards compatible change). I
think this is a good stack safety strategy, superior to the current one, and
worth implementing.</p>

<p>Please email me any comments, or see the <a href="http://www.reddit.com/r/rust/comments/1owhwi/on_stack_safety/">discussion on
reddit</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM ICPC: What I Learned]]></title>
    <link href="http://cmr.github.io/blog/2013/10/20/acm-icpc-what-i-learned/"/>
    <updated>2013-10-20T10:47:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/20/acm-icpc-what-i-learned</id>
    <content type="html"><![CDATA[<p>Yesterday I participated in my first <a href="http://icpc.baylor.edu/">programming
contest</a>. It was very fun, though challenging, and I
learned a fair bit during it. <!-- more --> The content consisted of teams of
3 working to solve 6 problems as fast as possible. The problems ranged from
trivial (repeated arithmetic) to moderately complex.</p>

<h2>Problem solving is fun.</h2>

<p>I already knew this, but it has been some time since I&rsquo;ve done intense
problem solving. It was nice to sit down for a few hours and bang my head
on a problem. Creative problem solving just <em>feels</em> good, in a way that most
activities don&rsquo;t.</p>

<h2>I don&rsquo;t know much about algorithms or data structures</h2>

<p>Of course I know the basic search and sorts, but anything involving
anything more complex than binary trees is beyond my current knowledge. A
few of the problems were solved very elegantly with tree operations. I was
unable to come up with a way to express the operation I wanted to perform.
It&rsquo;s a <a href="http://en.wikipedia.org/wiki/Longest_path_problem">standard problem</a>
which I had not been aware of.</p>

<p>Now that I <a href="http://en.wikipedia.org/wiki/There_are_known_knowns">know what I don&rsquo;t
know</a>, I can expand my
knowledge.</p>

<h2>C++&rsquo;s iostreams are quite nice</h2>

<p>Previously I haven&rsquo;t been a fan of iostreams, due to their misplaced
pedagogical use. But, for simply reading whitespace-separated data from stdin
and outputting the same to stdout, there probably isn&rsquo;t anything easier. I
might implement something similar (though not using the <code>&gt;&gt;</code> and <code>&lt;&lt;</code>
operators).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/10/19/this-week-in-rust/"/>
    <updated>2013-10-19T10:49:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/19/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>, a weekly summary of Rust&rsquo;s
progress and happenings in the community.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>48 PRs were merged this week.</p>

<h2>Breaking changes</h2>

<ul>
<li>Slices are now represented as <a href="https://github.com/mozilla/rust/pull/9885">number of elements, not number of
bytes</a>.</li>
<li><code>fmt!</code> has been <a href="https://github.com/mozilla/rust/pull/9919">completely
removed</a>.</li>
<li>Some fields in <code>std::comm</code> <a href="https://github.com/mozilla/rust/pull/9935">have been made
private</a>.</li>
<li><code>std::sys::refcount</code> <a href="https://github.com/mozilla/rust/pull/9922">has been
moved</a> to
<code>std::managed::refcount</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/9896/files#diff-69196c6d2488bf8d5b3471084e854407L22">A bunch of
functions</a>
have moved from <code>std::sys</code> to <code>std::mem</code>.</li>
<li><code>once fn</code> is <a href="https://github.com/mozilla/rust/pull/9863">now a feature gate</a>
rather than a <code>-Z</code> flag.</li>
<li><code>Path</code> has been <a href="https://github.com/mozilla/rust/pull/9655">completely
rewritten</a>.</li>
<li><code>extra::flatpipes</code> <a href="https://github.com/mozilla/rust/pull/9886">has been
removed</a>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li><code>jemalloc</code> has been <a href="https://github.com/mozilla/rust/pull/9933">removed from the
runtime</a>. The <a href="https://github.com/mozilla/rust/issues/9925">associated
issue</a> is quite scary.</li>
<li><code>rustdoc</code> <a href="https://github.com/mozilla/rust/pull/9946">struct field
visibility</a> is now corrected (it
stripped fields where it should not have).</li>
<li><code>rustdoc</code> also <a href="https://github.com/mozilla/rust/pull/9941">uses the actual privacy
rules</a> to strip methods.</li>
<li><code>format!</code> now gives <a href="https://github.com/mozilla/rust/pull/9932">much better</a>
error messages for invalid format strings.</li>
<li>The <code>fmt::Default</code> trait, used for default formatting with <code>format!</code>, is
<a href="https://github.com/mozilla/rust/pull/9938">now documented</a>.</li>
<li><code>include_bin!</code> has been optimized, and the <code>k-nucleotides</code> benchmark now
compiles <a href="https://github.com/mozilla/rust/pull/9851">187x faster</a>.</li>
<li>Vectors now have <a href="https://github.com/mozilla/rust/pull/9907"><code>starts_with</code> and <code>ends_with</code>
methods</a>, which take slices.</li>
<li>An <code>abort</code> intrinsic <a href="https://github.com/mozilla/rust/pull/9860">has been
added</a>.</li>
<li>Vectors now have a <a href="https://github.com/mozilla/rust/pull/9608"><code>get_opt</code>
method</a>.</li>
</ul>


<h2>New contributors</h2>

<p>A new section for new contributors! The new contributors this week are (as
reported by git):</p>

<ul>
<li>Chris Sainty</li>
<li>Eduard Burtescu</li>
<li>Erik Lyon</li>
<li>Harry Marr</li>
<li>Sébastien Chauvel</li>
<li>Vijay Korapaty</li>
<li>Ziad Hatahet</li>
<li>chitra</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-15">weekly
meeting</a>
discussed removing rusti, changing the attribute syntax, destructors in
statics, and more multi-crate packages with rustpkg.</p>

<h1>Announcements etc</h1>

<ul>
<li>Rust (and Servo) are participating in the <a href="https://groups.google.com/forum/#!topic/mozilla.dev.servo/7kX_E0FlfkA">GNOME Outreach Program for
Women</a>.
A bunch of people have already come into IRC about it.</li>
<li><a href="http://exercism.io">http://exercism.io</a> <a href="https://github.com/kytrinyx/exercism.io/pull/866">is getting full Rust
support</a>. This is a very
cool resource, and could help a lot getting newcomers acclimated.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-October/006034.html">Unified Function/method Call Syntax and further
simplification</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1osbq2/safe_manual_memory_management_in_cyclone_research/">Safe Memory Management in
Cyclone</a>.</li>
<li><a href="http://opensourcebridge.org/sessions/970">Audio</a> from Tim&rsquo;s talk in June is
finally available!</li>
<li>An
<a href="https://github.com/mozilla/rust/wiki/Operating-system-development">OSdev</a>
community has sprung up! The channel is <code>#rust-osdev</code>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1omw47/should_io_use_conditions/">Should I/O use
conditions?</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1opo36/pointers_in_rust_a_guide/">Pointers in Rust: A
Guide</a>.</li>
<li>I am on a <a href="http://cmr.github.io/blog/2013/10/14/rust-hiatus/">Rust hiatus</a>,
for the time being. TWiR will still be happening, as you are reading it
right now.</li>
<li><a href="https://github.com/thestinger/rust-core">rust-core</a> &ndash; A stub standard
library.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust Hiatus]]></title>
    <link href="http://cmr.github.io/blog/2013/10/14/rust-hiatus/"/>
    <updated>2013-10-14T04:05:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/14/rust-hiatus</id>
    <content type="html"><![CDATA[<p>I&rsquo;m taking a temporary hiatus from all Rust work, to focus on academics. This
includes IRC and <a href="http://docs.octayn.net">http://docs.octayn.net</a>. I will continue to publish This
Week in Rust. If you need to contact me for any reason, please
<a href="send%20me%20an%20email">mailto:corey@octayn.net</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/10/12/this-week-in-rust/"/>
    <updated>2013-10-12T22:53:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/12/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>. This week introduces raw
string literals, the removal of the <code>rust</code> tool, feature gating, and the
privacy overhaul.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>Only 51 PRs were merged this week, though the ones that were were fairly
large.</p>

<h2>Breaking changes</h2>

<ul>
<li>Visibility and privacy have been defined, and the new semantics are slightly
incompatible with the old. The details are
<a href="https://github.com/mozilla/rust/pull/9735">here</a>.</li>
<li>Feature gating has been <a href="https://github.com/mozilla/rust/pull/9703">added to the
compiler</a>. This allows us to
mask language features that we don&rsquo;t want to commit to for 1.0. The compiler
will tell you when you are using an &ldquo;experimental&rdquo; feature. The current
experimentals are glob imports, macro definitions, and struct-like variants
in enums. This is an important step forward for 1.0 which,
<a href="http://www.reddit.com/r/rust/comments/1o90f9/fn_types_in_rust_take_3/ccq8qev">apparently</a>,
is right around the corner.</li>
<li>The <code>rust</code> tool <a href="https://github.com/mozilla/rust/pull/9785">has been
removed</a>.</li>
<li><code>Option</code>&rsquo;s API has been <a href="https://github.com/mozilla/rust/pull/9359">massively
simplified</a>, and changed to be
composable.</li>
<li>Strings are <a href="https://github.com/mozilla/rust/pull/9750">no longer allowed to be modified in safe
code</a>. Things like <code>let s =
~"abcdefg"; s[4] = 0x99;</code> are now rejected. This is because it allows one to
create invalid (non-UTF8) string values.</li>
<li><code>extra::rc</code> has <a href="https://github.com/mozilla/rust/pull/9794">graduated to
<code>std::rc</code></a>.</li>
<li><code>extra::tempfile::mkdtemp</code> <a href="https://github.com/mozilla/rust/pull/9802">has been replaced with an RAII
wrapper</a>.</li>
<li><code>std::rand</code> <a href="https://github.com/mozilla/rust/pull/9695">has been improved</a>,
but changes the public API of Rng a bit.</li>
<li><code>IntConvertible</code> has been removed in favor of <a href="https://github.com/mozilla/rust/pull/9250"><code>ToPrimitive</code> and
<code>FromPrimitive</code></a>, which can be
derived for enums, making interacting with C APIs substantially more
<a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/9674">Raw strings</a> are now supported.
The basic syntax is <code>r"Foo"</code>, but also <code>r###"Foo"###</code>, for arbitrary
nesting of raw strings.</li>
<li>rustpkg&rsquo;s remote fetching <a href="https://github.com/mozilla/rust/pull/9741">is
fixed</a>, but <a href="https://github.com/mozilla/rust/issues/9482">other
</a>
<a href="https://github.com/mozilla/rust/issues/9781">problems</a> prevent it from
being fully usable right now.</li>
<li>debuginfo namespace handling <a href="https://github.com/mozilla/rust/pull/9658">has been
unified</a>, and marks the ability
to build all of Rust (libstd, libextra, compiler and tools) with debuginfo,
which is very awesome.</li>
<li>Small structs <a href="https://github.com/mozilla/rust/pull/9759">are immediate</a>.</li>
<li>When there are unbalanced delimiters, <a href="https://github.com/mozilla/rust/pull/9756">the opening delimiters leading up to
it</a> are printed, avoiding the
&ldquo;Expected a }, saw EOF at line 9001&rdquo; problem.</li>
<li>libuv and jemalloc are only <a href="https://github.com/mozilla/rust/pull/9772">built once, rather than once per
stage</a>.</li>
<li>Macros <a href="https://github.com/mozilla/rust/pull/9753">now take attributes</a> and,
in turn, can be documented.</li>
<li>In the opposite direction, <a href="https://github.com/mozilla/rust/pull/9783">macros can now expand to items with
attributes</a>.</li>
<li>There were some <a href="https://github.com/mozilla/rust/pull/9664">minor logging
changes</a>, the biggest result of
which is that inlined functions won&rsquo;t be logged by the modules they&rsquo;re
inlined into.</li>
<li><a href="https://github.com/mozilla/rust/pull/9749"><code>std::rt::io::native</code> has been
implemented</a>. The idea of this is
to live in <code>std::io::native</code> and to use the OS&rsquo;s native APIs rather than
libuv, and also to not require the scheduler or any other runtime support.</li>
<li>rustpkg <a href="https://github.com/mozilla/rust/pull/9732">marks checked out repos as
read-only</a>, to prevent
modifications.</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-08">weekly
meeting</a>
discussed some administrative things, the removal of crypto code, the removal
of the <code>rust</code> tool, and functions.</p>

<h1>Announcements etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1o35ns/fuse_userspace_library_in_rust/">rust-fuse</a>
- a FUSE userspace library in Rust. This is pure Rust, not using libfuse.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1o46cv/ears_a_simple_library_for_playing_sounds/">ears</a>
- a simple library for playing sounds.</li>
<li><a href="https://github.com/pcmattman/rustic">rustic</a> &ndash; another operating system
project.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-October/005981.html">Refactoring the milestones on the issue
tracker</a>.</li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2013/10/10/fn-types-in-rust/">Fn Types in Rust, Take
3</a>
- another attempt at tackling the problems with closures.</li>
<li>mcpherrin in <code>#rust</code> says &ldquo;Hello, everyone!&rdquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The State of Rust 0.8]]></title>
    <link href="http://cmr.github.io/blog/2013/10/06/the-state-of-rust-0-dot-8/"/>
    <updated>2013-10-06T20:32:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/06/the-state-of-rust-0-dot-8</id>
    <content type="html"><![CDATA[<p>Another 3 months, another release. This is the first release that I&rsquo;ve
witnessed in its entirety! This is a summary of Rust: its compiler,
libraries, documentation, and community. (<a href="http://rust-lang.org">What is
Rust?</a>)</p>

<!-- more -->


<h1>Compiler</h1>

<p>The compiler is faring well. It received a lot of attention in compile speed,
although memory usage regressed significantly. It is now mostly fixed in
master. Time compiling <code>fn main() { }</code> went from 172ms to 112ms on my box.
When compiling programs of any significance, the gap is much larger. There&rsquo;s
also been some thought put into parallelizing rustc. Michael Woerister&rsquo;s GSoC
project was debuginfo, and it&rsquo;s almost in a fully-working state. As of 0.8,
it&rsquo;s not completely baked &mdash; libstd can&rsquo;t be compiled with it, and stepping
through code isn&rsquo;t perfect &mdash; but it&rsquo;s a huge step forward, and he created an
extensive testsuite, so it shouldn&rsquo;t regress. The pretty printer hasn&rsquo;t seen
much improvement. Default methods, one of the major things Michael Sullivan
worked on over the summer, are in a much better state. If there are any
remaining bugs in them, I haven&rsquo;t seen them.</p>

<h1>Iterators</h1>

<p>Iterators are hugely improved for 0.8. The <code>for</code> loop syntax now uses the
Iterator trait. Additionally, most uses of vector iterators now compile to the
exact same code that indexing or iteration would in C or C++, including the
ability to be vectorized. Additionally, they now use default methods instead
of extension implementations. A bunch of other extensions to Iterator were
added, such as DoubleEndedIterator and RandomAccessIterator.</p>

<h1>Documentation</h1>

<p>The documentation is in a much better state than it was 3 months ago. The new
rustdoc was started and finished. I started it, and Alex Crichton really
polished and finished it the last two weeks before the release. The API
documentation is now navigable, and one can actually see the relationship
between various types. A bunch of work also went into the tutorials, yielding
three new documents: error handling and conditions, iterators and containers,
and rustpkg.</p>

<h1><code>rustpkg</code></h1>

<p>Rustpkg continues to advance. Tim put out the call for community involvement,
and it&rsquo;s getting significant traction in actual libraries. There are still a
few kinks when using it for development, but when just fetching and building
dependencies, it works very well. Servo is porting its whole mini-ecosystem
over to rustpkg, uncovering bunches of problems and deficiencies in the
process. If you&rsquo;re interested in helping out with Rust, rustpkg is a major
area. Tim is also super nice, and will happily help you get into the codebase.</p>

<h1>Libraries</h1>

<p>Rust is slowly accreting more and more useful libraries: mostly coming from
the gamedev community, but sometimes other useful things as well. The
new runtime has completely replaced the old, a significant step forward for
Rust&rsquo;s maturity. <code>rust-http</code> is making some really nice strides, as well as
the opengl bindings. The standard libraries are becoming nicer to use.
<code>std::run</code>, in particular, stands out to me as something that&rsquo;s quite easy to
use, and <code>std::str</code> saw a lot of work making it more correct.</p>

<h1>The Future</h1>

<p>This was a great release cycle, and I think the next one will be even better.
Alex Crichton was hired as a full-time Rust developer, and he has been doing a
lot of important work that just would have taken a while to happen otherwise.
I&rsquo;m very optimistic about this release, much more so than 0.7. I think we
might be able to hit milestone 1 for 0.9 or 0.10, though that&rsquo;s just
speculation on my part.</p>

<h1>Is Rust Ready?</h1>

<p>No. Rust is approaching maturity, but it isn&rsquo;t there yet. There are still
backwards-incompatible changes being made to try and get to milestone 2.  The
major things that come to mind are closure reform and privacy overhaul (which
is being worked on in master <a href="https://github.com/mozilla/rust/pull/9735">right
now</a>). Additionally, people in the
gamedev community are starting to <a href="http://www.reddit.com/r/rust/comments/1nxs1h/the_state_of_rust_08/ccnb8ya">hit walls with the type
system</a>.
Those probably won&rsquo;t be fixed in the time leading up to 1.0, but this is also
speculation.</p>

<p>Experimenting with Rust is becoming more viable as time goes on, but using it
in production is a bad idea, especially if &ldquo;low maintenance&rdquo; is at all
valuable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/10/06/this-week-in-rust/"/>
    <updated>2013-10-06T18:25:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/10/06/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>Only 63 PRs were merged this week. Currently in the queue is the massive
privacy change, the path rewrite, enum descriminant shrinking, a <code>rand</code>
rework, a lock-free scheduler message queue, and libuv signal bindings.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>float</code> has been <a href="https://github.com/mozilla/rust/pull/9519">removed from the
language</a>.</li>
<li><code>loop</code> has been <a href="https://github.com/mozilla/rust/pull/9665">removed</a>. The
transition to <code>continue</code> is complete.</li>
<li>A macro ignoring tokens now <a href="https://github.com/mozilla/rust/pull/9673">throws an
error</a> rather than silently
ignoring it.</li>
<li><code>IntConvertible</code> has been
<a href="https://github.com/mozilla/rust/pull/9250">replaced</a> with <code>ToPrimitive</code> and
<code>FromPrimitive</code>. This also heralds the ability to derive to/from int methods
on enums.</li>
</ul>


<h2>Everything Else</h2>

<ul>
<li><code>rustpkg</code> can <a href="https://github.com/mozilla/rust/pull/9741">fetch remote packages
again</a>.</li>
<li>A bunch of unsafe code surrounding logging <a href="https://github.com/mozilla/rust/pull/9593">has been
remove</a>.</li>
<li>A bunch of work was done to make more things immediate. A
<a href="https://github.com/mozilla/rust/pull/9643">bugfix</a>, <a href="https://github.com/mozilla/rust/pull/9656">small
tuples</a>, <a href="https://github.com/mozilla/rust/pull/9677">small
enums</a>, and <a href="https://github.com/mozilla/rust/pull/9699">unit/C-like
enums</a>.</li>
<li>A bunch of work went into decreasing our memory usage. The massive spike at
the beginning <a href="https://github.com/mozilla/rust/pull/9612">has been fixed</a>.
The tcx (type context, holds the result of <em>all</em> compiler analysis) is also
free&rsquo;d before translation now, reducing memory usage by a good <a href="https://github.com/mozilla/rust/pull/9686">500+
MB</a>. Another cache during
constant evaluation <a href="https://github.com/mozilla/rust/pull/9722">reduces memory usage by
200MB</a>.</li>
<li>We&rsquo;re now <a href="https://github.com/mozilla/rust/pull/9662">bundling our
dependencies</a> on Windows, making
it easier to bootstrap and to setup a working Rust environment.</li>
<li>All of the really old obsolete syntax checkers <a href="https://github.com/mozilla/rust/pull/9712">have been
removed</a>.</li>
<li>Hyperlinking between crates is <a href="https://github.com/mozilla/rust/pull/9691">now
reimplemented</a> in rustdoc.</li>
<li>Gearing up for its removal, <a href="https://github.com/mozilla/rust/pull/9599">all <code>fmt!</code> usage in the compiler has been
removed</a>.</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-01">weekly
meeting</a>
discussed a bunch of proposed changes, including rustpkg submodules, removing
float (which has already happened), raw string literals (which have a patch
almost finished), and the changes to the Option API.</p>

<h1>Announcements</h1>

<ul>
<li><a href="https://github.com/jeaye/ncurses-rs">ncurses-rs</a> &ndash; a safe wrapper that
keeps the same ncurses interface you know and &ldquo;love&rdquo;, but more rustic.</li>
<li><a href="https://github.com/mozilla/rust/wiki/The%20Rusticon">The Rusticon</a> &ndash; A
living glossary of Rust terms.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1nqzth/zeromq_helping_us_block_malicious_domains_in_real/">A production use of
Rust!</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ntnvf/understanding_the_servo_strategy/">Understanding the Servo
Strategy</a>
- The Servo presentation given at the various Mozilla Summits</li>
<li><a href="http://www.reddit.com/r/rust/comments/1nmarr/dynamic_typing_implemented_as_library_code/">Dynamic Typing implemented as a
library</a>
- a pretty cool use of our reflection.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1ni84a/running_rust_tests_on_travis_ci/">Running Rust Tests on Travis
CI</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1ngqgr/rust_bindings_for_fuse_filesystem_in_userspace/">Rust bindings for
FUSE</a></li>
</ul>


<h1>Meetups</h1>

<p>Haven&rsquo;t had a meetup section in a long time, but two are forming!</p>

<ul>
<li><a href="http://www.meetup.com/Rust-Bay-Area/">Francisco Bay Area</a></li>
<li><a href="http://www.meetup.com/rust-skane/">Rust Skåne (Lund, Sweden)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/09/30/this-week-in-rust/"/>
    <updated>2013-09-30T13:11:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/09/30/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>! This week saw the release of
0.8, the removal of <code>@fn</code>, and a bunch of other changes. The tutorial has been
updated significantly, surrounding pointers and boxes, so you should re-read
those sections if you&rsquo;re still feeling shaky on when you should use which.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>There were 79 PRs merged this week.</p>

<h2>Breaking changes</h2>

<ul>
<li><code>printf!</code> and <code>printfln!</code> have been
<a href="https://github.com/mozilla/rust/pull/9550">removed</a>.</li>
<li><code>continue</code> is now a keyword, a <a href="https://github.com/mozilla/rust/pull/9504">synonym for
<code>loop</code></a>, preceeding <code>loop</code>&rsquo;s
removal (<a href="https://github.com/mozilla/rust/issues/9467">https://github.com/mozilla/rust/issues/9467</a>)</li>
<li>Item visibility is <a href="https://github.com/mozilla/rust/pull/9432">properly encoded in
metadata</a>, so code which used
private items that may have worked before is now rejected.</li>
<li>Char literals which should have been escaped <a href="https://github.com/mozilla/rust/pull/9335">are now rejected when they
aren&rsquo;t escaped</a>.</li>
<li><code>impl Foo for T;</code> is now <a href="https://github.com/mozilla/rust/pull/9336">disallowed</a>.
Use <code>impl Foo for T {}</code>.</li>
<li><code>@fn</code> has been <a href="https://github.com/mozilla/rust/pull/9310">removed from the
language</a>. Replace it with
<code>@Trait</code> objects, if you really need <code>@fn</code> (you probably don&rsquo;t).</li>
<li><code>start</code> <a href="https://github.com/mozilla/rust/pull/9301">no longer takes a crate
map</a>.</li>
<li>Some more keywords have been
<a href="https://github.com/mozilla/rust/pull/9389">reserved</a>: <code>alignof</code>,
<code>offsetof</code>, and <code>sizeof</code>.</li>
</ul>


<h2>Everything else</h2>

<ul>
<li>A ton of documentation work was put in this week. The box section of the
tutorial has been <a href="https://github.com/mozilla/rust/pull/9589">rewritten</a>,
and there&rsquo;s a new <a href="https://github.com/mozilla/rust/pull/9439">rustpkg
tutorial</a> too. The module
tutorial saw the file section
<a href="https://github.com/mozilla/rust/pull/9398">extended</a>. There was a bunch of
module documentation updated/added too.</li>
<li>rustdoc(_ng) also saw a lot of work. It <a href="https://github.com/mozilla/rust/pull/9402">completely
replaced</a> the old rustdoc, as
well as seeing a <a href="https://github.com/mozilla/rust/pull/9577">lot</a> of
<a href="https://github.com/mozilla/rust/pull/9475">fixes</a>. Huge thanks to Alex
Crichton for all the work with it!</li>
<li><code>std::vec</code> has seen some <a href="https://github.com/mozilla/rust/pull/9583">nice
changes</a> to <code>connect_vec</code> and
<code>concat_vec</code> (they were really awful before).</li>
<li><code>rustpkg test</code> is <a href="https://github.com/mozilla/rust/pull/9549">implemented</a>.</li>
<li><code>type_use</code> has been <a href="https://github.com/mozilla/rust/pull/9538">removed</a>.
This did some nasty things and LLVM&rsquo;s <code>mergefunc</code> pass will do a better job
of the same optimization (once it&rsquo;s enabled).</li>
<li><code>with_c_str</code> is now <a href="https://github.com/mozilla/rust/pull/9352">optimized</a>
to be allocation-free for short vectors.</li>
<li>The logging system, when using the new formatting code (so <code>debug2</code> etc) is
<a href="https://github.com/mozilla/rust/pull/9261">allocation-free</a>.</li>
<li><code>std::rand</code> has seen some
<a href="https://github.com/mozilla/rust/pull/9362">cleanup</a>, in preparation for its
overhaul.</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-09-24">weekly
meeting</a>
discussed a bunch of things, the main things of importance to me being:</p>

<ul>
<li><code>loop</code> &ndash;> <code>continue</code></li>
<li>Allowing nested comments</li>
</ul>


<h1>Announcements</h1>

<ul>
<li><a href="https://github.com/kenz-gelsoft/wxRust">wxRust</a> &ndash; A binding to the
wxWidgets toolkit.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1neu74/the_start_of_a_sinatra_clone/">widmann</a>
-  A Sinatra clone</li>
<li><a href="http://www.reddit.com/r/rust/comments/1nab2s/rustdev_opengl_glrs_updated_with_command_line/">gl-rs</a>
has been updated to generate only bindings for a select version / set of
extensions.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1n8y5b/debugging_rust_in_eclipse/">Debugging Rust in
Eclipse</a>
- Michael Woerister&rsquo;s final GSoC post. He did really great work this
summer!</li>
<li><a href="https://github.com/steveklabnik/rust_for_rubyists">Rust for Rubyists</a> has
been open sourced!</li>
<li>The <a href="https://code.google.com/p/claymore-game/">Claymore</a> project has just
come to my attention. Apparently it has been going on for quite some time.
There are some screenshots at <a href="http://claymore-dev.blogspot.com/">http://claymore-dev.blogspot.com/</a>.</li>
<li><a href="https://github.com/JeremyLetang/rustenstein3D/">rustenstein3d</a> &ndash; a
Wolfenstein3D engine</li>
<li><a href="https://github.com/eevee/clio">clio</a>, a roguelike. This one also slipped
under my radar for a while.</li>
<li><a href="https://github.com/thestinger/rust-gmp">rust-gmp</a> has been updated for
0.8/master.</li>
<li><a href="https://github.com/cmr/rustdoc_ng">rustdoc_ng</a>, being merged into mainline,
has concluded as a project.</li>
<li>And, of course, the <a href="http://www.reddit.com/r/rust/comments/1n7q8v/08_released/">0.8
release</a>
discussion on reddit.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/09/23/this-week-in-rust/"/>
    <updated>2013-09-23T13:08:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/09/23/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another issue of <em>This Week in Rust</em>. We&rsquo;re gearing up for a 0.8
release, tentatively planned for Thursday. Additionally, a huge welcome of
Alex Crichton to the Rust team! He&rsquo;s been doing some great work, it&rsquo;s
wonderful to have another full-time Rust dev.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>There were 86 PRs merged this week.</p>

<h2>rustdoc_ng</h2>

<p>rustdoc_ng was merged into mainline and enabled as the new rustdoc, in time
for 0.8. This makes me incredibly happy, as it marks the conclusion of my
quest to a better rustdoc. Not to say that rustdoc is finished or perfect,
but it&rsquo;s already much better than the old rustdoc. My sincere thanks go to
Jordi Boggiano (Seldaek), who worked unceasingly to create a beautiful,
usable frontend, and to Meret Vollenweider (meretv) for donating her amazing
design skills. Also thanks to Huon Wilson (dbaupp) for moral support and
creating the awesome DocFolder interface that passes over the documentation
use. And, of course, to Alex Crichton, who pushed these past few days to port
the static site generator to Rust and to integrate it into the build system.</p>

<p>The new docs have replaced the old docs. You can view them <a href="http://static.rust-lang.org/doc/master/std/index.html">on the Rust
website</a>. Still to-do
is proper cross-crate doc hyperlinking. To run it on your own crate, build a
recent Rust and do <code>rustdoc html path/to/your/crate.rs</code>. It will eventually be
integrated into <code>rustpkg</code>.</p>

<h2>Breaking changes</h2>

<ul>
<li><code>extra::par</code> has been <a href="https://github.com/mozilla/rust/pull/9380">removed</a>.</li>
<li>Some unsound functional struct updates (FSU, <code>{a: 5, ..b}</code>) <a href="https://github.com/mozilla/rust/pull/9350">are now
disallowed</a>.</li>
<li><code>--cfg debug</code> is no longer required. If you want to disable debug logging,
use <a href="https://github.com/mozilla/rust/pull/9278"><code>--cfg ndebug</code></a>.</li>
<li>The various uses of <code>NaN</code> are now <a href="https://github.com/mozilla/rust/pull/9321">lowercased to
<code>nan</code></a>.</li>
<li><code>std::util::unreachable</code> has been removed in factor of the
<a href="https://github.com/mozilla/rust/pull/9320"><code>unreachable!</code></a> macro.</li>
<li><code>extra::future</code> has been <a href="https://github.com/mozilla/rust/pull/9285">cleaned
up</a> a bit, including some method
shuffling/renames.</li>
<li><code>extra::getopts</code> has been <a href="https://github.com/mozilla/rust/pull/9267">cleaned
up</a> as well, with most free
functions now being methods.</li>
<li>The <code>from_str</code> methods in the numeric modules have been
<a href="https://github.com/mozilla/rust/pull/9275">removed</a> in favor of the FromStr
trait and the <code>from_str</code> free function in the prelude. Same for
<a href="https://github.com/mozilla/rust/pull/9209"><code>from_str_radix</code></a>.</li>
<li>The <code>Drop</code> trait now uses <a href="https://github.com/mozilla/rust/pull/9244"><code>&amp;mut
self</code></a>, as part of the transition
to by-value drops.</li>
<li><code>extra::json</code> uses a <a href="https://github.com/mozilla/rust/pull/9231">different
encoding</a> when encoding/decoding
enums, so any Rust-generated JSON before this patch will now be rejected by
the decoder.</li>
</ul>


<h2>Other changes</h2>

<ul>
<li>debuginfo now works for <a href="https://github.com/mozilla/rust/pull/9168">recursive
types</a>.</li>
<li>You can now <a href="https://github.com/mozilla/rust/pull/9213">pass parameters</a> to
the generated test with <code>rust test</code>.</li>
<li><code>extern fn</code>s from external crates now use the <a href="https://github.com/mozilla/rust/pull/9196">declared
ABI</a>, rather than assuming cdecl.</li>
<li><code>CString</code> has gained an
<a href="https://github.com/mozilla/rust/pull/9220"><code>as_str</code></a> method.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/9108">overflow bugs</a> in <code>vec</code> and
<code>str</code> have been fixed.</li>
<li><code>statics</code> are now <a href="https://github.com/mozilla/rust/pull/9130">properly
inlined</a> cross-crate.</li>
<li>The <code>bytes!</code> macro&rsquo;s error reporting has been <a href="https://github.com/mozilla/rust/pull/9245">tightened
up</a> to make it more obvious where
the error is.</li>
<li><code>rustpkg init</code> <a href="https://github.com/mozilla/rust/pull/9236">has been added</a>,
to create a new workspace.</li>
<li>File IO in newrt has been <a href="https://github.com/mozilla/rust/pull/9235">massively
reworked</a> and is much more
complete than the oldrt.</li>
<li>The exact meaning of &ldquo;unsafety&rdquo; <a href="https://github.com/mozilla/rust/pull/9258">is now
documented</a>.</li>
<li><code>\0</code> escapes in strings <a href="https://github.com/mozilla/rust/pull/9248">is now
supported</a>.</li>
<li><code>rustpkg</code> now thinks in terms of crates, not packages, to you can now have
<a href="https://github.com/mozilla/rust/pull/9263">multiple crates in a single
package</a> and have things work
correctly.</li>
<li>newrt has <a href="https://github.com/mozilla/rust/pull/9260/files">pipes and process
support</a> now.</li>
<li><code>format!</code> now allows <a href="https://github.com/mozilla/rust/pull/9299">trailing
commas</a> in its arguments.</li>
<li>The lexer now throws <a href="https://github.com/mozilla/rust/pull/9308">vastly better
errors</a>.</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-09-17">weekly
meeting</a>
discussed quite a bit, most interesting to me was the crypto discussion,
putting <code>macro_rules!</code> behind an experimental flag, and the default arguments
discussion.</p>

<h1>Project announcements etc</h1>

<ul>
<li><a href="https://github.com/williamw520/rustymem">rustymem</a> &ndash; a pure-rust memcached
library.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1myesy/where_to_learn_more_about_rusts_concurrency_model/">&ldquo;Where to learn more about Rust&rsquo;s concurrency
model?&rdquo;</a></li>
<li><a href="https://raw.github.com/jeaye/q3/master/pics/016_1_animated_skele.png">q3 now has skeletal
animation!</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/09/15/this-week-in-rust/"/>
    <updated>2013-09-15T17:59:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/09/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>. We&rsquo;re gearing up
for the 0.8 release in 2-3 weeks. It looks like it&rsquo;s going to be a really
solid release. I&rsquo;ll write another <code>State of Rust</code>, hopefully before it is
released.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>68 PRs were merged this week.</p>

<h2>Breaking changes</h2>

<ul>
<li><code>std::iterator</code> <a href="https://github.com/mozilla/rust/pull/9065">has been
renamed</a> to <code>std::iter</code>.</li>
<li>The <code>std::num::Primitive</code> trait is <a href="https://github.com/mozilla/rust/pull/9051">now
constrained</a> by the <code>Clone</code> and
<code>DeepClone</code> traits, as well as
<a href="https://github.com/mozilla/rust/pull/9182"><code>Orderable</code></a>.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/9062">more free functions</a> have
been removed from <code>std::vec</code>. <code>unzip</code> now takes an iterator, a
<code>Permutations</code> iterator has been added, and some rarely-used, obsolete,
functions were removed.</li>
<li>A bunch of changes to <code>Option</code> and <code>Result</code> <a href="https://github.com/mozilla/rust/pull/9115">were
made</a>. Specifically, <code>chain</code> was
changed to <code>and_then</code> and <code>unwrap_or_default</code> to <code>unwrap_or</code>.</li>
<li>rustpkg <a href="https://github.com/mozilla/rust/pull/9151">builds into
target-specific</a> subdirectories
now.</li>
</ul>


<h2>Additions and fixes</h2>

<ul>
<li>debuginfo now has <a href="https://github.com/mozilla/rust/pull/9097">namespace
support</a>. Looking at all the
various PRs Michael has opened over the summer, it seems DWARF is a very
flexible, nice debuginfo format, but gdb and LLVM don&rsquo;t support it very
well.</li>
<li>Correct <code>range_step</code> and <code>range_step_inclusive</code> iterators <a href="https://github.com/mozilla/rust/pull/9199">have been
added</a>. They are correct in cases
of overflow, and are generic.</li>
<li>A handy <code>sleep</code> function <a href="https://github.com/mozilla/rust/pull/9191">has been
added</a> to newrt.</li>
<li>File IO in newrt <a href="https://github.com/mozilla/rust/pull/9165">works on
windows</a> now.</li>
<li>A bug where nested items in a default method weren&rsquo;t compiled <a href="https://github.com/mozilla/rust/pull/9162">has been
fixed</a>.</li>
<li>A rendezvous concurrency structure, much like Ada&rsquo;s, <a href="https://github.com/mozilla/rust/pull/8908">has been
added</a>.</li>
<li>Buffered IO wrappers <a href="https://github.com/mozilla/rust/pull/9091">have been
added</a>.</li>
<li>nmatsakis landed a PR that <a href="https://github.com/mozilla/rust/pull/9088">closed 7 issues at
once</a>.</li>
<li>rustpkg now uses <code>extra::workcache</code> <a href="https://github.com/mozilla/rust/pull/9034">to prevent recompilation of
already-compiled crates</a>.</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-09-10">Tuesday
meeting</a>
discussed the github commit policy, implicit copyability, patterns, and the
fate of <code>&amp;const</code>.</p>

<h1>Other things</h1>

<ul>
<li>Eric Reed (ecr)&rsquo;s intern presentation: <a href="https://air.mozilla.org/intern-presentations-reed/">An I/O System for
Rust</a>. Unfortunately,
the audio cuts out.</li>
<li><a href="https://github.com/singingboyo/evict">Evict-BT</a>, a git-integrated issue
tracker.</li>
<li><a href="https://github.com/mozilla/rust/wiki/Computer-Graphics-and-Game-Development">Computer Graphics and Game
Development</a>.
Also note the <code>#rust-gamedev</code> channel.</li>
<li><a href="https://github.com/FlaPer87/rust-for-real">rust-for-real</a>, a collection of
Rust examples to aid in learning. Needs more examples!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/09/07/this-week-in-rust/"/>
    <updated>2013-09-07T18:30:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/09/07/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Welcome to another <em>This Week in Rust</em>.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>65 pull requests were merged this week, and bors has had some idle time when
there wasn&rsquo;t anything approved in the queue.</p>

<h2>Breaking changes</h2>

<ul>
<li><code>std::os::glob</code> has been replaced with a <a href="https://github.com/mozilla/rust/pull/8914">pure Rust
version</a>, for cross-platform and
compatability reasons.</li>
<li><code>std::str::from_bytes</code> has been
<a href="https://github.com/mozilla/rust/pull/8997">renamed</a> to
<code>std::str::from_utf8</code>, to be explicit about what it accepts.</li>
<li>Casting to bool with <code>as</code> is <a href="https://github.com/mozilla/rust/pull/8980">no longer
allowed</a>, and surrogate
characters are no longer allowed in strings.</li>
<li>char is <a href="https://github.com/mozilla/rust/pull/8974">no longer</a> treated as an
integer type (meaning it can&rsquo;t be casted to/from them), which removes the
ability for safe code to create invalid characters.</li>
<li>Opening a listening socket and actually listening on it <a href="https://github.com/mozilla/rust/pull/8954">have been
split</a>. If you&rsquo;re jiggy with the
jive, listen and accept are now separate operations. (<em>ed</em>: this used to say
bind and accept wereseparate; thanks to ecr for the correction.)</li>
</ul>


<h2>Additions</h2>

<ul>
<li><code>let</code> var hygiene has <a href="https://github.com/mozilla/rust/pull/9026">landed</a>.
I&rsquo;m sure this has cool implications, but I don&rsquo;t really know what they are.</li>
<li>An <a href="https://github.com/mozilla/rust/pull/8903"><code>export_name</code> attribute</a> has
been added to control what symbol name something is exported as (similar to
<code>no_mangle</code>).</li>
<li>An <code>ExactSize</code> trait <a href="https://github.com/mozilla/rust/pull/8884">has been
added</a> to mark an iterator that
always accurately reports its size in the <code>size_hint</code> method.</li>
<li><code>ToStr</code> has been <a href="https://github.com/mozilla/rust/pull/8960">implemented</a>
for char and Ascii.</li>
<li>Safe accessors of <code>MutexArc</code> <a href="https://github.com/mozilla/rust/pull/8966">have been
implemented</a></li>
<li>A bytes iterator <a href="https://github.com/mozilla/rust/pull/8935">has been added</a>
for newrt readers.</li>
<li>Stream is <a href="https://github.com/mozilla/rust/pull/8984">automatically
implemented</a> for types which
implement Reader and Writer from newrt.</li>
<li>An <code>unreachable</code> macro <a href="https://github.com/mozilla/rust/pull/8992">has been
added</a> for better error reporting
than a function could do.</li>
<li>newrt <a href="https://github.com/mozilla/rust/pull/9000">can now do</a> simple DNS
resolution.</li>
<li>strptime/strftime <a href="https://github.com/mozilla/rust/pull/9016">now support</a>
fractional seconds, out to tenths of a nanosecond.</li>
</ul>


<h2>Changes etc</h2>

<ul>
<li>Name mangling <a href="https://github.com/mozilla/rust/pull/8875">has been
improved</a>.</li>
<li><code>rust_log.cpp</code> <a href="https://github.com/mozilla/rust/pull/8880">has been
converted</a> into pure Rust.</li>
<li>Debuginfo <a href="https://github.com/mozilla/rust/pull/8855">now does closure
capture</a> and very large structs.</li>
<li>A <a href="https://github.com/mozilla/rust/pull/8947">bunch</a>
<a href="https://github.com/mozilla/rust/pull/8927">of</a>
<a href="https://github.com/mozilla/rust/pull/8928">repr</a> improvements landed.</li>
</ul>


<h1>Meeting</h1>

<p>There was no meteting this week listed on the wiki or that I saw.</p>

<h1>Projects</h1>

<ul>
<li><a href="https://github.com/glycerine/rust-nanomsg">rust-nanomsg</a> &ndash; bindings to the
nanomsg library.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/08/31/this-week-in-rust/"/>
    <updated>2013-08-31T19:10:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/08/31/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the lucky 13th issue of <em>This Week in Rust</em>. Graydon has
stepped down as project lead. It seems to be a bit ambiguous whether he&rsquo;ll
still be working on the project. Brian (brson) will be taking over as lead.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<h2>Breaking Changes</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8857">Some functions have been removed from
<code>std::str</code></a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8823">The unit test framework now uses RUST_TEST_TASKS instead of
RUST_THREADS</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8718"><code>typeof</code> is now a reserved
keyword</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8807"><code>offset_inbounds</code> has been
removed</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8797">Some edge cases with writing to a borrowed <code>&amp;mut</code> have been
closed</a>, rejecting more incorrect
programs.</li>
<li><a href="https://github.com/mozilla/rust/pull/8772">Option no longer implements
Add</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8700">Some pass handling stuff has
changed</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8744">Enum descriminants are now always
u64</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8750">String byte conversion functions which return an Option have been
added</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8764">The main tutorial links to the condition and error handling
tutorials</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8438">A trait for default initialization has been
added</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8757">debuginfo tests have been enabled on Windows, and debuginfo generation
works on Windows!</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8777">A better, more complete module tutorial has been
written</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8771">Some fixes to repr (the code that powers <code>%?</code> in fmt) have been
made</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8697"><code>rustpkg build</code> with no arguments now behaves a bit
differently</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8645"><code>std::run</code> has been reimplemented on top of
libuv</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8838">Frame pointer elimination has been
re-disabled</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8840">LLVM has been updated, giving us mingw-w64
support</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8819">Unit tests have been enabled on
Windows</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8802">Some compile speedups landed</a>.</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-08-27">Tuesday
meeting</a>
discussed rustpkg&rsquo;s timeline, extern fns, and LLVM asserts.</p>

<h1>Projects, discussion, and announcements</h1>

<ul>
<li>Jeaye says that anyone having problems with the q3 repo should re-clone. If
that doesn&rsquo;t fix it, pop into IRC: #q3 on irc.freenode.net.</li>
<li><a href="http://tim.dreamwidth.org/1820526.html">&ldquo;Making rustpkg work&rdquo;</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1lai9u/nphysics_a_2d_and_3d_rigid_body_physics_engine/">&ldquo;nphysics: a 2d and 3d rigid body physics engine for
Rust&rdquo;</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1l8hd4/first_university_computer_science_class_taught/">&ldquo;First university computer science class taught in
Rust&rdquo;</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/08/25/this-week-in-rust/"/>
    <updated>2013-08-25T12:54:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/08/25/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the 12th issue of <em>This Week in Rust</em>. Sorry for the
brevity, though most weeks are probably going to be like this, as I&rsquo;ve started
uni and have much less free time than in the summer.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>A whopping 71 pull requests were merged this week, and issue churn remains
negative at -32.</p>

<h2>Breaking changes</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8560"><strong><code>yield</code> is now reserved as a
keyword</strong></a>, with the hope of
maybe using it for generators.</li>
<li><a href="https://github.com/mozilla/rust/pull/8666">The type of <code>extern fn foo</code> is now <code>extern "C" fn</code>, rather than
<code>*u8</code></a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8679">Some free functions in <code>extra::json</code> were turned into associated functions
on the Json enum</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8558"><code>XorShiftRng::new()</code> now uses a random
seed</a>. This is only breaking if
you were depending on that constant seed, which you shouldn&rsquo;t have.</li>
</ul>


<h2>Library changes</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8710"><code>extra::getopts</code> aligns based on codepoint count and not byte
count</a>, as a step towards more
correct unicode handling.</li>
<li><a href="https://github.com/mozilla/rust/pull/8637"><code>fprintf</code> has been added, as well as some <code>ifmt</code>
cleanup</a>.
<a href="https://github.com/mozilla/rust/pull/8740">The new runtime has seen a lot of
optimization</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8655">File IO has been added to the new
runtime</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8616">Some parsing errors related to ports have been fixed in
<code>extra::url</code></a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8590">CharIterator has seen some optimization too, with reverse iterators being
much closer in performance to forward iterators
now</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8602">sysconf names have been added for
android</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8631">The new runtime now has threadsafe
IO</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8566">A callback optimization has sped up message passing benchmarks to the tune
of 40%</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8584">jemalloc is back</a>.</li>
</ul>


<h2>Compiler changes</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8736">gnueabihf actually uses hard floats
now</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8695">Frame pointer elimination is no longer
disabled</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8684">Some debuginfo fixes landed</a>.
Supposedly, libstd can now be compiled with <code>-Z debug-info</code>. Yay!</li>
<li><a href="https://github.com/mozilla/rust/pull/8596">Stack unwinding on 32-bit windows now
works</a>. This is a major step
forward for Windows support, I&rsquo;m very excited to see it land.</li>
<li><a href="https://github.com/mozilla/rust/pull/8659">A handful of default method bugs have been
fixed</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8562">Inheriting from kinds now sorta
works</a>, you can do <code>trait Foo:
Freeze</code>, for example.</li>
<li><a href="https://github.com/mozilla/rust/pull/8519">Supertrait methods can now be used from a trait
object</a>.</li>
<li>The rest of pnkfelix&rsquo;s visitor trait rewrite series landed.
<a href="https://github.com/mozilla/rust/pull/8539">2</a>,
<a href="https://github.com/mozilla/rust/pull/8619">3</a>,
<a href="https://github.com/mozilla/rust/pull/8623">4</a>, and
<a href="https://github.com/mozilla/rust/pull/8638">5</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8535">Foreign function wrappers have been
removed</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8328">LLVM has been updated</a>.</li>
</ul>


<h2>Docs etc</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8563">A new condition tutorial has been
added</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8725">Some docs for trait bounds have been
added</a>.</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-08-20">Tuesday
meeting</a>
discussed cycle time and how to fix it.</p>

<h1>Projects and discussion</h1>

<ul>
<li><a href="https://github.com/bjz/gl-rs">gl-rs</a> is now ready for use, since the
foreign function wrappers have been removed!</li>
<li><p><a href="https://github.com/omasanori/msgpack-rust">msgpack-rust</a> has been created.
It ties into <code>extra::serialize</code>.</p></li>
<li><p><a href="https://github.com/jensnockert/dueboot">A template for Arduino Due
projects</a>.</p></li>
<li><a href="http://www.reddit.com/r/rust/comments/1kxz7y/benchmarks_round_two_parallel_go_rust_d_scala_and/">Parallel cross-language level generation
benchmarks</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1ktjrw/a_week_with_mozillas_rust/">A Week with
Rust</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/08/19/this-week-in-rust/"/>
    <updated>2013-08-19T00:33:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/08/19/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the 11th edition of <code>This Week in Rust</code>! I&rsquo;m starting uni
this week, so if you notice I&rsquo;m not quite as omnipresent and omniprescient as
usual, that&rsquo;d be why. <strong>Please</strong> <a href="mailto:corey@octayn.net">send me an email</a>
if you would like your pull request, project, or blog post mentioned. I would
hate to overlook something cool or important.</p>

<!-- more -->


<p>The Mozilla Intern talks happened this past week or so. The ones I know about
relating to Rust are:</p>

<ul>
<li><a href="https://air.mozilla.org/intern-presentation-sullivan/">Default Methods in Rust
(sully)</a></li>
<li><a href="https://air.mozilla.org/ben-blum-from-the-research-team-presents-types-of-types-in-rust/">Types of Types in Rust
(bblum)</a></li>
<li><a href="https://air.mozilla.org/2013-intern-todd/">A Work-stealing Runtime for Rust
(toddaaro)</a></li>
<li><a href="https://air.mozilla.org/eston-schweickart-from-the-research-team-presents-a-forest-of-quadtrees-the-graphics-of-servo/">A Forest of Quadtrees: The Graphics of
Servo</a></li>
<li><a href="https://air.mozilla.org/2013-intern-presentations-august-13/">Layout in Servo: Parallel and Rustic Tree Traversals
(eatkinson)</a></li>
<li><a href="https://air.mozilla.org/2013-intern-kuehn/">Architecting Servo: Pipelines and Parallelism
(tikue)</a></li>
</ul>


<p>Congratulations to them all. The interns did a ton of great work over the
summer.</p>

<h1>What&rsquo;s cooking on master?</h1>

<p>There were only 46 PRs merged this week. I don&rsquo;t quite know why that number is
so low this week. It certainly wasn&rsquo;t for lack of PRs: the queue has been
constantly backlogged. Issue churn was -26, yay!</p>

<h2>Breaking Changes</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8526">Some functions in Result and Either were replaced to work with external
iterators</a></li>
<li><a href="https://github.com/mozilla/rust/pull/8423">The <code>priv</code> and <code>pub</code> visibility modifiers are now forbidden on contexts
where they have no meaning</a>. For
example, marking a struct field <code>pub</code>, or a module <code>priv</code>. The compiler
errors for this are quite informative, and the conversion is purely
mechanical.</li>
<li><a href="https://github.com/mozilla/rust/pull/8532"><code>to_c_str</code> now raises a condition if the string contains interior <code>NUL</code>s,
as it is impossible to create a valid C string with interior
<code>NUL</code>s</a>.</li>
</ul>


<h2>Library improvments, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8446"><code>ifmt!</code>, the new formatter, has been
finished</a>. Yay!</li>
<li><a href="https://github.com/mozilla/rust/pull/8453"><code>extra::stats::write_boxplot</code> now works with negative or zero sample
values</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8452">Some missing pieces in libstd have been filled
in</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8491">A <code>sample</code> method has been added to <code>RngUtil</code>, for resevior
sampling</a>.</li>
</ul>


<h2>Compiler improvements, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8527">A ton of work was done on a new
visitor</a>. This is the first of a
series of five.</li>
<li><a href="https://github.com/mozilla/rust/pull/8483">Vector repeat exprs (<code>[0, ..16]</code>) are now allowed in
statics</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8477">A hint has been added for incorrect use of static
methods</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8497">Trait object coercion to <code>&amp;Trait</code> has been fixed to handle freezing and
reborrowing more correctly</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8329">Debuginfo of lexical scopes and variable shadowing has been massively
improved</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8410">A <code>--target-cpu</code> flag has been added to select the target CPU, rather than
always using &ldquo;generic&rdquo;</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8455">Support for owned and borrowed trait objects has been made better
added</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8421">An <code>address_insignificant</code> attribute has been
added</a>. LLVM will do merging of
statics marked with that attribute.</li>
<li><a href="https://github.com/mozilla/rust/pull/8408">Intrinsics for checked overflow on add, sub, and mul have been
added</a>.</li>
</ul>


<h2>Tools, documentation, etc</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8469">The tutorial was translated into
Japanese</a>. I think this is the
first translation of anything, so it&rsquo;s a pretty big milestone I think.</li>
</ul>


<h1>Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-08-13">Tuesday
meeting</a>
discussed turning jemalloc back on, default arguments, and method invocation
ordering. It also discussed the new IO code and stage0 stdtest.</p>

<h1>Notable discourse</h1>

<ul>
<li><a href="http://bluishcoder.co.nz/2013/08/15/phantom_types_in_rust.html">Phantom Types in
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1k6hua/rustdev_rfc_runtimeless_libstd/">RFC: Runtimeless
libstd</a></li>
</ul>


<h1>External projects</h1>

<ul>
<li><a href="https://github.com/erickt/rust-elasticsearch">Bindings to elasticsearch</a></li>
<li><a href="https://github.com/erickt/rust-zmq">zeromq bindings have been updated</a></li>
<li><a href="https://github.com/huonw/spellck">A spellchecker for Rust code, written in Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1kd8ah/rustencoding_character_encoding_support_for_rust/">rust-encoding: character encoding support for
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1kctjn/my_first_rust_program_vocabulary_trainer/">A simple vocabulary
trainer</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1k7mfn/rustdev_rustdoc_ng_95_done/"><code>rustdoc_ng</code>: 95%
done</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1k5kqx/some_pages_in_servo_as_of_20130810/">Some pages as rendered by
Servo</a></li>
<li><a href="https://github.com/jfager/d3cap">d3cap: a libpcap-based network activity
visualizer</a></li>
<li><a href="https://github.com/sfackler/rust-postgres">postgres bindings</a></li>
<li><a href="https://gist.github.com/luqmana/6264106">RemoteJoy: a program for remotely viewing the screen of your PlayStation
Portable</a>.
(<a href="http://i.imgur.com/9Kda25J.jpg">screnshot</a>)</li>
<li><a href="https://github.com/bjz/gl-rs">The new OpenGL loader is working, pending the function pointer
fix</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust's Memory Management]]></title>
    <link href="http://cmr.github.io/blog/2013/08/13/rust-by-concept/"/>
    <updated>2013-08-13T01:14:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/08/13/rust-by-concept</id>
    <content type="html"><![CDATA[<p><strong>Note:</strong> I accidentally published this. I won&rsquo;t take it down, but it is
incomplete and I do not guarantee its correctness.</p>

<p><strong>Note 2:</strong> I don&rsquo;t think this post is necessary anymore, as the tutorial has
been updated significantly, and is quite understandable. As such I don&rsquo;t plan
on finishing this post. Email me if you&rsquo;d like to see it finished.</p>

<p>Rust seems to intimidate newcomers, as its memory model is fairly complex. I
think part of the problem is that the language tutorial introduces the memory
model by feature.  Rather, I&rsquo;ll introduce it by concept, showing examples of
code that breaks memory safety in C, and how Rust&rsquo;s memory model prevents the
error. Hopefully I can convince you that Rust isn&rsquo;t as complex as it looks,
and that the extra syntax is well-worth the zero-cost memory safety. I&rsquo;ll be
comparing Rust code to equivalent C idioms using the <a href="http://zeromq.org/"><code>zeromq
library</code></a> because it has a very clean API in both
languages. As such, I assume basic familiarity with C. Rust is not a very
suitable language for new programmers, and neither is this tutorial.</p>

<!-- more -->


<p>The core concepts driving Rust&rsquo;s memory management are, in reverse order of
simplicity, <em>ownership</em>, <em>mutability</em>, and <em>lifetime</em>. It&rsquo;s not that other
languages don&rsquo;t have them, it&rsquo;s just that they&rsquo;re implicit or convention. I
won&rsquo;t be using many fancy features of Rust here. They aren&rsquo;t needed to explain
the memory management, variables and functions suffice.</p>

<h1>Ownership</h1>

<p>Ownership is simply who is responsibile for freeing an object. If you own an
object, you are ensured it is valid.</p>

<p>An example in C would be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void *context = zmq_ctx_new(); // zeromq owns the context, you just get to use it
</span><span class='line'>// ...
</span><span class='line'>zmq_ctx_destroy(context); // you need to tell zeromq to free it, you aren't allowed to do so</span></code></pre></td></tr></table></div></figure>


<p>In Rust:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let context: ~Context = zmq_ctx_new();
</span><span class='line'>// ....
</span><span class='line'>// context implicitly freed when no one owns it anymore</span></code></pre></td></tr></table></div></figure>


<p>Notice that the C uses an opaque <code>void*</code> and that Rust uses
the explicitly-named <code>~Context</code>. In C, you often use opaque types because the
language offers no control over visibility of struct members. In Rust, you can
mark the fields of a struct <code>priv</code>, which will disallow users of the library
from using those fields. This is a bit nuanced, and I&rsquo;ll explain it in a later
tutorial on privacy and the module system.</p>

<p>The tilde means &ldquo;owned pointer&rdquo;, in that if you have an owned pointer to an
object, you are the owner. Creating an owned pointer involves a heap
allocation (malloc). I use an owned pointer in these examples to mirror the C,
but idiomatic Rust uses values on the stack much more frequently than values
on the heap.</p>

<h2>Taking ownership</h2>

<p>Rust goes one step further with ownership. The compiler asserts that an object
cannot be owned multiple times. An object can be owned by a stack frame
(locals and function arguments), a scope, or a struct. For lack of a better
term, I&rsquo;ll call these &ldquo;owners.&rdquo; You transfer ownership by &ldquo;moving&rdquo; into an
owner. Once an owner loses ownership, the compiler will error if you try to
use the object again through that owner.  This disallows dangling pointers and
prevents an entire class of error (and potentially vulnerability), &ldquo;use after
free.&rdquo;</p>

<p>In C, it&rsquo;s perfectly valid to do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void *context = zmq_ctx_new();
</span><span class='line'>zmq_ctx_destroy(context);
</span><span class='line'>use_context(context); // compiles fine, but clearly incorrect</span></code></pre></td></tr></table></div></figure>


<p>Whereas in Rust:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let context: ~Context = zmq_ctx_new();
</span><span class='line'>{ // introduce a scope
</span><span class='line'>  let context2: ~Context = context; // context moved into the variable in this scope
</span><span class='line'>} // context2 freed at scope close
</span><span class='line'>use_context(context); // error: use of moved value: `context`</span></code></pre></td></tr></table></div></figure>


<h2>Not taking ownership</h2>

<p>Most functions that take arguments don&rsquo;t need to take ownership. To express
this, Rust has the &ldquo;borrowed pointer.&rdquo; For example, in C you would write this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int length(some_large_struct_t *datum) {
</span><span class='line'>  return datum-&gt;x - datum-&gt;padding;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The function does not care who owns the object, it doesn&rsquo;t need to free it, as
there&rsquo;s no reason the object can&rsquo;t be used again after this computation. In
Rust, it&rsquo;s:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fn length(datum: &some_large_struct) -&gt; int {
</span><span class='line'>  datum.x - datum.padding
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The first thing you&rsquo;ll notice is that there is no dereference to be found in
the source. In C, <code>-&gt;</code> is the dereferencing struct member extraction operator.
In Rust, <code>.</code> will dereference if it needs to. You&rsquo;ll also notice that Rust
uses <code>&amp;</code> rather than <code>*</code> to indicate this type of a pointer. It&rsquo;s the same
operator used to take a pointer (address-of), as in C. C, however, doesn&rsquo;t
enforce the non-transfer of ownership. It&rsquo;s perfectly valid to do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int length(some_large_struct_t *datum) {
</span><span class='line'>  int l = datum-&gt;x - datum-&gt;padding;
</span><span class='line'>  free(datum);
</span><span class='line'>  return l;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>length</code> has now incorrectly taken ownership of <code>datum</code>, by <code>free</code>ing it. Any
code which had a pointer to <code>datum</code> has now been rendered incorrect. In Rust,
there is no way to safely free memory. It is automatically free&rsquo;d.</p>

<h2>Multiple ownership</h2>

<p>There are situations when ownership isn&rsquo;t so black and white, and for that
Rust has the &ldquo;managed pointer.&rdquo; The type of a managed pointer is <code>@'static T</code>.
The <code>'static</code> means &ldquo;this type cannot contain any borrowed pointers.&rdquo; The
shorthand for <code>@'static T</code> is just <code>@T</code>: it&rsquo;s impossible to have a managed
pointer to a type that doesn&rsquo;t fulfill <code>'static</code>. Using only owned and
borrowed pointers, ownership forms a DAG. Managed pointers allow cycles. They
are GC-managed, and allow multiple pointers to the same object. The way this
is enabled is that the pointer&rsquo;s contents (the pointee) are immutable. If
they were allowed to be mutable, data races would occur. In the next section
I&rsquo;ll show the mutable version.</p>

<p>These have no direct comparison in C. The closest comparison is probably
GObject&rsquo;s memory management API. Managed pointers aren&rsquo;t explicit memory
management. As the name suggests, the runtime manages it for you. Managed
pointers are usually considered as a &ldquo;last resort&rdquo;. Even though GC in Rust can
be fast because all managed pointers are task-local, no GC is always faster
than some GC.</p>

<h1>Mutability</h1>

<p>Mutability is whether you are allowed to mutate, or modify, some data. There
are two pieces to mutability: mutability of things an object owns (inherited
mutability), and mutability of data through a pointer.</p>

<h2>Inherited Mutability</h2>

<p>Say you have a point on the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct Point {
</span><span class='line'>  x: int,
</span><span class='line'>  y: int
</span><span class='line'>}
</span><span class='line'>let value: Point = Point { x: 24, y: 42 };</span></code></pre></td></tr></table></div></figure>


<p>If you try to mutate the point by, say, changing the <code>x</code> field, the compiler
will complain:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>value.x = 42; //~ ERROR: cannot assign to immutable field</span></code></pre></td></tr></table></div></figure>


<p>The error message is actualy a bit misleading: there is no such thing as a
mutable field! &ldquo;Point&rdquo; is said to have inherited mutability; its mutability is
determined by the mutability of the thing that holds it. So, to fix this
example, we&rsquo;d use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let mut value: Point = Point { x: 24, y: 42 };
</span><span class='line'>value.x = 42;</span></code></pre></td></tr></table></div></figure>


<p>Inherited mutability inherits throughout the ownership tree: the value, and
everything the value owns, recursively.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/08/10/this-week-in-rust/"/>
    <updated>2013-08-10T21:39:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/08/10/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the tenth issue of <em>This Week in Rust</em>. This week marks
the enabling of the new runtime written entirely in Rust. A lot happens every
week, so I&rsquo;m going to start omitting PRs that I deem of lesser importance.
This process is entirely arbitrary, don&rsquo;t feel hurt if I exclude your PR :).</p>

<!-- more -->


<h1>What&rsquo;s cooking on <code>master</code>?</h1>

<p>Issue churn was -12 this week. A total of 70 PRs were merged.</p>

<p><a href="https://github.com/mozilla/rust/pull/8358">The new runtime has been enabled by
default</a>. This is the culmination
of a lot of work by brson and the rt interns (toddaaro, bblum, and ecr being
the ones I know of). It&rsquo;s written entirely in Rust, and lives in <code>std::rt</code>.
Additionally, the <a href="https://github.com/mozilla/rust/pull/8387">old C++ runtime has been
removed</a>.</p>

<h2>Breaking Changes</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8296"><strong>Trailing nulls have been removed from all string
types.</strong></a>. This will break your
FFI code in subtle and mysterious ways, if you didn&rsquo;t explicitly use the
<code>as_c_str</code> methods. FFI code using the new <code>str::c_str</code> code will be more
robust, as it forbids interior nulls, and ensures that a trailing null
always exists. The replacement for <code>str.as_c_str</code> is
<code>str.to_c_str().as_slice()</code>, from what I can tell.</li>
<li><a href="https://github.com/cmr/rust/commit/e99eff172a11816f335153147dd0800fc4877bee">The <code>priv</code> keyword is no longer allowed where it has no
meaning</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8265"><code>iter</code> and <code>iter_err</code> in Result have been replaced with external
iterators</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8288">The <code>get</code> method of <code>Option</code>, <code>Either</code>, and <code>Result</code> has been removed in
favor of <code>unwrap</code></a>. They both did
the same thing, which was useless duplication.</li>
<li><a href="https://github.com/mozilla/rust/pull/8218"><code>std::gc</code> and <code>std::stackwalk</code></a>
have been removed, as they are obsolete with the new runtime.</li>
<li><a href="https://github.com/mozilla/rust/pull/8264">The transitionary <code>foreach</code> has been
removed</a>.</li>
</ul>


<h2>Notable library additions, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8357">Some redundant <code>Ord</code> methods were removed from
impls</a> where the default methods
sufficed.</li>
<li><a href="https://github.com/mozilla/rust/pull/8336">FromStr for IpAddr and
SocketAddr</a> is implemented.</li>
<li><a href="https://github.com/mozilla/rust/pull/8356">Work steealing is implemented for the newrt
scheduler</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8320">A frequency counting function has been added to
<code>extra::stat</code></a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8323">Saturating math</a> is now
implemented. I knew this as &ldquo;clamping&rdquo;: it is arithmetic that clamps results
into a specific interval.</li>
<li><a href="https://github.com/mozilla/rust/pull/8287">A hexadecimal encoding module</a>
has been added to <code>extra</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8054"><code>EnumSet</code> has been moved into <code>extra</code>, it previously existed as a utility
in <code>rustc</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/8237"><code>str::is_utf8</code> has seen some more
optimization</a>.</li>
</ul>


<h2>Notable compiler additions, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8245">Initial support for the new formatting
code</a> has been added.</li>
<li><a href="https://github.com/mozilla/rust/pull/8279">A <code>no_main</code> attribute has been
added</a>, to omit the Rust entry
point entirely.</li>
<li><a href="https://github.com/mozilla/rust/pull/8220">Vanilla Linux on ARM</a> is now
supported.</li>
<li><a href="https://github.com/mozilla/rust/pull/8262">Extra copies of rvalues </a> are no
longer omitted.</li>
<li><a href="https://github.com/mozilla/rust/pull/8361">Some cross-arch bugs with node hash
metadata</a> have been fixed.</li>
<li><a href="https://github.com/mozilla/rust/pull/8350">A soundness bug in struct matching has been
fixed</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8362">An <code>option_env!</code> syntax extension has been
added</a> for compile-time inclusion
of environment variables that may or may not be present.</li>
<li><a href="https://github.com/mozilla/rust/pull/8176"><code>extern mod a = "b/c/d"</code> has been
implemented</a>, paving the way for
more rustpkg awesomeness.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-08-06">Tuesday
meeting</a> seems
to have been a bit under-attended. SIMD, ARM, trailing nulls, order of <code>mod</code>
and <code>use</code>, and the condition system were all briefly discussed..</p>

<h1>Discussion + Blog posts</h1>

<ul>
<li><a href="https://air.mozilla.org/2013-intern-todd/">&ldquo;A Work-stealing Runtime for
Rust&rdquo;</a>, toddaaro&rsquo;s intern
presentation.</li>
<li><a href="http://michaelwoerister.github.io/2013/08/10/iterator-blocks-features.html">&ldquo;Iterator Blocks for Rust &ndash; Feature
Survey&rdquo;</a></li>
</ul>


<h1>External projects</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1k43px/a_simple_jit_vm_written_using_rust_and_libjit/">Galvanized: a simple JIT VM written in Rust, using
LibJIT</a></li>
<li><a href="https://github.com/Jeaye/q3/commit/f4c82ce9c276327cababdb6650038e2c1d62f2d5">Q3 has a new
logger</a>.
I think it&rsquo;s nicer than the built-in one!</li>
<li><a href="https://github.com/stepancheg/rust-protobuf">rust-protobuf: a protobuf implementation generating rust code, written in
rust</a>.</li>
<li><a href="https://twitter.com/metajack/status/364571230331875331/photo/1">Servo: almost passing acid1
!</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/08/04/this-week-in-rust/"/>
    <updated>2013-08-04T18:40:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/08/04/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the ninth issue of <em>This Week in Rust</em>. This week brings
the new <code>for</code> loop, which is very exciting, as well as a bunch of runtime
changes and cleanup.</p>

<!-- more -->


<h1>What&rsquo;s cooking on <code>master</code>?</h1>

<p>Issue churn was +4 this week. A total of 63 PRs were merged (again).</p>

<h2>Breaking Changes</h2>

<ul>
<li><strong>The <code>for</code> loop now uses external iterators.</strong> This means any code written
to use the old internal iterator protocol will no longer work. See the
<a href="http://static.rust-lang.org/doc/tutorial-container.html">iterator tutorial</a>
for more information on how to use it. Related pull requests:
<a href="https://github.com/mozilla/rust/pull/8141">#8141</a>,
<a href="https://github.com/mozilla/rust/pull/8184">#8184</a>,
<a href="https://github.com/mozilla/rust/pull/8190">#8190</a>,
<a href="https://github.com/mozilla/rust/pull/8244">#8244</a>. A few uses now
require <code>do</code> rather than <code>for</code> because they cannot/have not been
implemented in terms of external iterators.</li>
<li><code>unsafe</code> is <a href="https://github.com/mozilla/rust/pull/8235">no longer allowed</a>
for functions in <code>extern</code> blocks: they are all unsafe.</li>
<li>The <a href="https://github.com/mozilla/rust/pull/8175"><code>extra::dbg</code> module</a> has
been removed.</li>
<li><code>uint::range</code> and all its friends have been replaced with an <a href="https://github.com/mozilla/rust/pull/8216">external
iterator</a>, that is in the
prelude. Code like the following now works:
<code>
for x in range(0, 10) {
    println(x.to_str());
}
</code></li>
<li>The pipes compiler (the thing driving <code>proto!</code>) <a href="https://github.com/mozilla/rust/pull/8170">has been
removed</a>, as it saw limited
use, was very old, and was a significant maintenance burden.</li>
<li><code>PortSet</code> <a href="https://github.com/mozilla/rust/pull/8164">has been removed</a> from
std, as the new scheduler does not support it.</li>
<li>A bunch of old task APIs <a href="https://github.com/mozilla/rust/pull/8139">have been
removed</a>, aslo in preparation for
the new schduler.</li>
<li><code>is_utf8</code> now <a href="https://github.com/mozilla/rust/pull/8133">rejects overlong
encodings</a>.</li>
<li>The iterator adaptors <a href="https://github.com/mozilla/rust/pull/8090">no longer have the Iterator
suffix</a>, same with <a href="https://github.com/mozilla/rust/pull/8095">str and vec
iterators</a> as well.</li>
</ul>


<h2>newrt changes</h2>

<p>A bunch of newrt things landed this week, so it gets its own section.</p>

<ul>
<li>Some <a href="https://github.com/mozilla/rust/pull/8234">bugs preventing the arc and sync tests from
passing</a> have been fixed.</li>
<li>The new scheduler now supports <a href="https://github.com/mozilla/rust/pull/8221">the <code>SingleThreaded</code> spawn
mode</a>.</li>
<li>A bunch of work with task killing <a href="https://github.com/mozilla/rust/pull/8195">has
landed</a>.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/8116">major TLS changes</a> also
landed.</li>
<li>Tasks can <a href="https://github.com/mozilla/rust/pull/8158">now be named</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8008"><code>select</code> on newrt pipes</a> has
been implemented.</li>
</ul>


<h2>Notable library additions, bugfixes, and cleanup</h2>

<ul>
<li><code>Map::contains_key</code> is <a href="https://github.com/mozilla/rust/pull/8246">now a default
method</a> implemented in terms of
<code>Map::find</code></li>
<li>A <code>dynamic_lib</code> segfault <a href="https://github.com/mozilla/rust/pull/8219">has been
fixed</a>.</li>
<li>A keyed <code>HashMap</code> constructor is <a href="https://github.com/mozilla/rust/pull/8186">now
exposed</a> for runtimeless programs
that want to use it.</li>
<li>The <code>Str</code> trait now has an <a href="https://github.com/mozilla/rust/pull/8204"><code>into_owned</code>
method</a> to avoid copies when you
already have a <code>~str</code>.</li>
<li>A bunch of <a href="https://github.com/mozilla/rust/pull/8174">SHA1 and SHA2
cleanup/optimizations</a> landed. I
hear that the speed is almost optimal, only a few cycles/byte short of
Intel&rsquo;s optimized implementation.</li>
<li>Errno coverage has been <a href="https://github.com/mozilla/rust/pull/8193">significantly expanded for
Linux</a>. I added all of the ones
that were missing, at least the ones that were present on my system.</li>
<li><code>assert!()</code> without a message <a href="https://github.com/mozilla/rust/pull/8150">now does less
allocation</a>.</li>
<li>&lsquo;\&rsquo; is <a href="https://github.com/mozilla/rust/pull/8138">no longer treated as a path
separater</a> on POSIX system.</li>
<li><code>getopt</code>&rsquo;s <code>opts_str</code> <a href="https://github.com/mozilla/rust/pull/8135">has been corrected to use more than just the first
element of the vector</a>.</li>
<li>Some more methods <a href="https://github.com/mozilla/rust/pull/8115">were added</a> in
<code>std::num</code>.</li>
<li>An iterator over the offsets of each character in a string <a href="https://github.com/mozilla/rust/pull/8082">was
added</a>.</li>
<li>A bunch of <code>RandomAccessIterator</code> implementations <a href="https://github.com/mozilla/rust/pull/8120">have been
added</a>.</li>
<li><code>Clone</code> and <code>DeepClone</code> are <a href="https://github.com/mozilla/rust/pull/8109">now
implemented</a> for <code>extern "Rust"
fn</code>.</li>
</ul>


<h2>Notable compiler additions, bugfixes, and cleanup</h2>

<ul>
<li>A <code>cfg!</code> syntax extension <a href="https://github.com/mozilla/rust/pull/8188">has been
added</a> for conditionally running
code based on crate configuration, similar to what <code>#[cfg]</code> does for
conditional compilation. It expands into a true/false constant, so LLVM
should optimize out the dead branches.</li>
<li>Some more codegen tests <a href="https://github.com/mozilla/rust/pull/8165">have been
added</a>.</li>
<li><code>copy</code> <a href="https://github.com/mozilla/rust/pull/8162">has been removed as a
keyword</a>.</li>
<li>Static struct initializers <a href="https://github.com/mozilla/rust/pull/8091">can now contain
<code>..base</code></a> for functional update.</li>
<li>Take glue <a href="https://github.com/mozilla/rust/pull/8146">has been unified</a> for
unique pointer type.</li>
<li>Pointer arithmetic is <a href="https://github.com/mozilla/rust/pull/8121">now implemented with
GEP</a> rather than casting to int
and back to the pointer.</li>
<li>Some more AST types <a href="https://github.com/mozilla/rust/pull/8107">were
renamed</a>.</li>
<li>Cross-crate conditions <a href="https://github.com/mozilla/rust/pull/8185">now
work</a>.</li>
</ul>


<h2>Documentation, tools, and other stuff</h2>

<ul>
<li>LLVM assertions <a href="https://github.com/mozilla/rust/pull/8147">can now be
disabled</a> with a configure
option.</li>
<li>Benchmarking can <a href="https://github.com/mozilla/rust/pull/8111">now be
disabled</a> by passing <code>NO_BENCH=1</code>
to make.</li>
<li><code>NO_REBUILD</code> <a href="https://github.com/mozilla/rust/pull/8110">no longer requires a
re-boostrap</a>, which should make
debug cycles on libstd much shorter.</li>
<li><code>vec</code> <a href="https://github.com/mozilla/rust/pull/7223">now has module
documentation</a>.</li>
<li>rustpkg <a href="https://github.com/mozilla/rust/pull/8032">now handles tags</a>, and
not just version numbers, in the package ID.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-30">Tuesday
meeting</a> this
week was quite meaty. I&rsquo;m not going to try to summarize it, as it seems no
real decisions were made.</p>

<h1>Discussion + Blog posts</h1>

<ul>
<li><a href="http://michaelwoerister.github.io/2013/08/03/visibility-scopes.html">Visibility scopes in Rust Debug
Info</a>.</li>
<li><a href="https://air.mozilla.org/2013-intern-kuehn/">Architecting Servo: Pipelines and
Parallelism</a>, a talk by Tim
Kuehn.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1jo431/runtimeless_sprocketnes/">Runtimeless
sprocketnes</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1joy7f/porting_machine_learning_algorithms_to_rust/">Porting machine learning algorithms to
Rust</a>.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2013-July/005039.html">RFC: Overloadable dereference
operator</a>.</li>
</ul>


<h1>External projects</h1>

<ul>
<li><a href="https://github.com/SiegeLord/RustGnuplot">RustGnuplot</a> was updated to
latest Rust.</li>
<li>A <a href="https://github.com/stepancheg/rust-protobuf">protobuf implementation</a> has
been started.</li>
<li><a href="https://github.com/linuxfood/rustsqlite">rustsqlite</a> has
been updated to latest Rust.</li>
<li>A <a href="https://github.com/veddan/rust-htmlescape">library for HTML escaping</a> has
been created.</li>
<li>A <a href="https://github.com/bjz/noise-rs">library for procedurally generating
noise</a> has been created.</li>
<li>A <a href="https://github.com/MarkJr94/rust-keccak">pure-Rust implementation of
Keccak</a> has been created.</li>
<li><a href="https://github.com/erickt/rust-zmq">rust-zmq</a> has been updated to latest
Rust, as well as cleaner error/constant interface.</li>
<li><a href="https://github.com/Jeaye/q3">q3</a> now does multithreaded rendering.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Last Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2013/07/29/last-week-in-rust/"/>
    <updated>2013-07-29T06:55:00-04:00</updated>
    <id>http://cmr.github.io/blog/2013/07/29/last-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to the eighth issue of <em>This Week in Rust</em>. Due to me being
busy and forgetful over the weekend, this is a special issue, <em>Last Week in
Rust</em>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on <code>master</code>?</h1>

<p>Issue churn continues to be negative, -15 this week. A total of 63 PRs were
merged.</p>

<h2>Breaking Changes</h2>

<p>There were impressively few breaking changes last week.</p>

<ul>
<li><strong>You now need to pass <code>--cfg debug</code> to <code>rustc</code> to emit debug logging.</strong></li>
<li><a href="https://github.com/mozilla/rust/pull/7926"><strong><code>mod.rs</code> is now &ldquo;blessed&rdquo;.</strong></a>.
When loading <code>mod foo;</code>, rustc will now look for <code>foo.rs</code>, then
<code>foo/mod.rs</code>, and will generate an error when both are present.</li>
<li><a href="https://github.com/mozilla/rust/pull/7996">A bunch of <code>str</code> functions</a> were
renamed or shuffled around to be more consistent.</li>
<li><a href="https://github.com/mozilla/rust/pull/7934"><code>SmallIntSet</code> was removed</a> in
favor for the more efficient, equivalent <code>BitvSet</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7703"><code>Bitv</code> and <code>Bitvset</code> have switched to external
iterators</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7883"><code>extra::net</code> and a bunch of other obsolete
features</a> have been removed.</li>
</ul>


<h2>Notable library additions, bugfixes, and cleanup</h2>

<ul>
<li>Various <a href="https://github.com/mozilla/rust/pull/8040">TCP/UDP additions</a> have
been made in the new rt.</li>
<li>Some more <a href="https://github.com/mozilla/rust/pull/8039">atomic operations</a>
have been added.</li>
<li>A <a href="https://github.com/mozilla/rust/pull/7931"><code>chain_mut_ref</code> method</a> was
added to <code>Option</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7982">Random access iterators</a> have
been implemented.</li>
<li>Some missing <a href="https://github.com/mozilla/rust/pull/7993">memory orderings on atomic
types</a> have been added.</li>
<li><a href="https://github.com/mozilla/rust/pull/7885">workcache has seen a bunch of
attention</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7944">DList has seen some more cleanup
too</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7916">Timers have been added to the new
rt</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/7943">Vectors now implement <code>slice_from</code> and
<code>slice_to</code></a>.</li>
</ul>


<h2>Notable compiler additions, bugfixes, and cleanup</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/8045">debuginfo for destructured locals and function
args</a> is now implemented.</li>
<li><a href="https://github.com/mozilla/rust/pull/7986">Raw representations are now
consolidated</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8041">Impossible branches on
constants</a> are now omitted.</li>
<li><a href="https://github.com/mozilla/rust/pull/7924">It is now possible to link against crates with
<code>#[no_std]</code></a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8029">There is now a warning when matching against
NaN</a>, since it is impossible to
match against NaN (NaN != NaN).</li>
<li>A lot of <a href="https://github.com/mozilla/rust/pull/8015">default method and trait inheritance
bugs</a> have been fixed.</li>
<li><a href="https://github.com/mozilla/rust/pull/8000"><code>uint</code> enum discriminants are now
allowed</a>.</li>
<li>The <a href="https://github.com/mozilla/rust/pull/7958">section placement of static and fn items is now
configurable</a>.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/7848">trans naming modernization has
occured</a>.</li>
<li>Some unnecessary branches and blocks <a href="https://github.com/mozilla/rust/pull/7941">have been
removed</a>, resulting in a 10%
speedup of unoptimized rustc.</li>
</ul>


<h2>Documentation, tools, and other stuff</h2>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/7912">Some benchmarks</a>, and <a href="https://github.com/mozilla/rust/pull/7980">some more
benchmarks</a>.</li>
<li>Crnobog has <a href="https://github.com/mozilla/rust/pull/8001">fixed</a>
<a href="https://github.com/mozilla/rust/pull/7979">some</a> Windows testsuite issues.</li>
<li><a href="https://github.com/mozilla/rust/pull/7820"><code>Makefile</code> dependencies</a> have
been fixed. <code>rustc</code> will never be invoked without its dependencies being
built.</li>
<li><a href="https://github.com/mozilla/rust/pull/8031"><code>rust-mode</code> has been rewritten</a>.</li>
<li><a href="https://github.com/mozilla/rust/pull/8020">There are some build system changes surrounding the <code>--cfg debug</code>
changes</a>.</li>
</ul>


<h1>Meetings</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-23">Tuesday
meeting</a> was
quite productive. A quick summary:</p>

<ul>
<li>Graydon wants to investigate using the Memory Pool System as the Rust GC,
rather than a bespoke one. The <a href="http://www.ravenbrook.com/project/mps/">MPS</a> is
a very mature and robust memory management library.</li>
<li>The buildbots now collect and report some metrics as JSON. Take a poke in
<code>http://static.rust-lang.org/build-metrics/&lt;git-sha1&gt;/&lt;builder&gt;/&lt;slave&gt;/&lt;metricsfile&gt;.json</code>
if you&rsquo;re interested.</li>
<li>pcwalton proposes allowing <code>Self</code> in impls, like in trait definitions.</li>
<li>There was some discussion of destructors taking <code>self</code> by value.</li>
<li>There was a proposal to remove <code>*mut</code>, but it can be useful. There was no
consensus.</li>
<li>There was also some discussion on closures and mutable captures. I don&rsquo;t
really have enough context to understand the conversation, something to do
with &ldquo;thunks&rdquo;.</li>
<li>Removing <code>&amp;const</code> was discussed as well. The &ldquo;plan is that we add a lint
flag but document it as a reserved word&rdquo;, as it doesn&rsquo;t really seem to be
useful.</li>
</ul>


<h1>Discussion + Blog posts</h1>

<ul>
<li><a href="http://michaelwoerister.github.io/2013/07/26/Iterator-Blocks.html">Iterator Blocks for
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1j5vbn/rustdev_rfc_removing_t/">RFC: Removing
<code>*T</code></a></li>
<li><a href="https://speakerdeck.com/dherman/rust-low-level-programming-without-the-segfaults">dherman&rsquo;s OSCON
slides</a></li>
<li><a href="https://careers.mozilla.org/en-US/position/oKiEXfwn">Mozilla is hiring a Rust research
engineer</a></li>
<li><a href="http://blog.mongodb.org/post/56426792420/introducing-the-mongodb-driver-for-the-rust-programming">An alpha release of the MongoDB
Driver</a></li>
<li><a href="https://togototo.wordpress.com/2013/07/23/benchmarking-level-generation-go-rust-haskell-and-d/">A fairly useless benchmark of random number
generation</a></li>
</ul>


<h1>Projects</h1>

<ul>
<li><a href="https://github.com/bjz/color-rs">color-rs: A library that provides types and conversions for working with
various color formats.</a></li>
<li><a href="https://github.com/Aatch/grease-bench">grease-bench: a runtimeless
benchmarker</a></li>
<li><a href="https://github.com/dobkeratops/rustfind">rustfind, a &ldquo;jump to definition&rdquo;
tool</a></li>
<li><a href="https://github.com/Florob/RustyXML">RustyXML, a pure-Rust XML parser</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
